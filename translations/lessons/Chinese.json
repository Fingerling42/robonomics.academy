{
  "Part 3: Emergence of the World Computer": "第三部分：世界计算机的出现",
  "In the third part titled \"Emergence of the World Computer,\" we will attempt, layer by layer, to recreate the engineering implementation of the world computer using examples from Ethereum and Polkadot, as before.\"": "在标题为“世界计算机的出现”的第三部分中，我们将尝试逐层重建世界计算机的工程实现，使用以太坊和Polkadot的示例，就像之前一样。",
  "Learn": "学习",
  "In the third part titled \"Emergence of the World Computer,\" we will attempt, layer by layer, to recreate the engineering implementation of the world computer using examples from Ethereum and Polkadot, as before.": "在标题为“世界计算机的出现”的第三部分中，我们将尝试逐层重建世界计算机的工程实现，使用以太坊和Polkadot的示例，就像之前一样。",
  "Let's start with Ethereum. Ethereum began in 2015 with a state that can be characterized as a combination of the proof-of-work consensus algorithm, enabling the world computer to exist in a decentralized state (as discussed in Part 2). Additionally, the Ethereum Virtual Machine (EVM) was introduced, serving as a Turing-complete computational machine. Together, these two elements formed the first version of the world computer, sometimes referred to as a precursor. Within this context, decentralized applications, or smart contracts, began to emerge.": "让我们从以太坊开始。以太坊始于2015年，其状态可以描述为一种结合了工作量证明共识算法的状态，使世界计算机能够以分散状态存在（如第2部分所讨论的）。此外，引入了以太坊虚拟机（EVM），作为一个图灵完备的计算机。这两个元素共同形成了世界计算机的第一个版本，有时被称为前身。在这种情况下，分散式应用程序或智能合约开始出现。",
  "Over the next 5 years, Ethereum lived a relatively unchanged life, undergoing some engineering tunings, such as a continuous increase in gas limits, with the exception of events like the Shanghai fork. Notably, during the second DEFCON held in Shanghai, a denial-of-service attack exploited a function in the virtual machine that consumed minimal gas but triggered significant computations on the Ethereum network. This led to memory overflow, effectively disrupting an entire Ethereum node. This incident highlights the intricate details that arise when dealing with a large and abstract solution like creating a virtual machine.": "在接下来的5年里，以太坊过着相对不变的生活，经历了一些工程调整，例如持续增加燃气限制，除了上海分叉等事件。值得注意的是，在上海举行的第二次DEFCON中，一次拒绝服务攻击利用了虚拟机中的一个函数，消耗了最少的燃气，但在以太坊网络上触发了重要的计算。这导致内存溢出，有效地破坏了整个以太坊节点。这一事件突显了处理像创建虚拟机这样的大型和抽象解决方案时出现的复杂细节。",
  "Moving forward, a significant shift occurred around the end of the decade, particularly in 2020, with the advent of Ethereum 2.0. However, Ethereum 2.0 has now been deprecated, and I would characterize the real breakthrough as starting around 2019-2020. During this period, there was a true technological breakthrough in Ethereum, moving towards the concept of Ethereum 2.0. The moment of engineering change in Ethereum's architecture can be considered the event known as \"the merge,\" where the functionalities of the beacon chain were combined. The merge marked a significant shift in the paradigm of Ethereum, transitioning it into a slightly different state than what was on the board. The actual engineering change in Ethereum's architecture can be associated with \"the merge,\" where the functionalities of the beacon chain were integrated. For a detailed history of this, you can refer to the ethereum.org website, which provides an excellent article on the coexistence of the traditional Ethereum blockchain with the parallel blockchain launched in 2015 and the Ethereum Virtual Machine.": "在接下来的十年末，特别是在2020年，发生了重大转变，以太坊2.0的出现。然而，以太坊2.0现已被弃用，我认为真正的突破是从2019年至2020年开始的。在这段时间内，以太坊出现了真正的技术突破，朝着以太坊2.0的概念迈进。以太坊架构的工程变化时刻可以被认为是被称为“合并”的事件，其中信标链的功能被合并。合并标志着以太坊范式的重大转变，将其转变为与之前不同的状态。以太坊架构的实际工程变化可以与“合并”相关联，其中信标链的功能被整合。有关此的详细历史，您可以参考ethereum.org网站，该网站提供了一篇关于传统以太坊区块链与2015年启动的并行区块链以及以太坊虚拟机共存的优秀文章。",
  "When the merge occurred, we witnessed a new architectural representation, both at the network level and for individual nodes interacting with the Ethereum network. What was the actual change? For many, the merge signifies the transition from proof-of-work to proof-of-stake, which is indeed significant. It implies increased efficiency and fine-tuning, but it's still a tuning relative to one of the parameters. However, the more noteworthy internal engineering change for each network client was the split. There was no longer a single specific network client or a monolithic architecture. Instead, we got two components of a single node interacting with the Ethereum network.": "当合并发生时，我们目睹了一个新的架构表示，无论是在网络层还是与以太坊网络交互的个体节点。实际的变化是什么？对许多人来说，合并标志着从工作量证明到股权证明的过渡，这确实很重要。这意味着效率和微调的提高，但相对于其中一个参数仍然是一种调整。然而，对于每个网络客户端来说，更值得注意的内部工程变化是分裂。不再有单一特定的网络客户端或单片架构。相反，我们得到了与以太坊网络交互的单个节点的两个组件。",
  "The first part, which I labeled \"beacon chain\" on the diagram, essentially represents a collective image of all the innovations that came into the Ethereum client at the moment of the merge. The second part is the preserved virtual machine. Nevertheless, it's worth adding something here too. Dialogues truly began about replacing the virtual machine, which was exclusively tailored to work with smart contracts and smart contracts in a specific language—Solidity. This is because, by 2015, there were practically no interpreters left for smart contracts in languages other than Solidity, and the architecture appeared somewhat one-sided from the perspective of an Ethereum programmer. You learn a snippet of JavaScript in the form of Solidity, write smart contract code on it, and get your DApp, like Uniswap, for example.": "第一部分，我在图表上标记为“信标链”，实质上代表了在合并时刻进入以太坊客户端的所有创新的集体形象。第二部分是保留的虚拟机。然而，在这里也值得补充一些内容。关于替换虚拟机的对话真正开始了，这个虚拟机是专门为与智能合约和特定语言Solidity中的智能合约一起工作而定制的。这是因为到2015年，除了Solidity之外，几乎没有留下为智能合约编写解释器的语言，从以太坊程序员的角度来看，架构似乎有些片面。你学习一点JavaScript，以Solidity的形式，编写智能合约代码，然后得到你的DApp，比如Uniswap，例如。",
  "Since the emergence of a more complex Ethereum architecture, discussions have revolved around the idea that the virtual machine, which existed as a somewhat monolithic element from 2015, can also be replaced in the new architecture. The conversation shifted towards replacing it with something like WebAssembly (Wasm) or a more interesting solution from the perspective of writing code for the world computer. You could say, \"Wasm with a question mark.\"": "自从更复杂的以太坊架构出现以来，讨论围绕着这样一个想法展开，即从2015年起作为一种有些单片化元素存在的虚拟机也可以在新架构中被替换。对话转向用类似WebAssembly（Wasm）或从编写世界计算机代码的角度来看更有趣的解决方案来替换它。你可以说，“带着一个问号的Wasm。”",
  "From the perspective of the Beacon Chain, it indeed operates on proof-of-stake, but what's more interesting is the inclusion of Gasper. This represents a modification of the original ideas about Casper. Casper, often referred to as the friendly ghost finality gadget, was introduced, perhaps even as early as Defcon 3 or 4, and maybe even discussed at Defcon 2—I don't recall precisely. But at the EthCC conference in Paris, which definitely took place in 2018, Vlad Zamfir and Vitalik, from different rooms, were discussing the emergence of Casper as a friendly ghost, overseeing participants in proof-of-stake and coming to the aid of the network when a node misbehaves. From this idea of Casper, Gasper emerges. Without delving into terminology too much, the consensus algorithm undergoes a shift, changing not only in terms of simplicity but also becoming more complex, similar to Polkadot. As I mentioned earlier, Polkadot has two consensus algorithms, Babe and Grandpa. Similarly, with Ethereum's Beacon Chain functionality, achieving consensus and finality is not as instantaneous. It involves epochs, and the network operates on a more complex scenario, reaching a state that is already somewhat dynamic, not frozen, and is essentially carved in stone.": "从信标链的角度来看，它确实在股权证明上运作，但更有趣的是加斯帕的加入。这代表了对Casper原始想法的修改。Casper通常被称为友好的幽灵终结装置，可能早在Defcon 3或4时引入，甚至可能在Defcon 2时讨论过——我记不太清楚了。但在巴黎的EthCC会议上，维塔利克和弗拉德·扎米尔从不同的房间讨论了Casper作为友好的幽灵的出现，监督股权证明的参与者，并在节点行为不端时帮助网络。从Casper的这个想法中，Gasper出现了。不深入术语太多，共识算法发生了变化，不仅在简单性方面发生了变化，而且变得更加复杂，类似于Polkadot。正如我之前提到的，Polkadot有两种共识算法，Babe和Grandpa。同样，在以太坊的信标链功能中，达成共识和终局性并不是瞬间完成的。它涉及到时代，网络在更复杂的情景下运作，达到了一个已经有些动态的状态，不���冻结的，基本上是铭刻在石头上的。",
  "What can be added in relation to 2024? For me, it was a prolonged observation and an attempt to understand whether Ethereum would eventually implement sharding or not. Sharding is the ability to exist not with a single blockchain but with multiple blockchains within one network. As I observed the merge and the simultaneous rise of Layer 2 (L2) networks, questions arose in my mind about whether sharding would indeed materialize. Sharding seemed interesting to me due to its homogeneity—having multiple chains that are almost identical, lacking any specific characteristics. It appeared to be an interesting approach, but not as flexible as a heterogeneous approach. In L2 networks, even several years ago, I could see the heterogeneity of Ethereum, its ability to work with various types of more specific blockchains. I was curious about the direction it would take—whether sharding, with its homogeneity, would displace L2 solutions or whether L2 solutions with a heterogeneous approach would saturate the Beacon Chain and the main nodes of the Ethereum network.": "关于2024年还可以补充什么？对我来说，这是一个长时间的观察和尝试理解以太坊最终是否会实现分片。分片是指不仅存在于单一区块链中，而且在一个网络中存在多个区块链的能力。当我观察到合并和同时崛起的第二层（L2）网络时，我脑海中出现了关于分片是否会实现的问题。分片对我来说似乎很有趣，因为它的同质性——有多个几乎相同的链，缺乏任何特定特征。这似乎是一种有趣的方法，但不像异质方法那样灵活。在第二层网络中，即使在几年前，我也能看到以太坊的异质性，它能够与各种类型的更具体的区块链一起工作。我对它将走向何方很感兴趣——分片是否会以其同质性取代L2解决方案，还是L2解决方案以异质方法饱和信标链和以太坊网络的主节点。",
  "Today, in 2024, based on articles on ethereum.org, it seems that sharding as a concept has been pushed back, and the focus is on helping various L2 networks integrate with the Beacon Chain and align with the main chain's functionality, which is now divided into two elements in the Ethereum network's architecture.": "今天，在2024年，根据ethereum.org上的文章，似乎分片作为一个概念已经被推迟，重点是帮助各种L2网络与信标链集成，并与主链的功能对齐，这些功能现在在以太坊网络架构中分为两个元素。",
  "Therefore, without delving into the details of how L2 networks are structured—although we'll touch upon that when we fill in the second part of the board—we should imagine that Ethereum is now a kind of Beacon Chain, a beacon, a guiding star for numerous L2 networks. These L2 networks can have more specific functionality, executing their logic according to a set of individual functions. This is somewhat in line with the idea of a Swiss Army knife—not making Ethereum a Swiss Army knife, but L2 networks are starting to differentiate in architecture. They duplicate the functionality of the abstract computing machine of Ethereum but perform it with lower gas costs or within their specific segment. Some are already thinking about tuning and making their L2 layer more efficient, focusing on specific functional capabilities. Thus, in my opinion, we are witnessing the emergence of heterogeneity in the world computer that aimed to be homogeneous. Also, it's essential not to forget that decentralized applications (dApps) still exist within the main blockchain, within that same blockchain that started in 2015. This means that during the merge, during the transition to the new architectural state, there was no wipeout, no erasure of the previous history. All decentralized applications and smart contracts underlying these applications continued to exist, and they continue to exist today, and probably tomorrow. This is a question that we will explore using Polkadot as an example, but there is still a feeling that it will be possible to settle a decentralized application in the Beacon Chain—dApps.": "因此，不深入探讨L2网络的结构细节——尽管当我们填写委员会的第二部分时会涉及到这一点——我们应该想象以太坊现在是一种信标链，一个信标，众多L2网络的指引之星。这些L2网络可以具有更具体的功能，根据一组个别功能执行其逻辑。这在某种程度上符合瑞士军刀的概念——并非让以太坊成为瑞士军刀，而是L2网络开始在架构上有所区别。它们复制了以太坊的抽象计算机的功能，但以更低的燃气成本或在其特定领域内执行。一些人已经开始考虑调整并使其L2层更高效，专注于特定的功能能力。因此，在我看来，我们正在见证旨在成为同质化的世界计算机中异质性的出现。此外，重要的是不要忘记去中心化应用（dApps）仍存在于主区块链内，在那个从2015年开始的同一区块链内。这意味着在合并过程中，在过渡到新的架构状态时，没有擦除，没有抹去先前的历史。所有去中心化应用和支撑这些应用的智能合约继续存在，今天继续存在，可能明天也会存在。这是一个我们将使用Polkadot作为例子来探讨的问题，但仍然有一种感觉，即将能够在信标链中安置���个去中心化应用——dApps。",
  "In summary, let's imagine the engineering implementation of today's Ethereum as a world computer. We have each network node consisting of two parts. The first layer is responsible for the Ethereum Virtual Machine (EVM), the actual functionality of the virtual machine or Turing complete machine, if we talk in theoretical terms. Perhaps we will see the emergence of alternatives to the virtual machine designed in 2015. These alternatives will likely surpass it in terms of more abstract programming possibilities than writing smart contracts in Solidity. Meanwhile, smart contracts in Solidity continue to feel comfortable. If you want to write functionality for the Ethereum main chain without creating any infrastructure on top of Ethereum, without offloading any calculations to make them cheaper, and so on, decentralized applications that you can write as smart contracts can still be housed in Ethereum's main blockchain. At the same time, Beacon Chain functionality has emerged, separating the consensus logic between validators from the main protocol of the computing machine. This allows for additional flexibility in how consensus should work and how it should be further modified without affecting the virtual machine itself. The example of Shanghai and Defcon 2, where a small opcode error caused a shutdown of part of the infrastructure, hints that it would be good to have such complex functionalities separated into two parts.": "总之，让我们想象今天以太坊的工程实现为一个世界计算机。我们每个网络节点由两部分组成。第一层负责以太坊虚拟机（EVM），实际上是虚拟机或图灵完备机器的功能，如果我们用理论术语来说。也许我们将看到2015年设计的虚拟机的替代品的出现。这些替代品可能会在更抽象的编程可能性方面超越它，比如在Solidity中编写智能合约。同时，Solidity中的智能合约仍然感觉舒适。如果您想为以太坊主链编写功能而不在以太坊之上创建任何基础设施，也不将任何计算外包以降低成本等，您可以将作为智能合约编写的去中心化应用仍然放在以太坊的主区块链中。同时，信标链功能已经出现，将验证者之间的共识逻辑与计算机的主协议分开。这允许在共识应该如何工作以及如何进一步修改共识时具有额外的灵活性，而不影响虚拟机本身。上海和Defcon 2的例子，一个小的操作码错误导致部分基础设施的关闭，暗示着将这样复杂的功能分为两部分是有好处的。",
  "What's interesting about the Beacon Chain? It is a more complex, comprehensive algorithm for achieving network synchronicity and finalization with the introduction of concepts such as \"epoch,\" and the presence of a ghost living within the network.": "信标链有什么有趣的地方？它是一个更复杂、更全面的算法，用于实现网络同步性和最终性，引入了“纪元”等概念，以及网络中存在的幽灵。",
  "Lastly, what is important to consider now is that Ethereum is effectively putting an end to homogeneity, to the idea of getting a hundred identical blockchains working with the same virtual machine, where smart contracts written in Solidity can reside. Instead, various projects are proposing their own architectures or the same virtual machine taken beyond the main blockchain's limits. Alternatively, they are trying to build their more specific application, which, at the level of the Beacon Chain's main chain, is a smart contract written in Solidity. This is the current representation of Ethereum, which did not become Ethereum 2.0. It remains the same Ethereum—a project that once started with proof of work + Turing complete machine, transforming into this architecture.": "最后，现在需要考虑的重要问题是，以太坊实际上正在结束同质化，结束让一百个相同的区块链与相同的虚拟机一起运行的想法，其中在Solidity中编写的智能合约可以驻留。相反，各种项目正在提出自己的架构或将相同的虚拟机带出主区块链的限制。或者，他们试图构建更具体的应用程序，这在信标链的主链级别上是用Solidity编写的智能合约。这是以太坊的当前表现，它没有成为以太坊2.0。它仍然是同样的以太坊——一个最初以工作证明+图灵完备机器开始的项目，转变为这种架构。",
  "Now, let's take a look at how Polkadot emerged and evolved over the last 5 years. Polkadot came into existence five years after Ethereum, born out of the team that developed one of the best clients for Ethereum—Parity. Many might remember their web client, which, compared to Geth and other implementations, was probably much more pleasant to work with, at least from personal experience and the experience of colleagues.": "现在，让我们看看Polkadot在过去5年中是如何出现和发展的。Polkadot诞生于以太坊之后的五年，诞生于开发出以太坊最佳客户端之一的团队——Parity。许多人可能还记得他们的Web客户端，与Geth和其他实现相比，至少从个人经验和同事的经验来看，可能更加愉快。",
  "In the end, after a couple of months of the relay chain's existence without any decentralized application functionality, without the ability to connect your parachain or L2 network, without user capabilities, the network transitioned from an authority state to proof of stake. This gave developers the ability to upload their runtimes.": "最终，在中继链存在几个月而没有任何去中心化应用功能，没有连接您的平行链或L2网络的能力，没有用户功能的情况下，网络从权威状态过渡到了权益证明。这使开发人员能够上传他们的运行时。",
  "At this point, it's also interesting to discuss the differences between today's Ethereum and how the central part of Polkadot is structured. From the perspective of the heart, which we've already discussed, the picture will be absolutely the same not only for Ethereum and Polkadot but for any project that wants to be presented as an abstract computing machine. However, from an engineering and architectural standpoint, it's fascinating to observe Beacon Chain & Relay Chain. Here, we have a virtual machine, which has been inherited since 2015, but alternatives are being proposed. In the relay chain, there's the ability to upload your runtime. The runtime is, in fact, your virtual machine. For example, some parachains completely emulate the Ethereum Virtual Machine. It's written as a runtime, meaning you can essentially upload an Ethereum Virtual Machine analog to the parachain level in Polkadot or write more specific logic that works with four or five functions. Recall part one about the ideas— you can write your Swiss Army knife, but it won't require creating the entire infrastructure. You can implement specific functionality with certain functions at the runtime level, put it into the Polkadot relay chain, and the immutability of this runtime will be ensured by Polkadot validators.": "此时，讨论今天的以太坊与Polkadot的中心部分结构之间的差异也很有趣。从我们已经讨论过的核心的角度来看，不仅对于以太坊和Polkadot，而且对于任何想要被呈现为抽象计算机的项目来说，图片将完全相同。然而，从工程和架构的角度来看，观察Beacon Chain和Relay Chain是很有趣的。在这里，我们有一个虚拟机，自2015年以来一直被继承，但也提出了替代方案。在中继链中，有上传您的运行时的能力。运行时实际上就是您的虚拟机。例如，一些平行链完全模拟以太坊虚拟机。它被写入为运行时，这意味着您可以在Polkadot的平行链级别上传一个以太坊虚拟机的模拟，或者编写更具体的逻辑，与四五个功能一起工作。回想第一部分关于想法——您可以编写您的瑞士军刀，但不需要创建整个基础设施。您可以在运行时级别使用特定功能实现特定功能，将其放入Polkadot中继链，并且Polkadot验证者将确保此运行时的不可变性。",
  "What happens next? Over the course of about a year, a layer of parachains begins to form around the relay chain. In terms of Ethereum implementation, you could say that L2 networks are quite similar to parachains. However, there's one interesting cross-network distinction that I find fascinating in Polkadot, and I'm trying to further understand how it will develop—namely, the second layer of validation and data availability checks. After a couple of years, Polkadot takes a shape like this. It's not just a relay chain where proof-of-stake validators protect the runtime of future parachains; an additional and crucial layer of data validation and availability checking emerges from parachains.": "接下来会发生什么？大约一年的时间里，一层平行链开始围绕中继链形成。就以太坊实现而言，你可以说L2网络与平行链非常相似。然而，在波卡中有一个有趣的跨网络区别让我着迷，我正在努力进一步了解它——即第二层验证和数据可用性检查。几年后，波卡变成了这样。它不仅仅是一个中继链，其中权益证明验证者保护未来平行链的运行时；还有一个额外且至关重要的数据验证和可用性检查层从平行链中出现。",
  "As you look at this diagram, try to notice the analogies that arise and the differences in engineering implementation details. So, what does this represent, and how does this scheme compare with Ethereum? We have an L2 project, in this case, with Polkadot, it's a parachain. A parachain also generates information blocks, which then go to the relay chain to be combined and release a relay chain block as the sum of all headers, headers, and more headers. The parachain collects transactions in a block using collators, which are not involved in validation. They don't stake anything in the relay chain; they only use the runtime, which is in the relay chain. They fetch it, apply it to transactions, perform necessary state transitions, form a block, and, crucially, provide proof of validity—a stamp containing cryptographic proofs that the collator correctly assembled the block. This information goes to the external validation ring of the relay chain. In this ring, there are internal validators of Polkadot—parachain collators. Again, they don't stake anything directly from the relay chain's point of view. Parachain implementations sometimes introduce their consensus among collators, and some don't. For example, in Robonomics, implementing a parachain, we find this paradigm more interesting, less burdensome, and it makes the network simpler while still remaining functionally substantial. Any collator, without reaching consensus with anyone—verified by us—can propose a block and some proof to the external layer. This is precisely why blocks are proposed, proofs of block assembly validity are offered, and there's an external ring. We don't need any consensus from parachain validators. Anyone can generate a block and send it, and if this node of the collator sends incorrect information to the parachain validators on the external ring, the validator at this level will reject it. It won't pass into the central part. But let's say the block was provided correctly by the collator. Our transactions got in; the collator calculated them, applying the runtime stored in the relay chain, executed all state transitions, gathered some proof of validity—validity of the assembled block—and passed it to the external ring of the relay chain. Here, every epoch, which is also part of the finalization, every epoch has validators from the relay chain diverging into parachains. Some of them stay in the center, and the others go to parachains. Their number ranges from 16 to 64 validators, and this figure, I believe, will change in the specification—somewhere more, somewhere less. However, parachain validators re-verify the information from one selected group of validators about everything coming from the collator being correct, that work has been done in accordance with the runtime, and that the proof of validity is indeed valid. The selected segment of relay chain validators who already have something staked respond, or rather, chirp among themselves. They respond to the chosen main block producer of the parachain, so to speak, saying,": "当你看这个图表时，试着注意出现的类比和工程实现细节上的差异。那么，这代表着什么，这个方案与以太坊相比如何？我们有一个L2项目，在这种情况下，是波卡的一个平行链。平行链也生成信息块，然后发送到中继链上进行组合，并释放一个中继链块，作为所有头部、头部和更多头部的总和。平行链使用收集器在一个块中收集交易，这些收集器不参与验证。他们在中继链上不抵押任何东西；他们只使用运行时，它在中继链上。他们获取它，应用于交易，执行必要的状态转换，形成一个块，并且，至关重要的是，提供有效性证明——包含���密证明的印章，证明收集器正确地组装了块。这些信息传递到中继链的外部验证环。在这个环中，有波卡的内部验证者——平行链收集器。同样，从中继链的角度来看，他们不直接从中继链抵押任何东西。平行链实现有时会在收集器之间引入他们的共识，有些则不会。例如，在实现平行链的Robonomics中，我们发现这种范式更有趣，更少负担，并且使网络更简单，同时仍然保持功能上的实质性。任何收集器，不需要与任何人达成共识——由我们验证——都可以提出一个块和一些证明给外部层。这正是为什么块被提出，块组装有效性的证明被提供，以及有一个外部环。我们不需要从平行链验证者那里得到任何共识。任何人都可以生成一个块并发送它，如果这个收集器节点向外部环上的平行链验证者发送不正确的信息，那么这个级别的验证者将拒绝它。它不会通过到中心部分。但是假设收集器正确提供了块。我们的交易进入了；收集器计算它们，应用存储在中继链中的运行时，执行所有状态转换，收集一些有效性证明——组装块的有效性，并将其传递给中继链的外部环。在这里，每个纪元，也是最终化的一部分，每个纪元都有���自中继链的验证者分散到平行链中。其中一些留在中心，其他的去到平行链。他们的数量从16到64个验证者不等，我相信这个数字会在规范中改变——有些地方更多，有些地方更少。然而，平行链验证者重新验证来自一个选定的验证者组的关于来自收集器的一切都是正确的信息，工作是按照运行时进行的，并且有效性证明确实有效。已经抵押了一些东西的中继链验证者的选定部分会回应，或者说，他们之间会互相交流。他们会回应给被选择的平行链主块生产者，可以这么说，说，",
  "\"Yes, we agree. There are no problems. You can carry it through the entire external ring inside.\"": "“是的，我们同意。没有问题。你可以将其通过整个外部环内部。”",
  "And thus, almost all information formed on the parachain collators, with verification on the external ring, enters the internal one. The lower part, not that it's physically at the bottom, still constitutes the external ring—data availability. Data starts to be checked at this stage, meaning that on the external ring, not only the correctness of block assembly is verified, but the process of preparing for distribution within the Polkadot network begins, ensuring that the block information will not be lost in the future. Here, precisely, is what I mentioned in the second part about chunks, like CD RW. At this stage of block preparation for transfer to the internal ring, the data availability layer is formed as a service, something that is currently also attempted by some projects in Ethereum. Some projects put additional redundant information directly into smart contracts, necessary for checking what is happening on the L2 layer and, if necessary, slashing or punishing those who did it incorrectly. It's impossible to overcome the external ring without distributing block information and without rechecking dozens of nodes with stakes laid down on the assumption that the runtime must work correctly.": "因此，几乎所有形成在平行链收集器上的信息，通过外部环的验证，进入内部环。下部分，不是物理上在底部，仍构成外部环—数据可用性。数据开始在这个阶段进行检查，这意味着在外部环上，不仅验证了区块组装的正确性，还开始了在Polkadot网络内部分发的准备过程，确保区块信息不会在未来丢失。在这里，正是我在第二部分提到的关于块的内容，就像CD RW一样。在将区块准备转移到内部环的这个阶段，数据可用性层被形成为一种服务，目前也有一些以太坊项目尝试这样做。一些项目直接将额外的冗余信息放入智能合约中，用于检查L2层上发生的情况，并在必要时对那些错误操作的人进行惩罚。在不分发区块信息并在假设运行时必须正确工作的几十个节点上重新检查的情况下，是不可能克服外部环的。",
  "Thus, information that has passed through the external ring is already quite trustworthy, probably yes, you can say that, and on the internal ring, work is mainly done not with parachain blocks, but their block headers are collected into one big header. That is, from many headers, one header of a relay chain block is assembled—a mechanism of linking in Shared Security, as mentioned in Polkadot, which ensures the security of parachains. One could say that parachains are validated and reach a state where the service exists in a distributed decentralized form on the external ring. In the internal ring, the information that has entered attempts to come together in one hyperblock, which should precisely link everything together. There are no calculations happening there; there is no recalculation of absolutely everything. The assembly of the final block takes place, so to speak, in the current iteration of the world computer, to put a point on the question of whether the transaction has passed in a particular parachain. We must assemble a hyperblock that contains not all the information from the parachains but gathers all the headers verified on the external ring of parachains into one large block. And thus, our world computer in Polkadot operates.": "因此，通过外部环的信息已经相当可信，可能是的，你可以这么说，在内部环中，主要的工作不是处理平行链区块，而是将它们的区块头收集到一个大头部中。也就是说，从许多头部中，组装成一个中继链区块的头部—在Polkadot中提到的共享安全机制，确保平行链的安全。可以说，平行链经过验证并达到了一个状态，在外部环中以分布式去中心化形式存在的服务。在内部环中，进入的信息试图汇聚在一个超级块中，这应该精确地将所有内容连接在一起。那里没有发生计算；没有对绝对所有内容进行重新计算。最终区块的组装发生在当前世界计算机的迭代中，以解决交易是否在特定平行链中通过的问题。我们必须组装一个超级块，其中包含不是所有来自平行链的信息，而是将所有在外部环中验证的平行链头部汇集到一个大区块中。因此，在Polkadot中，我们的世界计算机运行。",
  "Let's take another look at these two schemes together: relay chain, beacon chain, runtime, secured by proof of stake, where someone stakes their funds to validate that they will always perform their work correctly. There's a virtual machine where you can also stake your funds, and if you perform any computation or state transition not in accordance with the Ethereum Virtual Machine's specification, you'll be penalized.": "让我们再一起看看这两个方案：中继链、信标链、运行时，由权益证明保护，某人押注他们的资金来验证他们将始终正确执行工作。有一个虚拟机，您也可以押注您的资金，如果您执行任何与以太坊虚拟机规范不符的计算或状态转换，您将受到惩罚。",
  "In Polkadot, there's an additional external layer, which seems to be one of the main advantages, such pleasant perks of the engineering implementation that, in my opinion, should be present here. It should appear between L2 networks and the beacon chain, which exists in Ethereum. By the way, some say that the term \"beacon chain\" is dying out again and is misunderstood, but I really like to use it in analogy with the \"relay chain,\" a term from Ethereum's roadmap.": "在Polkadot中，还有一个额外的外部层，这似乎是主要优势之一，这种工程实现的愉快优势，在我看来，应该在这里出现。它应该出现在L2网络和以太坊中存在的信标链之间。顺便说一句，有人说“信标链”这个术语再次消失并且被误解了，但我真的很喜欢将其与“中继链”这个术语进行类比，这是以太坊路线图中的一个术语。",
  "And perhaps one more interesting story in this part of the lecture: so far, we can hardly imagine proper cross-chain messages between L2 networks in Ethereum. Maybe I missed something in the papers, but when you don't have an external ring and issues like collators, paravalidators, and data availability services are not resolved, thinking about how two L2 layers can communicate is challenging. Yet, in Polkadot, it exists. Even horizontally, through the relay chain, meaning directly, one can send a transaction securely from one parachain to another, without trusting any bridges between these two parachains. This is another crucial functionality that will likely need to be implemented at the level of connecting L2 networks. Smart contracts in Ethereum communicate well. We have created many chains of linked smart contracts, where one triggers another. With this, there is no problem. But when we say that almost all applications are moving to the L2 layer in a heterogeneous network, I hear that if you live in a specific area, you won't be able to get out. That's not the case at the level of parachains and implementation in Polkadot. Both architectures are worth watching, as, in my opinion, the engineering implementation follows the mainstream path of becoming a global computer. They differ slightly, but there are many similarities. There's an enormous amount of engineering work everywhere. As we see, human civilization, in the form of a multitude of researchers, engineers, and growing developers with significant resources for further development, is moving roughly in the same direction from the smallest early stage to probably some future establishment of the world's computer, all on the same tracks.": "也许在讲座的这一部分中还有一个更有趣的故事：到目前为止，我们几乎无法想象以太坊L2网络之间适当的跨链消息。也许我在论文中漏掉了什么，但是当你没有外部环，以及像收集器、部分验证器和数据可用性服务等问题没有解决时，思考两个L2层如何进行通信是具有挑战性的。然而，在Polkadot中，这是存在的。甚至横向通过中继链，意味着直接地，一个可以安全地从一个平行链发送交易到另一个，而不需要信任这两个平行链之间的任何桥梁。这是另一个关键的功能，可能需要在连接L2网络的层面实现。以太坊中的智能合约通信良好。我们已经创建了许多链接智能合约的链条，其中一个触发另一个。对此，没有问题。但是当我们说几乎所有应用程序都在异构网络的L2层移动时，我听到如果你住在特定地区，你将无法离开。在Polkadot的平行链和实现层面上，情况并非如此。这两种架构都值得关注，因为在我看来，工程实现遵循成为全球计算机的主流路径。它们略有不同，但也有许多相似之处。到处都有大量的工程工作。正如我们所看到的，人类文明以研究��员、工程师和不断增长的开发人员为形式，拥有大量资源用于进一步发展，大致朝着从最初阶段到可能未来建立世界计算机的方向前进，都在同一轨道上。",
  "Part 1: The Idea of a World Computer": "第一部分：世界计算机的概念",
  "This is the first part of a four-part lecture titled \"World Computer in Your Home.\" In the first part, titled \"The Idea of a World Computer,\" I want to analyze and share my own reflections that have, in a broader historical context, gathered around the hashtag \"world computer.\"": "这是题为“您家中的世界计算机”的四部讲座的第一部分。在第一部分中，题为“世界计算机的概念”，我想分析和分享我自己的反思，这些反思在更广泛的历史背景下围绕着“世界计算机”这个话题。",
  "To begin with, let's try to gather a generalized understanding of what a world computer is, without delving into terminology or specific technical details. If you take your mobile phone in hand and look at the icons, you can notice that practically every application on the phone has two major segments or areas of operation.": "首先，让我们试着获得对世界计算机是什么的一般理解，而不深入术语或具体技术细节。如果你拿起手机看看图标，你会发现手机上的每个应用程序几乎都有两个主要部分或操作区域。",
  "The first is the local part, meaning, for example, your calculator or notes application. This is a completely local application that requires almost no external communication. Although even applications like the notes app on an iPhone are a bit more than that, let's focus on the more austere Open Source side of applications for Android phones, so to speak.": "第一个是本地部分，比如你的计算器或笔记应用程序。这是一个完全本地的应用程序，几乎不需要外部通信。尽管即使像iPhone上的笔记应用程序也比那更多一些，让我们专注于Android手机的更朴素的开源应用程序一面。",
  "The second part requires cloud infrastructure, and here, when the question of cloud infrastructure arises, a multitude of quite complex stories begins: who owns this cloud infrastructure, what capabilities do developers have to add features to an application, and in general, how does the user own this application? What capabilities and responsibilities does the user have when dealing with an application that exists not only on their phone but also in some infrastructure beyond their pocket or palm? The world computer is precisely one example of how the developer community responds to these obvious questions. Obvious questions about creating higher-quality applications for your mobile phone, laptop, server, and any other smart device that needs to connect to the network and obtain knowledge from there.": "第二部分需要云基础设施，在这里，当云基础设施的问题出现时，许多相当复杂的故事开始了：谁拥有这个云基础设施，开发者有什么能力向应用程序添加功能，以及用户如何拥有这个应用程序？用户在处理不仅存在于手机上还存在于口袋或手掌之外的基础设施中的应用程序时有什么能力和责任？世界计算机恰好是开���者社区如何回应这些明显问题的一个例子。关于为您的手机、笔记本电脑、服务器和任何其他需要连接到网络并从中获取知识的智能设备创建更高质量应用程序的明显问题。",
  "The world computer is, accordingly, the same cloud, the same infrastructure that exists on the internet, with which developers can interact and publish their applications. As a user, you can install, download, and run them on your PC. However, with one interesting, crucial feature: no one actually owns the infrastructure or cloud of the world computer. There is no specific company, jurisdiction, or individual on Earth who can determine and say whether you can publish your application there or not, whether you have the right to access this world computer infrastructure to receive the provided service. Therefore, the world computer is a cloud in which any developer can place their application, and any user with access solely to the internet network and not to a specific IP address behind a firewall can use the application by paying for computations from their pocket.": "世界计算机因此是相同的云，相同的基础设施存在于互联网上，开发人员可以与之交互并发布他们的应用程序。作为用户，您可以在您的PC上安装，下载和运行它们。然而，有一个有趣而关键的特点：没有人实际拥有世界计算机的基础设施或云。地球上没有特定的公司，司法管辖区或个人可以确定并说您是否可以在那里发布您的应用程序，是否有权访问这个世界计算机基础设施以接收提供的服务。因此，世界计算机是一个云，任何开发人员都可以在其中放置他们的应用程序，任何用户只需访问互联网网络而不是防火墙后面的特定IP地址即可通过支付计算来使用应用程序。",
  "Here's the story in a generalized format. There is no mention of \"blockchain,\" no mention of \"smart contracts,\" but these concepts are underneath. Let's still acknowledge: a world computer is a cloud infrastructure that is sovereign, owned by no one, allowing each developer to avoid censorship from platform owners offering app downloads. It also prevents users from being in a situation where they don't understand how an app works on their phone. In my opinion, these are important and cool features deserving respect and attention from those who want to create more futuristic, cooler applications. This is precisely what my team and I have been doing for eight years, choosing perhaps the most challenging area - creating services for robotics on the world computer, which seems to be right outside your door, quietly scraping and saying, \"I want to come into your home.\"": "这是一个概括格式的故事。没有提到“区块链”，也没有提到“智能合约”，但这些概念都在其下。让我们仍然承认：世界计算机是一个主权的云基础设施，没有任何人拥有，允许每个开发人员避免平台所有者提供应用程序下载的审查。它还防止用户陷入不理解手机上应用程序如何工作的情况。在我看来，这些是重要且酷的功能，值得尊重和关注那些想要创建更具未来感和更酷的应用���序的人。这正是我和我的团队在过去八年一直在做的事情，选择了可能是最具挑战性的领域 - 在世界计算机上为机器人创建服务，这似乎就在您的门外，悄悄地刮着并说：“我想进入您的家。”",
  "Now, let's move on to a timeline and look through my personal experience at how the concept of the world computer evolved. First, let's go back to 2012. This year is notable because Bitcoin already exists as a global internet service, accessible to everyone, not owned by anyone specific. By 2012, besides Bitcoin, its so-called forks start appearing. One of the most well-known is Litecoin.": "现在，让我们继续时间线，回顾一下我在世界计算机概念演变过程中的个人经历。首先，让我们回到2012年。这一年很显著，因为比特币已经作为全球互联网服务存在，每个人都可以访问，没有任何特定所有者。到2012年，除了比特币，它的所谓分叉开始出现。其中最著名的之一是莱特币。",
  "Litecoin is notable because its developer did the most important work for the entire community. He collected the most crucial configurable variables or constants from different parts of Bitcoin's code after the protocol was launched. This allowed specifying block generation time, block reward, and, statistically, Litecoin is more frequently forked than Bitcoin. When we say \"fork of Bitcoin,\" I can confidently say that, in most cases, it will be a fork of Litecoin.": "莱特币之所以显著，是因为其开发人员为整个社区做了最重要的工作。他在协议启动后从比特币代码的不同部分收集了最关键的可配置变量或常量。这使得可以指定区块生成时间，区块奖励，并且统计上，莱特币比比特币更频繁地被分叉。当我们说“比特币的分叉”时，我可以自信地说，在大多数情况下，它将是莱特币的分叉。",
  "Namecoin is also a fork of Bitcoin, and if memory serves me right, it was initially a direct fork from Bitcoin, and then Litecoin appeared a few months later in 2011. However, Namecoin turned out to be a bit different, paving the way for many developers mentally on where ideas underlying Bitcoin's internet service could evolve. Namecoin went beyond being just a coin; it could store identity as a database and allow an internet service to place your domain name. This was the first example where an internet service spawned from Bitcoin could have a different nature, not just like Litecoin with fast transactions but the ability to pay for storing certain information with its internal currency, an internal token. For example, the name in the .bit domain zone.": "Namecoin也是比特币的一个分叉，如果我没记错的话，最初它是直接从比特币分叉出来的，然后几个月后的2011年出现了莱特币。然而，Namecoin最终证明有些不同，为许多开发人员提供了一个思考比特币互联网服务潜在发展方向的机会。Namecoin不仅仅是一种货币；它可以将身份存储为数据库，并允许互联网服务放置您的域名。这是第一个互联网服务从比特币中产生，可能具有不同性质的例子，不仅仅像莱特币那样具有快速交易，而且还具有使用内部货币、内部代币支付存储某些信息的能力。例如，在.bit域区域中的名称。",
  "Developers worldwide were experimenting with Bitcoin, mostly creating forks, making them faster, cheaper electronic cash. Alongside this, the first services appeared, seeing opportunities not only in financial applications but also in cross-industrial applications in other areas like Namecoin. Namecoin provided the first globally accessible and unowned internet service through which you could launch your website without being under the jurisdiction of a specific organization but within a distributed globally accessible network. This moment is crucial for us to move on to the early precursors of the world computer's ideas.": "全球开发人员正在尝试使用比特币，主要是创建分叉，使它们成为更快、更便宜的电子现金。与此同时，第一个服务出现了，看到的机会不仅仅在金融应用中，还在其他领域如Namecoin中的跨行业应用中。Namecoin通过提供第一个全球可访问且无主的互联网服务，使您可以在不受特定组织管辖但在分布式全球可访问网络中启动您的网站。这一时刻对我们继续前进到世界计算机的早期前体思想至关重要。",
  "The first practical ideas of the world computer emerged in 2014, two years after the appearance of the first wave of Bitcoin forks and the creation of meaningful services dedicated not only to electronic cash but also exploring broader themes. We encounter ideas that precede the launch of Ethereum.": "世界计算机的第一个实用想法出现在2014��，比特币第一波分叉出现两年后，以及专门致力于电子现金而非探索更广泛主题的有意义服务的创建之后。我们遇到了在以太坊推出之前的想法。",
  "In 2014, at several meetups worldwide, in Miami and, I believe, in Europe, Vitalik Buterin articulated sensible ideas. He suggests that we can develop not just a set of internet services that essentially function as a Swiss army knife, right? We can develop a virtual machine. Those with an education in Computer Science probably remember what an infinite tape is in Turing machines, and if we go back to the theory of computational machines, we probably recall the theoretical origins of creating our personal computers, essentially the server infrastructure we have today. It's interesting that, fifty years after the development of von Neumann architecture and the complete Turing machine theory, and with the dawn of internet technologies only by 2014, and only after experiments with Bitcoin, the first idea emerges on our planet of creating a fully virtual computational machine based on the same theory that has been tested in the computer science industry for the past 50 years. The mechanics are the same as when creating any personal computer or server in a data center, but based more on achievements in internet technologies and the achievements of the world that will later be called Web3.": "2014年，在全球几个聚会上，迈阿密和我相信在欧洲，Vitalik Buterin表达了明智的想法。他建议我们不仅可以开发一组基本上像瑞士军刀一样运作的互联网服务，对吧？我们可以开发一个虚拟机。那些受过计算机科学教育的人可能还记得图灵机中的无限带是什么，如果我们回顾计算机理论，我们可能还记得创造我们的个人计算机的理论起源，本质上是我们今天拥有的服务器基础设施。有趣的是，在冯·诺伊曼体系结构的发展和完整的图灵机理论之后的五十年，以及直到2014年互联网技术的曙光，以及仅在通过比特币的实验之后，地球上第一个想法出现了，即基于过去50年在计算机科学行业中测试过的相同理论，创建一个完全虚拟的计算机机器。创建任何个人计算机或数据中心服务器时的机制是相同的，但更多地基于互联网技术的成就和后来被称为Web3的世界的成就。",
  "Ethereum itself is not a Swiss army knife, not a set of specific internet services. It is, in the direct sense, a cloud, a computational machine. What lies at its core, I will tell you in the next lecture. Here, the most important thing for us is to focus on where the idea of Ethereum began. It started with the realization that, in two years, dozens of different internet services were invented that were interesting because they were globally accessible, available without censorship for developers to deploy. Users could use them only with an internal currency. However, what was not liked in all these concepts was that almost every interesting service required its own massive distributed infrastructure. Unlike familiar internet services, you couldn't just launch your globally accessible infrastructure if you were a very small person or a small team because such a network would be vulnerable, and the service itself would become unsafe. To overcome the problems that were side effects or negative externalities of creating your own globally accessible sovereign internet service, the concept of Ethereum emerged. Ethereum, as a full-fledged cloud capable of handling any formalized computation, allows you to write your program code, a complete program essentially, and run it in the same blockchain alongside hundreds of other applications. This possibility, sounding from the small stages of 2014, naturally captivated the minds of many and seemed absolutely logical for someone with a basic education in Computer Science. If you could understand what Turing completeness was by 2014, if you could envision the historical theory of creating a personal computer, you would definitely not overlook the Ethereum whitepaper and would say that this is exactly what the entire developer community needs.": "以太坊本身并不是一把瑞士军刀，也不是一套特定的互联网服务。从直接意义上说，它是一个云，一个计算机。它的核心是什么，我将在下一堂讲座中告诉你。在这里，对我们来说最重要的是要关注以太坊的理念起源。它始于这样一个认识：在两年内，已经发明了数十种不同的互联网服务，这些服务之所以有趣，是因为它们是全球可访问的，开发者可以无需审查即可部署。用户只能使用内部货币来使用它们。然而，在所有这些概念中不受欢迎的是，几乎每一个有趣的服务都需要自己的大规模分布式基础设施。与熟悉的互联网服务不同，如果你是一个非常小的个人或一个小团队，你不能只是启动你的全球可访问基础设施，因为这样的网络会很脆弱，服务本身会变得不安全。为了克服创建自己的全球可访问主权互联网服务时产生的问题，以太坊的概念应运而生。以太坊作为一个能够处理任何形式化计算的完整云，允许你编写你的程序代码，实质上是一个完整的程序，并在同一区块链上与其他数百个应用程序一起运行。这种可能性，从2014年的小阶段开始，自然地吸引了许多人的注意，并对具有计算机科学基础教育的人来说似乎绝对合乎逻辑。如果你在2014年能理解图灵完备性，如果你能设想创造个人计算机的历史理论，你肯定不会忽视以太坊的白皮书，并会说这正是整个开发者社区所需要的。",
  "I believe the year 2014 and Ethereum mark the first, though not explicitly named, instances of the concept of a global computer. It started with the idea that we don't need a Swiss knife; instead, we need infrastructure or a universal cloud that addresses global-level security challenges. Developers, at a low cost, should be able to deploy their applications there without concerning themselves with issues like securing the network or creating a network of providers for this computer or your specific internet service.": "我相信2014年和以太坊标志着全球计算机概念的首次出现，尽管没有明确命名。它始于这样一个想法：我们不需要一把瑞士军刀；相反，我们需要基础设施或一个能够解决全球级安全挑战的通用云。开发者应该能够以较低的成本在那里部署他们的应用程序，而不必担心网络安全或为这台计算机或您的特定互联网服务创建提供者网络等问题。",
  "In 2015, Ethereum was effectively launched. From that moment onwards, even until 2020, I haven't encountered significant counterarguments against the idea of creating not just specific internet services but embracing and developing the concept of a virtual computer, virtual server, cloud, or a global computer, as I prefer to call it.": "2015年，以太坊正式推出。从那时起，一直到2020年，我还没有遇到对创建不仅仅是特定互联网服务，而是拥抱和发展虚拟计算机、虚拟服务器、云或全球计算机概念的重要反对意见。",
  "Various variations emerge, perhaps some remember the then-popular EOS suggesting a slightly different consumption paradigm. Despite my personal aversion to that project, with its 21st validator and all, it seemed sufficient for many. But it introduced the idea that owning tokens grants you a portion of bandwidth, which, in the realm of Robonomics architecture, remains interesting to me to this day.": "各种变体出现，也许有些人还记得当时流行的EOS提出了一个略有不同的消费范式。尽管我个人对该项目有所厌恶，带有21个验证器等，但对许多人来说似乎已经足够。但它引入了拥有代币可以获得一部分带宽的概念，在Robonomics架构领域，这个概念至今仍然让我感兴趣。",
  "Simultaneously, other ideas on how to modernize the Ethereum network arise. Projects like Definity, Solana, and others come into play. Around the same time, Gavin Wood introduces Polkadot, who assisted Vitalik in creating Ethereum. From a multitude of technological projects between 2015 and 2020, we move from a race to create individual internet service variants to witnessing, on a communication protocol level, the emergence of something like Ethereum killers. Many projects started under this slogan, taking the idea of a unified cloud for multiple internet services and modifying some aspects. For instance, EOS proposed an alternative utilization scheme, where only token-backed ownership allowed access to bandwidth. There were projects where the programming language for writing code was more interesting. For example, during a hackathon for BMW, when we won with an implementation on Ethereum, the automaker immediately stated that we wouldn't go any further unless we had formally verified contracts, which was impossible to achieve on Ethereum at that time.": "同时，关于如何现代化以太坊网络的其他想法也出现了。类似Definity、Solana等项目开始崭露头角。与此同时，Gavin Wood推出了Polkadot，他曾协助Vitalik创建以太坊。从2015年到2020年间的众多技术项目中，我们从竞相创建个别互联网服务变种转变为在通信协议层面上见证了类似以太坊杀手的出现。许多项目都以这个口号开始，将统一云端多个互联网服务的理念进行了修改。例如，EOS提出了一种替代利用方案，只有基于代币的所有权才能访问带宽。还有一些项目在编写代码的编程语言方面更有趣。例如，在为宝马举办的黑客马拉松比赛中，当我们用以太坊实现了一个项目时，这家汽车制造商立即表示，除非我们有正式验证的合同，否则我们不会继续前进，而在当时在以太坊上是不可能实现的。",
  "At this moment, as you read about the ideas of Eternity and other networks, you may think, \"I should try working with them too.\" Service developers understood this, as did, as I mentioned, projects like Definity, which recently launched the World Computer and is gaining traction. Simultaneously, the idea of Polkadot emerges as a heterogeneous multi-chain framework. Ethereum, around the mid-2010s, also received a roadmap for scalability and development. By 2024, almost all concepts converge on the idea of having not just one database or blockchain but a multitude. Various transaction processing methods, two-layer consensus algorithms, optimistic majority approaches, and a plethora of technical implementation variations emerge, all aiming at the same global computer concept.": "此刻，当您阅读有关Eternity和其他网络的想法时，您可能会想：“我也应该尝试与它们合作。” 服务开发人员明白了这一点，正如我提到的，像Definity这样的项目也明白了这一点，它最近推出了World Computer并获得了关注。与此同时，Polkadot的概念作为异构多链框架出现。���太坊在2010年代中期也制定了可扩展性和发展路线图。到2024年，几乎所有概念都聚焦于不仅拥有一个数据库或区块链，而是多个。各种交易处理方法、两层共识算法、乐观多数方法以及大量技术实现变体出现，都旨在实现相同的全球计算机概念。",
  "Let's now go through a timeline snapshot:": "让我们现在来看一下时间线快照:",
  "**2009-2012**: Emergence of the first globally accessible internet service for electronic cash - Bitcoin.": "**2009-2012**：第一个全球可访问的电子现金互联网服务出现 - 比特币。",
  "**Early 2012**: The first fork war occurs, with projects emerging to replicate similar services. Some multi-billion projects create their forks. Simultaneously, projects like Namecoin propose interesting ideas.": "**2012年初**：第一次分叉战争发生，出现了复制类似服务的项目。一些数十亿美元的项目创建了它们的分叉。同时，像Namecoin这样的项目提出了有趣的想法。",
  "**2014**: The concept of a world computer emerges, requiring a deep understanding of computer science theory and immersion in Bitcoin's development.": "**2014年**：世界计算机的概念出现，需要对计算机科学理论有深入了解并沉浸在比特币的发展中。",
  "**2015-2020**: The concept moves from theory to practice. Modifications and variations of Ethereum arise, introducing different ideas with varying degrees of quality. The term \"World Computer\" became established.": "**2015-2020**：概念从理论转向实践。以太坊的修改和变体出现，引入了不同质量程度的不同想法。\"World Computer\"这个术语已经确立。",
  "**2024**: We reach the World Computer, a term now well-established, marking the transition from a simple calculator on your phone to a globally accessible institution. The idea of the World Computer encompasses future money, programming money, storage for identification records, and important documents.": "**2024年**：我们达到了World Computer，这个术语现在已经确立，标志着从手机上的简单计算器到一个全球可访问的机构的转变。World Computer的概念包括未来货币、编程货币、存储身份记录和重要文件。",
  "In conclusion, from a simple calculator to a globally accessible institution, the idea of the World Computer has evolved. It's seen as a place for the future of money and the storage of vital records. The concept of a World Computer has progressed from theoretical discussions to practical engineering implementations. In the next lecture, the discussion will delve into what a World Computer actually represents. It is fundamentally a state transition function, a concept to be explored further in the upcoming lecture, emphasizing its importance and the need to safeguard it.": "总之，从简单计算器到全球可访问的机构，World Computer的概念已经发展��它被视为未来货币和重要记录存储的地方。World Computer的概念已经从理论讨论发展到实际工程实现。在下一堂课中，讨论将深入探讨World Computer实际代表的内容。这基本上是一个状态转换函数，这个概念将在即将到来的讲座中进一步探讨，强调其重要性和保护的必要性。",
  "Part 2: The Heart of the World Computer": "第二部分：世界计算机的核心",
  "What lies at the core of projects like Ethereum or Polkadot, or any other web3 project claiming the title of the world computer, and why does the comparison with the heart in the human body fit so well into the abstract architecture of the world computer?": "以太坊或波卡点等项目的核心是什么，或者任何其他声称是世界计算机的web3项目，为什么将人体心脏与世界计算机的抽象架构进行比较如此贴切？",
  "Let's try to understand these questions in this part of the lecture, and to begin with, we'll have to break the chains of Bitcoin maximalists a bit. Most likely, you've already read one or several popular science articles dedicated to Bitcoin in your life, and the main thing that is practically noted everywhere is the three main advantages of Bitcoin as electronic cash:": "让我们在讲座的这一部分中尝试理解这些问题，首先，我们将不得不稍微打破比特币极端主义者的束缚。很可能，您已经在生活中阅读过一篇或几篇专门讨论比特币的流行科学文章，几乎到处都会提到的主要内容是比特币作为电子现金的三个主要优势：",
  "Censorship resistance": "抗审查性",
  "Immutability of data stored in the Bitcoin blockchain": "比特币区块链中存储的数据的不可变性",
  "Transparency of transactions": "交易的透明性",
  "Let's quickly go through each of these properties, and most importantly, at the end, we'll need to step back a bit from them, as the world computer inherits them as some kind of successor to Bitcoin.": "让我们快速浏览一下这些属性，最重要的是，在最后，我们需要稍微远离它们，因为世界计算机将它们作为比特币的某种继承者。",
  "**Firstly**, immutability of data. Of course, this property, from the perspective of electronic cash, has significant advantages and importance. After you send a transaction or receive bitcoins, after one or two blocks, you gradually begin to feel the immutability of data in the blockchain. In the first 15 minutes, you can observe, using a blockchain explorer, how the transaction should settle. You already see it in the network, but it is not finalized, meaning these bitcoins are not yet in your account. However, after several blocks, there is confidence that these funds will not disappear from your account. As time passes, the probability of values being somehow overwritten from your account becomes almost negligible, practically reducing to zero. This is our property of data immutability. How cool it is when you can share information with the recipient, send them a link to the blockchain explorer, and you don't need to obtain any paper or document from the bank stating that you sent a payment on a certain date and time - this is the second advantage of Bitcoin that is very helpful in practice and is probably the most pleasant perk when comparing a bank transfer and a Bitcoin transfer.": "**首先**，数据的不可变性。当然，从电子现金的角度来看，这种属性具有重要的优势和重要性。在您发送交易或接收比特币后，经过一两个区块，您逐渐开始感受到区块链中数据的不可变性。在最初的15分钟内，您可以使用区块链浏览器观察交易的结算情况。您已经在网络中看到了它，但它尚未最终确定，这意味着这些���特币尚未到达您的账户。然而，经过几个区块后，可以确信这些资金不会从您的账户中消失。随着时间的推移，从您的账户中的值被某种方式覆盖的可能性几乎变得微不足道，实际上几乎降至零。这就是我们的数据不可变性属性。当您可以与接收者共享信息，向他们发送区块链浏览器的链接时，您无需从银行获取任何文件或文件，证明您在某个日期和时间发送了付款 - 这是比特币的第二个优势，在实践中非常有帮助，而且在比较银行转账和比特币转账时可能是最令人愉快的好处。",
  "**Secondly**, transparency of transactions. There is practically no fear when using Bitcoin that you will find yourself in a region of the world or connected to an internet provider through which you cannot perform operations with the Bitcoin network. There are practically no options other than locking you in a dark room without internet access so that you cannot use the Bitcoin network.": "**其次**，交易的透明性。在使用比特币时，几乎没有恐惧，即您会发现自己处于世界某个地区或通过某个互联网提供商连接到无法执行与比特币网络的操作的地方。除了将您锁在没有互联网访问权限的黑暗房间中以防止您使用比特币网络之外，几乎没有其他选择。",
  "These three properties are, of course, very important. Now, in order to understand the question \"What is at the heart of the world computer,\" we will need to step back from them, abstract ourselves, and make a small leap of faith, a jump, approximately, 100 years back to the 1930s.": "这三个属性当然非常重要。现在，为了理解“世界计算机的核心是什么”这个问题，我们需要从它们中退后一步，抽象自己，并做一个小小的信仰飞跃，大约回到1930年代。",
  "In 1936, Alan Turing made a proposal to the scientific community to solve the formalization problem and, in fact, a more qualitative description of such a concept as an algorithm. Interestingly, from Alan Turing's proposal, the architecture and development of all computer science in the future emerged, but he in no way pursued the idea of creating a personal computer, and he knew nothing about data centers or clouds. His task was to provide a way to define an algorithm in the context of the tasks faced by mathematicians. It's a fascinating picture over the span of a century that the achievement of computer science turns out to be a by-product of a rather mundane problem among mathematicians.": "1936年，艾伦·图灵向科学界提出了解决形式化问题的建议，实际上，更质量化地描述了算法这样一个概念。有趣的是，从艾伦·图灵的提议中，未来所有计算机科学的架构和发展都出现了，但他绝不追求创建个人计算机的想法，也不知道数据中心或云的存在。他的任务是提供一种定义算法的方式，以解决数学家面临的任务。在一个世纪的时间跨度内，计算机科学的成就竟然是数学家之间一个相当平凡问题的副产品，这是一个令人着迷的画面。",
  "Let's delve into what Alan Turing proposed, without delving too deeply into algorithm theory and the purpose for which he suggested it. Alan Turing proposed the Turing machine, which represents an infinite tape (we can call it memory cells to make it easier), traversed by a reading and writing head. This head, positioned over a certain cell, can read data, apply some simple operations to them, and write new values.": "让我们深入了解艾伦·图灵提出的内容，不要深入研究算法理论以及他建议的目的。艾伦·图灵提出了图灵机，它代表一个无限的磁带（我们可以称之为内存单元，以便更容易理解），由一个读写头遍历。这个头，位于某个单元上，可以读取数据，对其应用一些简单的操作，并写入新值。",
  "Today, when you hear phrases like this, it might seem to you: \"Well, yes, it's a hard drive, a computer, or something like that.\" That's absolutely correct. This description gave rise to the first computer architecture. However, the main task of the Turing machine was to provide a means of representing a system or entity capable of performing any formalized computations. One can imagine a box or room, even filled with lamps, into which you insert your punch card, card, or transmit a Bluetooth signal, and the machine starts working, performing simple operations that ultimately solve your problem. Thus, the Turing machine is a universal computational mechanism that primarily solves the universal and essential task of providing a mechanism through which any simple computation or, more accurately, any formalized computation can be performed—computations that can be decomposed into the language of mathematics": "今天，当你听到这样的短语时，你可能会觉得：“嗯，是的，这是一个硬盘，一台计算机，或者类似的东西。” 这完全正确。这个描述引发了第一台计算机的架构。然而，图灵机的主要任务是提供一种表示系统或实体的手段，能够执行任何形式化的计算。人们可以想象一个盒子或房间，甚至装满了灯，你可以将你的打孔卡、卡片插入其中，或者传输蓝牙信号，机器就开始工作，执行简单的操作，最终解决你的问题。因此，图灵机是一个通用的计算机制，主要解决提供一种机制的基本任务，通过这种机制，任何简单的计算或更准确地说，任何形式化的计算都可以执行——这些计算可以分解成数学语言。",
  "In essence, the task of the last 100 years, after finding some solution in the field of mathematics, was precisely to give it a physical form, to find the set of transistors that could be placed on a board, learn how to solder them all, reduce the processes of the computing processor, and so on. No wonder that the theory from 1936 finds application in 2014 for the ideas of the world computer. These 100 years were occupied, in general, in another area—the field of physically implementing this computer.": "在本质上，过去100年的任务，在数学领域找到一些解决方案后，确切地是给它赋予物理形式，找到可以放置在电路板上的晶体管组合，学会如何焊接它们，简化计算处理器的过程等等。难怪1936年的理论在2014年为世界计算机的理念找到了应用。总的来说，这100年主要是在另一个领域——物理实现这台计算机的领域中度过的。",
  "When the planet became saturated, and we had personal computers, computational machines even inside smart devices, and when data centers started growing on the planet, the question shifted from the hardware solution to how the computational machine might look not at the physical or mathematically abstract level but at some non-physical, perhaps metaphysical, level relative to the entire planet. However, the foundation remains the same: the state transition function and nothing else.": "当地球变得饱和，我们拥有个人电脑、甚至智能设备内部的计算机，以及数据中心开始在地球上增长时，问题从硬件解决方案转变为计算机如何在整个地球的非物理、也许是形而上的层面上看待。然而，基础仍然是相同的：状态转移函数，没有别的。",
  "As an addition to what has been said, so that we don't only dwell on the theory of 1936 and don't just break the shackles of Bitcoin maximalists, open the Ethereum white paper. There you will find the crucial phrase \"Turing complete machine\"—this is the main definition of Ethereum. A Turing complete machine means that Ethereum can handle any simple operations described in a formal language, operations that are possible. This is not some set of operations that Ethereum can provide as a calculator or a sophisticated calculator for scientists. Instead, it is an abstraction inside which it is possible to load any possible variations, manipulations with variables, constants, additions, calculations with any states, and so on. You won't find anything different from what Turing proposed in the 1930s in the Ethereum concept. You will find an engineering implementation of how to do it. If we move on and open the Polkadot wiki, it's a bit more challenging to find. For this, you should use the search, enter \"State transition,\" and in the search results, find several mentions that Polkadot guarantees nothing else but the state transition. Neither the storage of data in the Polkadot blockchain nor any additional services—only the purest change of state caused by incoming transactions and processed by Polkadot validators. Now, let's try to delve more into this.": "作为对已经说过的内容的补充，为了不仅仅停留在1936年的理论上，也不仅仅打破比特币极端主义者的枷锁，打开以太坊白皮书。在那里你会找到关键的短语“图灵完备机器”——这是以太坊的主要定义。图灵完备机器意味着以太坊可以处理任何用形式语言描述的简单操作，这些操作是可能的。这不是以太坊可以提供作为计算器或科学家的复杂计算器的一些操作。相反，它是一个抽象的内部，可以加载任何可能的变体、变量、常量、加法、任何状态的计算等等。在以太坊概念中，你不会找到任何与图灵在1930年代提出的不同的东西。你会找到如何实现它的工程实现。如果我们继续并打开Polkadot维基，要找到一些更具挑战性。为此，你应该使用搜索，输入“状态转移”，在搜索结果中找到几处提到Polkadot只保证状态转移，而不是在Polkadot区块链中存储数据或提供任何额外服务——只有由传入交易引起的状态纯粹的变化，并由Polkadot验证者处理。现在，让我们尝试更深入地探讨这个问题。",
  "Now, let's add a bit to this linear diagram to move from the theory of the 1930s to today's realities, where we describe the abstract picture of the world computer. To do this, let's consider an example with Alice and Bob. Alice, being in the office, wants to start Bob's home vacuum robot for cleaning. If we look at today's concepts of how the link between Alice's mobile application and the robot vacuum at home is implemented, you will see roughly the following picture: Alice's mobile application generates a transaction in some cloud where calculations take place, and the output of these calculations is the output values that effectively turn into a command to start the vacuum robot. It would be useful for us, from the field of robotics and Robonomics as concepts in the world of web3, to understand that in the cloud, there is a digital twin of this robot, and its state is changed. We can, in general, not go that far and stop at the fact that Alice sends a transaction to the cloud, and the cloud, having performed all the necessary calculations and manipulations, generates a command to start Bob's vacuum robot.": "现在，让我们在这个线性图表中添加一点内容，从上世纪三十年代的理论过渡到今天的现实，描述世界计算机的抽象图像。为此，让我们以爱丽丝和鲍勃为例。爱丽丝在办公室里，想要启动鲍勃家里的吸尘机器人进行清洁。如果我们看看今天关于爱丽丝的手机应用和家里吸尘机器人之间的连接是如何实现的概念，你会看到大致如下的情况：爱丽丝的手机应用在某个云端生成一个交易，计算发生在那里，这些计算的输出是有效转化为启动吸尘机器人的命令的输出值。对于我们来说，从机器人技术和Robonomics作为web3世界中的概念来理解，在云端有这个机器人的数字孪生体，它的状态被改变。我们可以总体上不那么深入，停留在爱丽丝向云端发送交易的事实上，云端完成所有必要的计算和操作后，生成一个启动鲍勃吸尘机器人的命令。",
  "In this scheme today, there are several main questions: if you were interacting with a physical computer in front of you or were in a room with the vacuum robot, you would approach, press a physical button, and set it in motion. What changes when instead of arrows, there is not a manual drive but a communication layer, the internet? A multitude of questions arises about how we can safely connect Alice and this cloud, how we can be sure that Alice has access to this cloud. The question of the communication network arises—how we can protect Alice from someone else addressing her vacuum robot, requesting, for example, to make a video of her entire apartment instead of cleaning, and a similar aspect arises: why would the vacuum robot listen to this cloud with such honor and integrity? Why would the robot fully trust this cloud?": "在今天的这个方案中，有几个主要问题：如果你正在与你面前的物理计算机互动，或者在一个有吸尘机器人的房间里，你会走近，按下一个物理按钮，让它运转。当箭头不是手动驱动而是一个通信层，互联网时，会发生什么��化？关于我们如何安全地连接爱丽丝和这个云端，如何确保爱丽丝可以访问这个云端，会产生许多问题。通信网络的问题出现了——我们如何保护爱丽丝免受其他人访问她的吸尘机器人，例如请求拍摄她整个公寓的视频，类似的问题也出现了：为什么吸尘机器人会听从这个云端并表现出如此的尊严和诚信？为什么机器人会完全信任这个云端？",
  "Today's approach with the architecture of cloud solutions that connect your mobile phone, or rather, the application on your mobile phone, and some technology on the other side, smart devices, is based on the significant achievements in building physical computers. Computers in data centers today are something extraordinary—the level of technical processes is simply amazing. However, from the perspective of communication technologies, when you already have some experience working with internet applications, it seems that somewhere there, at the level of a technical school or college, or maybe not right next to how developers, architects of Intel processors are solving their tasks now. Almost all questions about connecting Alice to Bob boil down solely to outputting a specific access certificate on a specific IP address from both sides, linking them together, and the cloud will own and do anything. The most important thing in this scheme is to do anything, meaning to perform state transitions or operations that occur without any guarantees that for Alice, for Bob, these will be executed according to the same logic. No one can say anything about how the cloud is arranged. It is a black box where computations are not formalized, and neither Alice nor Bob knows how the computation is performed.": "今天的云解决方案架构与您的手机连接，或者更确切地说，您手机上的应用程序与另一侧的一些技术，智能设备连接，基于在构建物理计算机方面取得的重大成就。今天数据中心中的计算机是非常了不起的——技术过程的水平非常惊人。然而，从通信技术的角度来看，当您已经有了一些与互联网应用程序一起工作的经验时，似乎在那里，在技术学校或大学的水平上，或者可能不是在开发人员、英特尔处理器架构师现在解决他们的任务的旁边。关于如何连接爱丽丝和鲍勃的几乎所有问题都归结为从双方输出特定访问证书到特定IP地址，将它们连接在一起，云端将拥有并执行任何操作。在这个方案中最重要的是执行任何操作，意味着执行状态转换或操作，这些操作发生时没有任何保证��对于爱丽丝、鲍勃来说，这些将按照相同的逻辑执行。没有人能说出云端是如何安排的。它是一个计算没有形式化的黑匣子，爱丽丝和鲍勃都不知道计算是如何执行的。",
  "The place where you must fully trust—relying on the reputation of the company that owns these data centers, and you must completely trust the network access providers who issue a certificate and verify the security of your connection. In fact, if we talk about the boom of internet applications, this is a huge problem. The problem is that there are actually some citadels located in specific jurisdictions that operate on a relatively simple technology stack to connect you as easily as possible to the cloud, which represents a black box. Dissatisfaction with this approach actually arouses interest in the world computer because it will arrange things a bit differently. And how? Let's try to supplement the scheme we drew with blue color right now.": "您必须完全信任的地方—依靠拥有这些数据中心的公司的声誉，并且您必须完全信任网络接入提供者，他们发放证书并验证您连接的安全性。实际上，如果我们谈论互联网应用程序的繁荣，这是一个巨大的问题。问题在于实际上有一些位于特定司法管辖区的城堡，它们运行在一个相对简单的技术堆栈上，以尽可能轻松地将您连接到代表黑匣子的云端。对这种方法的不满实际上引起了对世界计算机的兴趣，因为它将以稍微不同的方式安排事物。那么，如何？让我们尝试用蓝色来补充我们现在绘制的方案。",
  "So, to supplement our linear graph, our linear diagram from both sides, let's take a look at the discoveries that have significance in computer science and that are directly or indirectly related to achievements from the world of web3.": "因此，为了补充我们的线性图表，我们的线性图表从两侧看，让我们看看在计算机科学领域具有重要意义的发现，这些发现与web3世界的成就直接或间接相关。",
  "Let's start with Leslie Lamport in 1976. Those who attended my presentations, lectures from 2015-2020, probably remember how often I liked to mention that before the invention of Bitcoin, problems related to creating a decentralized network were well described by Leslie Lamport in 1976 in the Byzantine Generals problem. The solution to the Byzantine Generals problem is at the core of Tendermint PBFT algorithms and all synchronous algorithms used from Telegram Open Network to Tendermint, to Cosmos, and other blockchain projects that, accordingly, followed the path of Byzantine Generals.": "让我们从1976年的莱斯利·兰波特开始。那些参加过我2015年至2020年演讲、讲座的人可能还记得我多么喜欢提到在比特币发明之前，与创建分散网络相关的问题是如何被莱斯利·兰波特在1976年的拜占庭将军问题中很好地描述的。拜占庭将军问题的解决方案是Tendermint PBFT算法的核心，以及从Telegram Open Network到Tendermint，再到Cosmos等区块链项目中使用的所有同步算法，相应地遵循了拜占庭将军的道路。",
  "The second interesting achievement in internet technologies is torrent trackers. We don't have any specific, already erased, cloud or a black box that stores files. Still, users worldwide, by exchanging torrent files, can download exactly the file they were looking for, and this works without data substitution. No one uploads any viruses to you by replacing the file. There might sometimes be a virus embedded in the file, but the idea of receiving a link to download and actually downloading something other than what you were offered to download using torrent technology is impossible. Similar processes exist in the IPFS network, a hash-oriented storage - a way of connecting various participants with trust in the information you convey without using a black box, precisely.": "互联网技术中第二个有趣的成就是种子追踪器。我们没有任何特定的、已经被删除的云端或存储文件的黑匣子。然而，全球用户通过交换种子文件，可以精确地下载他们正在寻找的文件，而且这一切都不会发生数据替换。没有人通过替换文件向您上传任何病毒。文件中有时可能会嵌入病毒，但通过使用种子技术接收下载链接并实际下载与您所要求下载的内容不同的东西的想法是不可能的。IPFS网络中存在类似的过程，这是一种基于哈希的存储方式 - 一种连接各参与者并信任您传达的信息的方式，而不使用黑匣子，确切地说。",
  "And of course, Bitcoin. Bitcoin, as a more collective example, I'm sure Satoshi Nakamoto was well aware of Leslie Lamport's solution to the Byzantine Generals problem and, of course, observed how the idea of torrent trackers was developing. If we don't emphasize the properties that the Bitcoin blockchain obtained, such as immutability, transparency of transactions, and, to some extent, censorship resistance, then Bitcoin is an internet service that performs state transition, some changes in state based on transactions without a central node. It is an example of a collective construction of a global network in which there is a constantly functioning state transition function that we can trust, and to ensure trust, neither jurisdictions nor specific IP addresses nor the most primitive technologies used and still used today in building cloud services are used. The collective image of Bitcoin allowed overlaying the general concept from the 1930s of a Turing-complete machine on the existence of a universal abstract function for everything.": "当然，还有比特币。比特币作为一个更具有集体性的例子，我相信中本聪对拜占庭将军问题的解决方案以及种子追踪器的发展思路都有很好的了解。如果我们不强调比特币区块链获得的属性，比如不可变性、交易透明性，以及在某种程度上的抗审查性，那么比特币就是一个执行状态转换的互联网服务，基于交易进行状态的一些改变，没有中心节点。这是一个全球网络的集体建设示例，在这个网络中有一个不断运行的状态转换功能，���们可以信任，并且为了确保信任，不使用特定的司法管辖区、特定的IP地址，也不使用在构建云服务中今天仍在使用的最原始的技术。比特币的集体形象允许将上世纪30年代的图灵完备机概念叠加在一个普遍的抽象功能的存在上。",
  "So, what do we need to add to this scheme to envision a global computer? From the bottom, we provide consensus validators or, in general, validators. It can be said that the \"Data availability layer\" is probably a phrase many have heard around Ethereum this year, and it has become an advantage of Bitcoin as well. However, in the organization scheme of the global computer, this is one piece of the puzzle and, as I mentioned, it complements the main function that lies at the heart of the global computer—the function of universal state transition. Going back to the very beginning, the analogy of the heart in the human body is interesting here. It's not a thinking thing, indeed. Yes, it doesn't generate, you could say, the brain is much more important. Still, life is impossible without the heart. It simply pumps blood. Similarly, at the core of the global computer, all transactions are pumped through the state transition function, resulting in outputs. But to organize this in a distributed internet network without the need to trust some citadel, we need to supplement the picture with two components.": "那么，我们需要向这个方案添加什么来构想一个全球计算机？从底层开始，我们提供共识验证者或者说验证者。可以说\"数据可用性层\"可能是今年在以太坊周围许多人听说过的一个短语，它也成为比特币的一个优势。然而，在全球计算机的组织方案中，这只是一个拼图的一部分，正如我提到的，它补充了全球计算机核心的主要功能——通用状态转换功能。回到最初，人体中心的类比在这里很有趣。它不是一个思考的东西，确实。是的，它不会产生，你可以说，大脑更重要。但是，没有心脏生命是不可能的。它只是泵血。同样，在全球计算机的核心，所有交易都通过状态转换功能泵送，产生输出。但是为了在分布式互联网网络中组织这一切，而不需要信任某个堡垒，我们需要用两个组件来补充这个图景。",
  "The first component is a set of computers or nodes that are ready to execute the state transition. When you send transactions, they don't just go here; they go to the validators. Validators perform computations, recalling what I've already mentioned in this ongoing conversation. They take your transaction, retrieve information from the blockchain about how to process that transaction, apply that processing, and then coordinate with other validators the fact that they correctly executed the state transition. The core of the global computer, in terms of protection against situations where Bob, the vacuum cleaner robot, receives a correct command from Alice in the office, is not based on trust but on cross-verification by a multitude of network participants based on available information from the blockchain. Not only from the blockchain, by the way. It's complex, and we won't delve into it right now, but essentially, a multitude of validators take turns watching and have incentives, some internal incentives within the protocol, to prevent the universal and capable-of-calculating-anything machine from executing this operation incorrectly. A validator effectively processes transactions that come into the global computer, and other validators help prevent situations where one of the validators performed an incorrect calculation. The better the consensus algorithms of the validators, the better protection we have for the state transition function or, in other words, the heart of our global computer.": "第一个组件是一组准备执行状态转换的计算机或节点。当您发送交易时，它们不仅仅是发送到这里；它们发送到验证者。验证者执行计算，回顾我在这次对话中已经提到的内容。他们接收您的交易，从区块链中检索有关如何处理该交易的信息，应用该处理，并与其他验证者协调，以确保他们正确执行了状态转换。全球计算机的核心，从防止鲍勃，即办公室中的吸尘器机器人，接收到艾丽丝正确命令的情况来看，不是基于信任，而是基于来自区块链的可用信息的众多网络参与者的交叉验证。顺便说一句，不仅仅是来自区块链。这很复杂，我们现在不会深入讨论，但基本上，众多验证者轮流观察并有激励，一些协议内部的激励，以防止这台能够执行此操作的通用和能够计算任何东西的机器执行错误。验证者有效地处理进入全球计算机的交易，其他验证者帮助防止其中一个验证者执行错误计算的情况。验证者的共识算法越好，我们对状态转换功能或者说我们全球计算机的核心的保护就越好。",
  "The second part of this scheme is the data availability service—what we've always called the database in Bitcoin or Ethereum. In fact, we'll have to abandon that concept because there's a fundamental change in the architecture of all projects, and for those specifically targeting the global computer, this change is most crucial. For a simple present-day example: there are various implementations of Layer 2 networks on top of Ethereum—such as Arbitrum, Optimism, and others. If you start looking into their main differences and how they operate, you'll find that, in some cases, an L2 network in Ethereum sends a larger amount of data, solely from the first-layer blockchain, i.e., from the Ethereum blockchain. All the necessary puzzle pieces to confirm that the computation on the L2 layer was correct can be found in the first-layer Ethereum blockchain. On the other hand, other approaches suggest that beyond the first layer of Ethereum, something else is stored that needs to be found to prove the correctness of transactions. So, right now, before our eyes, there is again a question of improvement, but specifically of such an architecture where transactions go on the left, in the middle, we have the heart in the form of the state transition function, validators, and their consensus allows for the correct execution of this state transition. But there is also a question of data availability, which is necessary to ensure both cross-verification and, essentially, the existence of the service itself. Some approaches and patterns for creating L2 on top of Ethereum today ask the question: \"What if a certain L2 layer loses the data it doesn't store within the main Ethereum blockchain?\"": "这个方案的第二部分是数据可用性服务——我们在比特币或以太坊中一直称之为数据库。事实上，我们将不得不放弃这个概念，因为所有项目的架构都发生了根本性的变化，对于那些专门针对全球计算机的项目来说，这种变化是最关键的。举一个简单的现代例子：在以太坊上有各种Layer 2网络的实现，比如Arbitrum、Optimism等。如果你开始研究它们的主要区别以及它们的运作方式，你会发现，在某些情况下，以太坊的L2网络会发送更多的数据，仅仅来自第一层区块链，即以太坊区块链。用于确认L2层上的计算是否正确的所有必要的拼图块都可以在第一层以太坊区块链中找到。另一方面，其他方法表明，在以太坊的第一层之外，还存储着需要找到以证明交易正确性的东西。因此，现在，在我们眼前，再次出现了一个改进的问题，但具体来说是这样一种架构，其中交易在左侧进行，在中间，我们有以状态转换函数、验证者和他们的共识为核心的心脏，允许正确执行这种状态转换。但也存在数据可用性的问题，这是必要的，以确保跨验证和实际上服务本身的存在。���天在以太坊上创建L2的一些方法和模式提出了这样一个问题：“如果某个L2层丢失了它没有存储在主以太坊区块链中的数据会怎样？”",
  "Let's complement this picture with how Polkadot is structured. Polkadot has two consensus mechanisms: the \"babe\" consensus, responsible for the parachain-level consensus and is fast, and the \"grandpa\" consensus, which is slower and verifies everything afterward. So, if you delve into the wiki article titled \"The Path of a Block in the Polkadot Network,\" you will encounter interesting abbreviations. After achieving the \"babe\" consensus at the parachain level, the \"grandpa\" consensus introduces the concept of \"proof of validity and data availability.\" Going deeper, you'll find the term \"chunk\" of redundant pieces of information, inspired by CD RW technologies from the 90s and 2000s. This addresses the question of how to preserve information when absolute trust in a specific entity in the network is not feasible. The concept of \"chunk\" of redundant information is one of these patterns.": "让我们用Polkadot的结构来补充这幅图景。Polkadot有两种共识机制：负责平行链级共识的“babe”共识，速度快，以及较慢并在之后验证所有内容的“grandpa”共识。因此，如果你深入研究维基百科文章标题为“Polkadot网络中区块的路径”，你会遇到有趣的缩写。在平行链级别达到“babe”共识后，“grandpa”共识引入了“有效性和数据可用性证明”的概念。更深入地研究，你会发现“冗余信息块”这个术语，受到90年代和2000年代CD RW技术的启发。这解决了在网络中对特定实体的绝对信任不可行时如何保留信息的问题。“冗余信息块”的概念是这些模式之一。",
  "Summing up, at the core lies an abstract function that enables any computation and was described by Alan Turing in the 1930s. The personal computer, essentially a side effect of a mathematical problem, emerged from Turing's work. The technologies first applied in Bitcoin, such as consensus that allows the network to exist without a specific data center or entity responsible for data correctness, form a functioning mechanism. It goes beyond providing a specific service for electronic cash transfers; it allows us to audit and control any computation in the network. Additionally, we face the challenge of ensuring data availability, as it's not the primary concern of the world computer. The world computer's task lies at its core, executing computation, managing state transitions, and performing calculations, while the data in this scheme serves as a puzzle piece that is more necessary to support the lower part. Thus, this overall scheme can be seen as an abstract and generalized illustration of the world computer's structure, where the state transition function is at its core.": "总结一下，核心是一个抽象函数，它使任何计算都成为可能，并由艾伦·图灵在1930年代描述。个人计算机，本质上是数学问题的一个副产品，源于图灵的工作。首先应用在比特币中的技术，比如允许网络存在而无需特定数据中心或负责数据正确性的实体的共识，形成了一个运行机制。它不仅提供了电子现金转账的特定服务，还允许我们审计和控制网络中的任何计算。此外，我们面临确保数据可用性的挑战，因为这不是全球计算机的主要关注点。全球计算机的任务在于执行计算、管理状态转换和执行计算，而在这个方案中的数据则作为更必要的支持下部分的拼图块。因此，这个整体方案可以被看作是全球计算机结构的一个抽象和概括的插图，其中状态转换函数位于核心位置。",
  "Part 4: The Path of a New Block of Information in the World Computer": "第4部分：信息块在世界计算机中的路径",
  "The fourth and final part of our lecture is \"The World Computer in Your Home.\" After this, I will begin recording screencasts for the practical part of the sessions.": "我们讲座的第四部分也是最后一部分是“您家中的世界计算机”。在此之后，我将开始录制实践部分的屏幕录像。",
  "Now we will try to summarize almost all the theory we have covered so far in terms of one process. The process that describes the path of an information block in the world computer. Let's start again by returning to the theme of web3 and the concept of blockchain. The phrase \"block\" or \"information block\" can be considered identical when stepping away from the last 10 years and taking a more general theory, as explored in the previous parts of the lectures. The concept of a \"block of information\" aligns with web3, but not necessarily with blockchain. Even without any crypto projects, we need to understand that when forming the theory of the world computer without referencing the formation of information blocks, it's currently challenging to envision other models. So, we will consider the path of an information block throughout the entire world computer, not because it is blockchain, but because, for now, there are no other ways to conceptualize the existence of the world computer other than by processing information in specific portions.": "现在我们将尝试总结迄今为止我们所涵盖的几乎所有理论，以一个过程的术语描述。这个过程描述了信息块在世界计算机中的路径。让我们再次从回到web3的主题和区块链的概念开始。当我们远离过去10年并采用更一般的理论时，“块”或“信息块”这个短语可以被认为是相同的，正如在讲座的前几部分中所探讨的那样。 “信息块”的概念与web3一致，但不一定与区块链一致。即使没有任何加密项目，我们也需要理解，当在没有参考信息块的形成的情况下形成世界计算机的理论时，目前很难设想其他模型。因此，我们将考虑信息块在整个世界计算机中的路径，不是因为它是区块链，而是因为目前除了通过以特定部分处理信息之外，没有其他方式来概念化世界计算机的存在。",
  "Block of information = block in web3, but without blockchain and without any crypto project influence. We must currently consider the formation of information blocks when discussing the theory of the world computer. Now, let's move on to the first point. I tried to find close analogies from everyday life to help illustrate the path of an information block in the world computer. The analogy I've chosen is the movement of a bus on a route. Our first meeting point is the bus station.": "信息块=web3中的块，但没有区块链和没有任何加密项目的影响。当讨论世界计算机的理论时，我们目前必须考虑信息块的形��。现在，让我们继续第一个观点。我尝试找到日常生活中的类比来帮助说明信息块在世界计算机中的路径。我选择的类比是公交车在路线上的移动。我们的第一个会面点是公交车站。",
  "I marked transactions in pink as small dots. Let's imagine a typical bus stop where people gather, waiting for a bus that operates on a schedule. If we don't consider the hustle and bustle of large cities, where buses are always late, everyone in the world generally knows that the train from village A to village B always arrives around 7:15 am. Transactions that users want to send to the world computer gather at a certain bus stop and wait for the bus to arrive.": "我用粉色标记了交易作为小点。让我们想象一个典型的公交车站，人们聚集在那里，等待按时运行的公交车。如果我们不考虑大城市的喧嚣，那里的公交车总是迟到，那么世界上的每个人通常都知道从A村到B村的火车总是在早上7:15左右到达。用户想要发送到世界计算机的交易聚集在某个公交车站等待公交车到达。",
  "This is how our block is formed. Imagine: the bus arrives, and each person starts boarding one by one, taking their seats. The bus then follows its route. In our case, the block of information overcomes the first frontier. Our transactions, in some form, have settled into the bus and overcome the initial barrier. I will be using terminology primarily from Polkadot, and the third part should have better explained the concept of the world computer in the comparison between Ethereum and Polkadot. My personal opinion, and probably the majority of engineers today would agree, is that the representation of a heterogeneous multicentric world computer is better implemented in Polkadot. However, we will still go through the terms inherited from Ethereum, but towards the end of this part of the lecture.": "这就是我们的区块是如何形成的。想象一下：公共汽车到达，每个人依次上车，找到自己的座位。然后公共汽车按照它的路线行驶。在我们的情况下，信息块克服了第一个障碍。我们的交易，在某种形式上，已经进入了公共汽车并克服了最初的障碍。我将主要使用Polkadot的术语，第三部分应该更好地解释了世界计算机的概念，以太坊和Polkadot之间的比较。我的个人观点，也可能是今天大多数工程师的观点，是异构多中心世界计算机的表现更好地在Polkadot中实现。然而，我们仍将讨论从以太坊继承的术语，但在本讲座的最后部分。",
  "What is the line that separates the bus stop from the bus's further movement? This line represents the collators of the network – participants in the network nodes who collect transactions. You can think of a collator not as a bus driver but as a controller who stays at the bus stop. In other words, this controller checks whether you have a ticket when you enter the bus. It doesn't recheck in the database how valid the ticket is but looks at the basic parameters of the ticket and checks if everything seems fine. In reality, collators perform almost all the calculations required, verifying the ticket number and other data, but they are not required to guarantee that the check is done correctly. Therefore, collators are controllers who remain at the bus stop, primarily ensuring passenger boarding, seating, and sending the bus further along the route.": "什么是分隔公交车站和公交车进一步移动的线？这条线代表网络的整理者 - 网络节点中收集交易的参与者。您可以将整理者视为公交车司机，而不是留在公交车站的控制器。换句话说，这个控制器检查您进入公交车时是否有车票。它不会在数据库中重新检查车票的有效性，而是查看车票的基本参数，并检查一切是否正常。实际上，整理者几乎执行所有所需的计算，验证车票号码和其他数据，但不需要保证检查是否正确完成。因��，整理者是留在公交车站的控制器，主要确保乘客上车、就座并将公交车沿着路线继续前行。",
  "Beyond the drawn border, we enter the first validation area where paravalidators are located. These are validators of the entire ecosystem, the entire network, specifically assigned for a certain time to check each transaction and thus perform actual computations in the world computer. Our not-yet-fully-formed block of information is marked with a dashed line. It is still a candidate block of information since it has not undergone any actual verification. The collator, who collected the block of information and checked the transactions at the entrance, does not participate in any way in securing the cybersecurity of the computations conducted. Its task is only to seat all transactions and form the first block. At this stage, the transformation from a candidate to a real block of information begins.": "超出绘制边界，我们进入第一个验证区域，那里是paravalidators。这些是整个生态系统的验证者，整个网络的验证者，专门分配一定时间来检查每个交易，从而在世界计算机中执行实际计算。我们尚未完全形成的信息块用虚线标记。它仍然是一个信息块的候选，因为它尚未经过任何实际验证。整理者收集了信息块并在入口处检查了交易，但并不以任何方式参与确保进行的计算的网络安全。它的任务仅是安排所有交易并形成第一个信息块。在这个阶段，从候选到真实信息块的转变开始。",
  "I have divided it into three parts, but forgot one more. Let's consider four parts of this candidate block. The top part, known to users of various web3 applications as the header or block header, is the quintessence, the most popular piece of information circulating and reflected from the block explorer to the console clients of all nodes mining, staking, and so on. The header is a key element of the block, but it is practically formed at the last stage at this point.": "我将它分成三部分，但忘记了另外一部分。让我们考虑这个候选信息块的四个部分。顶部部分，各种web3应用程序的用户称之为头部或块头，是信息的精髓，是最流行的信息片段，从区块浏览器反映到所有节点挖矿、质押等的控制台客户端。头部是信息块的关键元素，但实际上是在这一点上的最后阶段形成的。",
  "Firstly, we have our actual requests for state transitions or computations. There is a list of changes that need to be made: convert A to A', B to B', C to C', applying a set of algorithms to them. For this, we will now build another boundary immediately and go beyond it to perform this part of the work, and then only proceed beyond it. Already at the block preparation stage, we have to cross the second boundary within the world computer to go for the algorithms that need to be applied to prepare the block. As I mentioned before, theoretically, the controller at the bus stop here does the same, but I wouldn't pay much attention to that. The block preparation stage, especially when we talk about examples simultaneously from Polkadot and Ethereum as a world computer, they differ slightly and show us the insignificance of checks at this stage because it is precisely on the second step, after passing the first boundary and receiving the block of information from collators, that the attention-worthy calculations of this world computer begin.": "首先，我们有我们的实际状态转换或计算请求。有一系列需要进行的更改：将A转换为A'，B转换为B'，C转换为C'，对它们应用一系列算法。为此，我们现在将立即建立另一个边界，并超越它来执行这部分工作，然后才继续超越它。在信息块准备阶段，我们必须跨越世界计算机内的第二个边界，以执行需要应用于准备信息块的算法。正如我之前提到的，理论上，公交车站的控制器在这里做同样的事情，但我不会过多关注这一点。信息块准备阶段，特别是当我们同时从Polkadot和以太坊作为世界计算机的例子谈论时，它们略有不同，并显示了在这个阶段检查的无关紧要性，因为正是在第一步之后，通过第一个边界并从整理者那里收到信息块后，这个世界计算机值得关注的计算开始。",
  "To perform these calculations, the validator, at this stage, can only do so by turning to the relay chain, the central database, and taking from there the algorithms from the runtime. In the case of Ethereum, it was the same virtual machines in the previous architectural concept, which could be applied, so there was no need to go anywhere. Almost every node had a complete copy of the algorithms that could be applied. But in terms of a heterogeneous network, where each segment or each individual chain may have its own set of algorithms, a validator, before actually executing all the transitions, calculations obtained in the form of a block candidate from the collator, must consult. It must consult the relay chain, consult the main blockchain in the network and take from there the necessary algorithms, apply them, and perform state transitions.": "为了执行这些计算，验证者在这个阶段只能通过转向中继链、中央数据库，并从运行时获取算法来执行。在以太坊的情况下，与之前的架构概念中相同的虚拟机可以应用，因此无需去任何地方。几乎每个节点都有完整的可应用算法副本。但在异构网络中，每个部分或每个单独的链可能有自己的算法集，验证者在实际执行所有转换之前，必须咨询从收集者那里获得的候选区块中获得的计算。它必须咨询中继链，在网络中咨询主区块链，并从那里获取必要的算法，应用它们，并执行状态转换。",
  "During the execution of calculations, a Merkle tree is simultaneously formed, and we won't dwell on it because Merkle trees are not that complicated from the perspective of computer science. Still, I notice that to understand how to apply them in engineering and in the architecture of a project, how they are applied, not just by reading on Wikipedia, you need to break your head a bit, imagine examples. In this example, we won't delve too much into it, but I think for those who are already familiar with some basic definitions, have read about Merkle trees, it will become a bit clearer about how and at what moments another Merkle tree is assembled. The Merkle tree is formed when we actually perform calculations and output values appear. These output values are packed into a binary tree format, then the addition is performed between them in computer science language, and the top node reaches the header. Let's denote it with a big letter \"H.\" It's a small and pleasant aspect of considering such schemes.": "在执行计算过程中，同时形成了默克尔树，我们不会深入讨论它，因为从计算机科学的角度来看，默克尔树并不那么复杂。但我注意到，要理解如何在工程和项目架构中应用它们，以及它们是如何应用的，不仅仅是通过在维基百科上阅读，你需要稍微费点脑筋，想象一些例子。在这个例子中，我们不会深入讨论，但我认为对于那些已经熟悉一些基本定义，已经阅读过关于默克尔树的内容的人来说，关于另一个默克尔树是如何组装的会变得更清晰一些。当我们实际执��计算并输出值时，默克尔树就形成了。这些输出值被打包成二进制树格式，然后在计算机科学语言中它们之间进行加法运算，顶部节点达到头部。让我们用一个大写字母\"H\"来表示它。这是考虑这种方案时的一个小而愉快的方面。",
  "In this scheme, we can note how the block header is actually related to the computations performed inside. Let's look again - our block candidate came from the collator. There is a set of transactions that need to be executed, perform calculations. The validator went through another internal boundary, one more, behind the algorithms, applied them, and recorded all the results at the lowest level of the Merkle tree. The other nodes are essentially systemic. They do not come from any data; they don't come from anywhere. At the second level, the node does not come from any information. It is obtained by summing values in these two leaves, and when we go up with you, we get only the root of this tree, which is enough to protect all output values. We won't get the same header if we change any of these calculations. And this is one of the magical and simple features, like hash-oriented storage, of how we can protect a whole block of information by talking only about one header. Therefore, headers are so important and play a cornerstone role even in architectures when we transition from one chain or one virtual machine to many combined in the network. It is enough for us to ensure the security of storing headers to be sure that all transactions that were executed at the block preparation stage were executed correctly, and they cannot be replaced.": "在这个方案中，我们可以注意到区块头实际上与内部执行的计算相关联。让我们再看一遍 - 我们的区块候选者来自收集者。有一组需要执行的交易，执行计算。验证者通过另一个内部边界，再一个，经过算法，应用它们，并将所有结果记录在默克尔树的最低级别。其他节点本质上是系统性的。它们不来自任何数据；它们不来自任何地方。在第二级，节点不来自任何信息。通过在这两个叶子中的值求和获得，当我们与您一起向上移动时，我们只得到这棵树的根，这足以保护所有输出值。如果我们更改这些计算中的任何一个，我们将不会得到相同的头部。这是其中一个神奇而简单的特性，就像面向哈希的存储一样，我们如何通过只谈论一个头部来保护整个信息块。因此，头部是如此重要，并在从一个链或一个虚拟机过渡到网络中的多个链时发挥着基石作用。我们只需确保存储头部的安全性，就���以确保在区块准备阶段执行的所有交易都被正确执行，它们不会被替换。",
  "And one field is still left unfilled. In the process of preparing the block of information, it is the author's field, that is, the validator who actually performed all the changes, prepared the Merkle tree, and recorded the header. Since we are considering an example with the bus moving along the route from the stop, let's call the validator a \"controller\" who goes right inside the bus, passes each seat, approaches each person, checks for real what is written on their tickets, makes some mark, validates it, and, accordingly, puts their signature. The controller, for example, number 134, meaning, naturally, each validator has some unique identifier, their address, and we also somehow uniquely renamed it here.": "还有一个字段仍然没有填写。在准备信息块的过程中，作者的字段，也就是实际执行所有更改、准备默克尔树并记录头部的验证者。由于我们考虑的是一个公交车沿着路线从车站行驶的例子，让我们称验证者为“控制器”，他直接进入公交车，经过每个座位，接近每个人，检查他们车票上写的内容是否真实，做一些标记，验证它，并相应地签名。例如，控制器编号为134，意味着每个验证者都有一些唯一标识符，他们的地址，我们也在这里以某种方式进行了独特命名。",
  "And it seems that at this point, we could have shaded and made our block boundaries bolder, but no, and this is one of the interesting changes that have occurred in the last 5 years in terms of decentralized ecosystems, namely the shift from proof of work. When validators of the network, at that time miners, never had to coordinate anything with each other. You produced a block and sent it to the network and moved on. In fact, it was not a consensus of agreed consent. It was a consensus of obvious agreement with the fact that had occurred. What is interesting changes when the architecture becomes more complex, and we have come closer from a simple calculator like Bitcoin with a ledger towards an actual virtual computer, is that at each stage, the connectivity of participants who ensure security and block production has increased. Because, in fact, no one who risks their stake, the one who ensures this security and wants to earn by processing your transactions, has something to lose, unlike proof of work. In proof of work, you bought the equipment, yes, you put money into it, you spend electricity, but there is actually no protection against the fact that you can attack the network with your power, the same 51% attack, where someone with a lot of miners can try to rewrite the chain.": "似乎在这一点上，我们本可以使我们的区块边界更加清晰和醒目，但是没有，这是过去5年中发生的有趣变化之一，即从工作证明转变。当时网络的验证者，也就是矿工，从未需要相互协调。你生成一个区块并将其发送到网络，然后继续前进。实际上，这不是一致同意的共识。这是对已发生事实的明显同意的共识。当架构变得更加复杂时，有趣的变化就会发生，我们已经从像比特币这样的简单计算器向实际虚拟计算机靠近，每个阶段，确保安全性和区块生产的参与者的连通性都在增加。因��实际上没有人会冒着风险，确保这种安全性并希望通过处理您的交易来赚钱，与工作证明不同。在工作证明中，你购买了设备，是的，你投入了资金，你花费了电力，但实际上没有保护措施来防止你使用你的算力攻击网络，同样是51%攻击，其中拥有大量矿工的人可以尝试重写链。",
  "Now we are talking about proof of stake, where a deposit is already made, and if you do something wrong, a part will be withdrawn from it, as a penalty. All nodes, absolutely, in all architectures that I currently observe, mechanisms for messaging between validators began to appear quickly at the block preparation stage. In Polkadot, it is no different. Any validator of a separate parachain that collects a block knows the addresses or already has established contact with another 15-63 validators who are with you on this epoch, on some temporary period, as validators, and each of them randomly becomes a block producer at some point. But being appointed as a producer does not negate a very important component of this process. You do not stop interacting with the other participants. There is always a pool of validators assigned to a specific epoch, to a certain time slot, for validating a particular parachain or segment of the world computer. Regardless of whether you are a validator-controller specifically assigned to produce the next block in the world computer of this segment, you still stay in touch with the other validators, and you have constant contact with them.": "现在我们正在谈论权益证明，其中已经进行了存款，如果您做错了什么，一部分将被提取出来作为惩罚。在我目前观察到的所有架构中，所有节点绝对都开始在区块准备阶段迅速出现验证者之间的消息传递机制。在Polkadot中，情况也是如此。任何收集区块的单独平行链的验证者都知道地址，或者已经与另外15-63个与您在这个时期一起的验证者建立了联系，作为验证者，其中每个人在某个时刻都会随机成为区块生产者。但被任命为生产者并不否定这个过程的一个非常重要的组成部分。您不会停止与其他参与者互动。始终有一组验证者被分配到特定的时期，到特定的时间段，用于验证特定的平行链或世界计算机的某个部分。无论您是专门被指定为在这个部分的世界计算机中生产下一个区块的验证者控制器，您仍然与其他验证者保持联系，并与他们保持持续联系。",
  "Why is this constant contact necessary? It turns out to be quite simple. We do not want, when we move into the inner part, to be afraid or worry that we performed any of the operations incorrectly. As surprising as it may seem, it is beneficial for any validator, before moving on, to first turn to their colleagues assigned to validation and ask them to double-check the calculations. This check is informal, so even if we do not use any logging into an immutable database of requests for verification and the results of this verification, the appointed controller, after talking to the pool of validators, still collects additional responses from all validators assigned to this parachain or network segment. Together with additional confirmations, the controller moves on to the next stage. But even here, it's not quite as simple. At this stage, another process has to be performed. It is important to note that at this stage, our block of information is still a candidate block, and settlement of information is already taking place in the storage. Neither at the very end, nor after we have created and sealed the block and attached it with an archiver in the final part, namely here, in this middle part where all the calculations are actually performed, does the information get saved in the storage. Therefore, our controller, in addition to talking to their colleagues, also ensures the storage of data in some storage, which is also quite metaphysical because the moment you communicate with other validators, this storage gets filled. How is this checked? We will need to move on to the next stage.": "为什么这种持续的联系是必要的？原来很简单。当我们进入内部部分时，我们不希望害怕或担心我们执行任何操作时出错。尽管可能令人惊讶，但对于任何验证者来说，在继续之前，首先向分配给验证的同事请教并要求他们再次检查计算是有益的。这种检查是非正式的，因此即使我们没有将任何日志记录到不可变的请求验证数据库以及此验证的结果，指定的控制器在与验证者池交谈后，仍然从分配给此平行链或网络段的所有验证者收集额外的响应。连同额外的确认，控制器继续进行下一阶段。但即使在这里，情况也并不那么简单。在这个阶段，还必须执行另一个过程。重要的是要注意，在这个阶段，我们的信息块仍然是候选块，并且信息的结算已经在存储中进行。在最后，或者在我们创建并封存块并将其与存档器连接在最后部分之后，即在这里，即在所有计算实际执行的这个中间部分，信息并没有保存在存储中。因此，我们的控制器除了与同事交谈外，还确保将数据存储在某个存储中，这也是相当形而上的，因为当您与其他验证者交流时，此存储会被��满。这如何检查？我们需要继续进行下一阶段。",
  "In summary, to complete the middle part, let's look again. We still have only a candidate block at the very beginning. Yes, all transactions are roughly calculated somewhere at the bus stop, everyone has taken their seats according to their tickets. We have passed the first boundary, which is essentially direct established contact between validators and block collators. In Ethereum and Polkadot, these are slightly different schemes now. But everything that happens on the left side at the very beginning does not provide cybersecurity for data and calculations. It's just preparation. Once we have passed and entered the environment of the validators' attention, work with the block of information in the world computer begins. A randomly selected validator, in our case, with a bus route - a controller, actually goes through each of the seats, checks the ticket, checks and performs all the calculations that were made, gathers all the information into a tree. The resulting root node of this tree becomes the header of the proposed block. The validator who actually performs all the calculations with this block of information communicates with the other participants who perform a similar function for the same route in an undefined time slot. And while communicating with them and asking them to verify all the calculations, we are actually filling a certain storage of data in the network. It is not a specific physical storage; there is no specific IP address, no specific hard drive onto which they all load through some VPN or login and password scheme, of course not. In the process of communicating with other validators, data remains on their local machines, and this data will further participate in the transformation of this candidate into a new block of information. In essence, the sealed block that will be settled in the relay chain is collected. We have assembled a block. All the metadata around the calculations is already filled, which means we can try to move on to the next frontier.": "总之，为了完成中间部分，让我们再次看看。我们仍然只有一个候选块在最开始。是的，在公交车站的某处粗略计算了所有交易，每个人都根据自己的车票找到了自己的座位。我们已经通过了第一个边界，这实质上是验证者和块整理者之间直接建立联系。在以太坊和Polkadot中，这些方案现在略有不同。但是在最开始左侧发生的一切并不为数据和计算提供网络安全。这只是准备。一旦我们通过并进入验证者关注的环境，与世界计算机中的信息块进行工作就开始了。在我们的情况下，随机选择的验证者，就像公交车路线上的控制器一样，实际上会检查每个座位，检查车票，检查并执行所有已经进行的计算，将所有信息汇总成一棵树。这棵树的根节点成为提议块的头部。实际上执行所有这个信息块的计算的验证者与其他参与者进行通信，这些参与者在未定义的时间段内执行相似的功能。在与他们交流并要求他们验证所有计算的过程中，我们实际上正在填充网络中的某个数据存储。这不是特定的物理存储；没有特定的IP地址，也没有通过某些VPN或登录和密码方案加载到其中的特定硬盘。在与其他验证者交流的过程中，数据仍然保留在他们的本地机器上，这些数据将进一步参与将这个候选块转化为新的信息块。实质上，将在中继链中安置的密封块被收集起来。我们已经组装好了一个块。所有围绕计算的元数据已经填充，这意味着我们可以尝试继续前进到下一个领域。",
  "At this moment, let's delve into the passage of the next boundary. The most crucial aspect at the final stage becomes the block header. We are less concerned with the execution of computations; we can simplify our perspective here, as computations may vary based on the architecture, whether it's Ethereum or Polkadot. The key point is that, on the intermediate stage, from what I observe in the theory and practice of implementing the world computer concept, most computations happen at an intermediate level. The last level remains only to execute essential checks. Almost all these checks in a multi-chain architecture are related to the concatenation or merging of block headers into one block.": "在这一刻，让我们深入探讨下一个边界的过程。在最后阶段，最关键的部分是区块头。我们对计算执行不太关心；我们可以简化我们的视角，因为计算可能会根据架构的不同而有所不同，无论是以太坊还是Polkadot。关键点在于，在中间阶段，根据我在实施世界计算机概念的理论和实践中观察到的情况，大多数计算发生在中间层。最后一级仅用于执行基本检查。在多链架构中，几乎所有这些检查都与将区块头连接或合并成一个区块有关。",
  "In the final part of our journey, the most important element in the world computer's information block becomes the cornerstone – the header. The second component is more about meta-information. If the header is the actual result of all computations, the additional meta-information being transmitted consists of receipts and signatures of the validators who participated in the intermediate stage of this process. At the final stage, we can visualize the whole picture solely as the assembly of the same tree, not as a list of transactions. In the relay chain's final part, the crucial aspect is the assembly of headers from many similar processes, but linked to different segments of the world computer, different parachains.": "在我们旅程的最后部分，世界计算机信息块中最重要的元素变成了基石 - 区块头。第二个组成部分更多地涉及元信息。如果区块头是所有计算的实际结果，那么传输的附加元信息包括参与此过程中间阶段的验证者的收据和签名。在最后阶段，我们可以将整个图像仅视为相同树的组装，而不是交易列表。在中继链的最后部分，关键的方面是从许多类似过程中组装头部，但与世界计算机的不同部分、不同平行链相关联。",
  "Each parachain, each set of validators – we've discussed one example, but in reality, such block preparations for parachains happen 30-40 times. The number of parachain slots or the number of L2 networks in Ethereum will result in a similar number of processes with a similar architecture. However, in the final stage, we will see an approximately identical picture everywhere – how the block header will be formed from a multitude of headers from other blocks. In this process, we need to introduce one more entity and jump back across the boundary to the second stage.": "每个平行链，每组验证者 - 我们已经讨论了一个例子，但实际上，为平行链准备这样的区块发生了30-40��。以太坊中的平行链槽数量或L2网络数量将导致具有类似架构的类似过程的数量。然而，在最后阶段，我们将在各处看到一个大致相同的图像 - 区块头将如何从其他区块的众多头部中形成。在这个过程中，我们需要引入另一个实体，并跨越边界回到第二阶段。",
  "Finalizers. In fact, they are also validators, but relay chain validators. In the Polkadot architecture, we have a thousand validators divided into two groups. The first, a very small group, is responsible only for forming the block header and a new block consisting of the headers of the State of the States blocks. The second group – parachain validators – is further divided into many subgroups, but this group is called parachain validators. In L2 networks above Ethereum, this story will eventually gain more understanding, more denominators. For now, let's focus on the Polkadot architecture. Finalizers, besides checking an additional set of meta-information and rechecking a validator with a specific ID, randomly chosen to generate this block of all blocks, also help recheck meta-information, check, and assemble all headers into one. It's a bit complex, yes, if we look at it from the perspective of tree assembly.": "最终者。事实上，他们也是验证者，但是中继链验证者。在Polkadot架构中，我们有一千个验证者分为两组。第一组，一个非常小的组，负责形成区块头和由各个状态区块头组成的新区块。第二组 - 平行链验证者 - 进一步分为许多子组，但这个组被称为平行链验证者。在以太坊上方的L2网络中，这个故事最终将获得更多的理解，更多的分母。现在，让我们专注于Polkadot架构。最终者，除了检查附加的元信息集并重新检查具有特定ID的验证者，随机选择生成所有区块的此区块之外，还帮助重新检查元信息，检查并将所有头部组装成一个。这有点复杂，是的，如果我们从树组装的角度来看。",
  "In addition to this, in the Polkadot architecture and in Ethereum with the latest changes, a data availability check takes place. For this, finalizers visit parachain validators and try to request actual information about each block stored in the network. If they receive data from at least 1/3 of the validators, using technology that allows redundant storage of information, and subsequently, if someone loses it, one or two or three validators can still restore it, there is a critical threshold at 1/3. If 1/3 of the nodes respond and say that we have data about the block being produced, finalizers tell the block that it is already a fully formed information block, that all computations have been done correctly, that we have already taken the header of this block and combined it with someone else's headers from other segments of the network. We have already formed the main header of the entire network. After that, finalizers place many checkmarks on the final block, which combines all performed computations.": "除此之外，在Polkadot架构和以太坊最新更改中，进行了数据可用性检查。为此，最终确认者访问平行链验证者，并尝试请求关于网络中存储的每个区块的实际信息。如果他们从至少1/3的验证者那里收到数据，使用允许信息冗余存储的技术，随后，如果有人丢失了它，一两个或三个验证者仍然可以恢复它，关键阈值为1/3。如果1/3的节点响应并表示我们有关于正在生成的区块的数据，最终确认者告诉该区块它已经是一个完全形成的信息区块，所有计算都已正确完成，我们已经获取了该区块的头部并将其与其他网络段的其他人的头部组合在一起。我们已经形成了整个网络的主头部。之后，最终确认者在最终区块上放置了许多勾号，这些勾号结合了所有已执行的计算。",
  "Currently, this is the situation from the perspective of the most engineering-implemented multi-chain heterogeneous ecosystem, which is Polkadot. It is the most engineering-implemented multi-chain heterogeneous ecosystem, not too far from Ethereum. I would like to focus on the comparison, and if someone is interested in understanding how information blocks flow in Ethereum with L2 networks, you can try to do that now. I will return to this question when some elements of Ethereum, in terms of heterogeneity and multi-chain aspects, are completed. It might take 1-2 years, and then we can build such a picture. Nevertheless, we can generally accept a scheme with three main stages:": "目前，从工程实施最多的多链异构生态系统Polkadot的角度来看，情况是这样的。这是最工程实施最多的多链异构生态系统，与以太坊相差不远。我想专注于比较，如果有人对了解以太坊与L2网络中信息块如何流动感兴趣，现在可以尝试。当以太坊的某些元素在异构性和多链方面完成时，我将回到��个问题。可能需要1-2年，然后我们可以构建这样的画面。尽管如此，我们通常可以接受一个包含三个主要阶段的方案。",
  "**1. Formation of a candidate for the information block:**": "**1. 候选信息块的形成：**",
  "In this stage, the initial candidate for the information block is formed.": "在这个阶段，信息块的初始候选者被形成。",
  "**2. Execution of all computations, data storage, data availability, rechecking with other nodes, ensuring that all state transitions are performed correctly according to specific algorithms, and storing these algorithms in the main citadel:**": "**2. 执行所有计算、数据存储、数据可用性、与其他节点重新检查，确保所有状态转换根据特定算法正确执行，并将这些算法存储在主要城堡中：**",
  "This stage involves the actual execution of computations, saving data to certain layers, ensuring data availability, rechecking with other nodes to confirm that all state transitions are in accordance with algorithms stored somewhere in the main citadel.": "这个阶段涉及实际执行计算、将数据保存到特定层，确保数据可用性，与其他节点重新检查以确认所有状态转换是否符合存储在主要城堡某处的算法。",
  "**3. Finalization, which will not recheck the computations but will verify the meta-information, how this meta-information is stored. It will then assemble the final block, which is the state of the states, and release it as a common information block for the entire segmented multi-chain network:**": "**3. 最终化，不会重新检查计算，但会验证元信息，以及如何存储这些元信息。然后组装最终块，即状态的状态，并将其释放为整个分段多链网络的常见信息块：**",
  "The final stage involves checking the meta-information, verifying how this meta-information is stored, assembling the final block (state of the states), and releasing it as a common information block for the entire segmented multi-chain network.": "最终阶段涉及检查元信息，验证元信息的存储方式，组装最终块（状态的状态），并将其释放为整个分段多链网络的常见信息块。",
  "At this point, we can say that our information is saved. It has passed through the heart, the heart has executed its data transfer correctly, and we can already use the output values. Some will use them to open a smart-contract-purchased apartment with a smart lock, while others might show off their NFT, just received for 10 ethers.": "在这一点上，我们可以说我们的信息已经保存。它已经通过了核心，核心已经正确执行了数据传输，我们已经可以使用输出值。有些人会用它们来开启一个使用智能锁购买的公寓，而其他人可能会炫耀他们刚刚用10个以太币收到的NFT。",
  "In general, this is approximately how it works. This concludes the theoretical part. I think it took about 2 hours, and ahead of us are practical sessions that I will be recording over the next few months. They will help us understand the observed data from the console window, decentralized applications, block explorers, where we will gradually understand how all these theoretical numbers and letters actually look in implementation using Polkadot as an example. I will also start getting hands-on with implementations at the L2 level using one of the well-known frameworks for building L2. Thank you to everyone who has been watching.": "总的来说，大致就是这样。这结束了理论部分。我���为大约花了2个小时，我们前面还有几个月我将录制的实践课程。它们将帮助我们理解从控制台窗口、去中心化应用程序、区块浏览器中观察到的数据，逐渐了解所有这些理论数字和字母在使用波卡作为示例时实际实现的样子。我还将开始在使用一个知名的L2构建框架进行L2级别实现时动手。感谢所有一直在观看的人。"
}