{
  "Part 3: Emergence of the World Computer": "Частина 3: Виникнення світового комп'ютера",
  "In the third part titled \"Emergence of the World Computer,\" we will attempt, layer by layer, to recreate the engineering implementation of the world computer using examples from Ethereum and Polkadot, as before.\"": "У третій частині під назвою \"Виникнення світового комп'ютера\" ми спробуємо, шар за шаром, відтворити інженерну реалізацію світового комп'ютера, використовуючи приклади з Ethereum та Polkadot, як і раніше.",
  "Learn": "Вивчайте",
  "In the third part titled \"Emergence of the World Computer,\" we will attempt, layer by layer, to recreate the engineering implementation of the world computer using examples from Ethereum and Polkadot, as before.": "У третій частині під назвою \"Виникнення світового комп'ютера\" ми спробуємо, шар за шаром, відтворити інженерну реалізацію світового комп'ютера, використовуючи приклади з Ethereum та Polkadot, як і раніше.",
  "Let's start with Ethereum. Ethereum began in 2015 with a state that can be characterized as a combination of the proof-of-work consensus algorithm, enabling the world computer to exist in a decentralized state (as discussed in Part 2). Additionally, the Ethereum Virtual Machine (EVM) was introduced, serving as a Turing-complete computational machine. Together, these two elements formed the first version of the world computer, sometimes referred to as a precursor. Within this context, decentralized applications, or smart contracts, began to emerge.": "Давайте почнемо з Ethereum. Ethereum почався у 2015 році зі стану, який можна характеризувати як поєднання алгоритму консенсусу доказу роботи, що дозволяє світовому комп'ютеру існувати у децентралізованому стані (як обговорювалося у частині 2). Додатково було введено Ethereum Virtual Machine (EVM), яка служила як машина з повними можливостями обчислень Тьюрінга. Разом ці два елементи утворили першу версію світового комп'ютера, іноді називану передвісником. У цьому контексті почали з'являтися децентралізовані додатки або смарт-контракти.",
  "Over the next 5 years, Ethereum lived a relatively unchanged life, undergoing some engineering tunings, such as a continuous increase in gas limits, with the exception of events like the Shanghai fork. Notably, during the second DEFCON held in Shanghai, a denial-of-service attack exploited a function in the virtual machine that consumed minimal gas but triggered significant computations on the Ethereum network. This led to memory overflow, effectively disrupting an entire Ethereum node. This incident highlights the intricate details that arise when dealing with a large and abstract solution like creating a virtual machine.": "Протягом наступних 5 років Ethereum жив досить незмінним життям, пройшовши деякі інженерні налаштування, такі як постійне збільшення лімітів газу, за винятком подій, таких як Шанхайський форк. Зокрема, під час другого DEFCON, що відбувся в Шанхаї, атака з відмовою в обслуговуванні використала функцію у віртуальній машині, яка споживала мінімальну кількість газу, але викликала значні обчислення в мережі Ethereum. Це призвело до переповнення пам'яті, ефективно перериваючи цілу вузлу Ethereum. Цей інцидент підкреслює витончені деталі, які виникають при роботі з великим і абстрактним рішенням, таким як створення віртуальної машини.",
  "Moving forward, a significant shift occurred around the end of the decade, particularly in 2020, with the advent of Ethereum 2.0. However, Ethereum 2.0 has now been deprecated, and I would characterize the real breakthrough as starting around 2019-2020. During this period, there was a true technological breakthrough in Ethereum, moving towards the concept of Ethereum 2.0. The moment of engineering change in Ethereum's architecture can be considered the event known as \"the merge,\" where the functionalities of the beacon chain were combined. The merge marked a significant shift in the paradigm of Ethereum, transitioning it into a slightly different state than what was on the board. The actual engineering change in Ethereum's architecture can be associated with \"the merge,\" where the functionalities of the beacon chain were integrated. For a detailed history of this, you can refer to the ethereum.org website, which provides an excellent article on the coexistence of the traditional Ethereum blockchain with the parallel blockchain launched in 2015 and the Ethereum Virtual Machine.": "Рухаючись вперед, відбулося значне зміщення приблизно в кінці десятиліття, зокрема в 2020 році, з появою Ethereum 2.0. Однак Ethereum 2.0 зараз застарів, і я б характеризував справжній прорив як початок близько 2019-2020 років. Протягом цього періоду в Ethereum відбувся справжній технологічний прорив, рухаючись в напрямку концепції Ethereum 2.0. Момент інженерної зміни в архітектурі Ethereum можна вважати подією, відому як \"злиття\", де функціональності ланцюга маяка були поєднані. Злиття відзначило значне зміщення в парадигмі Ethereum, переходячи в незначно відмінний стан від того, що було на дошці. Фактична інженерна зміна в архітектурі Ethereum може бути пов'язана з \"злиттям\", де функціональності ланцюга маяка були інтегровані. Для докладної історії цього ви можете звернутися на веб-сайт ethereum.org, де надається відмінна стаття про співіснування традиційного блокчейну Ethereum з паралельним блокчейном, запущеним у 2015 році, та Ethereum Virtual Machine.",
  "When the merge occurred, we witnessed a new architectural representation, both at the network level and for individual nodes interacting with the Ethereum network. What was the actual change? For many, the merge signifies the transition from proof-of-work to proof-of-stake, which is indeed significant. It implies increased efficiency and fine-tuning, but it's still a tuning relative to one of the parameters. However, the more noteworthy internal engineering change for each network client was the split. There was no longer a single specific network client or a monolithic architecture. Instead, we got two components of a single node interacting with the Ethereum network.": "Коли стався злиття, ми стали свідками нового архітектурного представлення, як на рівні мережі, так і для окремих вузлів, що взаємодіють з мережею Ethereum. Яка була фактична зміна? Для багатьох злиття означає перехід від доказу роботи до доказу ставки, що дійсно значно. Це передбачає підвищену ефективність і налаштування, але це все ще налаштування відносно одного з параметрів. Однак більш помітною внутрішньою інженерною зміною для кожного клієнта мережі було розщеплення. Більше не існувало одного конкретного мережевого клієнта або монолітної архітектури. Замість цього ми отримали два компоненти одного вузла, що взаємодіють з мережею Ethereum.",
  "The first part, which I labeled \"beacon chain\" on the diagram, essentially represents a collective image of all the innovations that came into the Ethereum client at the moment of the merge. The second part is the preserved virtual machine. Nevertheless, it's worth adding something here too. Dialogues truly began about replacing the virtual machine, which was exclusively tailored to work with smart contracts and smart contracts in a specific language—Solidity. This is because, by 2015, there were practically no interpreters left for smart contracts in languages other than Solidity, and the architecture appeared somewhat one-sided from the perspective of an Ethereum programmer. You learn a snippet of JavaScript in the form of Solidity, write smart contract code on it, and get your DApp, like Uniswap, for example.": "Перша частина, яку я позначив \"ланцюгом маяка\" на діаграмі, по суті представляє колективне зображення всіх інновацій, які увійшли в клієнт Ethereum на момент злиття. Друга частина - збережена віртуальна машина. Тим не менш, тут також варто щось додати. Діалоги справді почалися про заміну віртуальної машини, яка була виключно адаптована для роботи з розумними контрактами і розумними контрактами на конкретній мові - Solidity. Це тому, що до 2015 року практично не залишилося інтерпретаторів для розумних контрактів на мовах, крім Solidity, і архітектура здавалася трохи однобічною з погляду програміста Ethereum. Ви вивчаєте фрагмент JavaScript у формі Solidity, пишете на ньому код розумного контракту і отримуєте свій DApp, наприклад, Uniswap, наприклад.",
  "Since the emergence of a more complex Ethereum architecture, discussions have revolved around the idea that the virtual machine, which existed as a somewhat monolithic element from 2015, can also be replaced in the new architecture. The conversation shifted towards replacing it with something like WebAssembly (Wasm) or a more interesting solution from the perspective of writing code for the world computer. You could say, \"Wasm with a question mark.\"": "З моменту появи більш складної архітектури Ethereum обговорення оберта��ися навколо ідеї того, що віртуальну машину, яка існувала як трохи монолітний елемент з 2015 року, також можна замінити в новій архітектурі. Розмова перейшла на заміну її на щось на кшталт WebAssembly (Wasm) або більш цікаве рішення з точки зору написання коду для світового комп'ютера. Можна сказати, \"Wasm з питанням\".",
  "From the perspective of the Beacon Chain, it indeed operates on proof-of-stake, but what's more interesting is the inclusion of Gasper. This represents a modification of the original ideas about Casper. Casper, often referred to as the friendly ghost finality gadget, was introduced, perhaps even as early as Defcon 3 or 4, and maybe even discussed at Defcon 2—I don't recall precisely. But at the EthCC conference in Paris, which definitely took place in 2018, Vlad Zamfir and Vitalik, from different rooms, were discussing the emergence of Casper as a friendly ghost, overseeing participants in proof-of-stake and coming to the aid of the network when a node misbehaves. From this idea of Casper, Gasper emerges. Without delving into terminology too much, the consensus algorithm undergoes a shift, changing not only in terms of simplicity but also becoming more complex, similar to Polkadot. As I mentioned earlier, Polkadot has two consensus algorithms, Babe and Grandpa. Similarly, with Ethereum's Beacon Chain functionality, achieving consensus and finality is not as instantaneous. It involves epochs, and the network operates on a more complex scenario, reaching a state that is already somewhat dynamic, not frozen, and is essentially carved in stone.": "З точки зору Ланцюга маяка, він дійсно працює на доказі ставки, але що цікавіше, це включення Gasper. Це представляє модифікацію оригінальних ідей про Casper. Casper, часто називаний дружнім фінальним гаджетом привидів, був представлений, можливо, навіть на Defcon 3 або 4, і можливо, навіть обговорювався на Defcon 2 - я не пам'ятаю точно. Але на конференції EthCC в Парижі, яка точно відбулася в 2018 році, Влад Замфір і Віталік, з різних кімнат, обговорювали появу Casper як дружнього привида, який наглядає за учасниками у доказі ставки і приходить на допомогу мережі, коли вузол веде себе неадекватно. З цієї ідеї Casper виникає Gasper. Не заглиблюючись у термінологію занадто, алгоритм консенсусу зазнає змін, змінюючись не лише з точки зору простоти, але й стаючи складнішим, схожим на Polkadot. Як я вже зазначав раніше, у Polkadot є два алгоритми консенсусу, Babe і Grandpa. Так само з функціональністю Ланцюга маяка Ethereum досягнення консенсусу і фінальності не є миттєвими. Це включає епохи, і мережа працює за більш складним сценарієм, досягаючи стану, який вже дещо динамічний, не заморожений, і по суті вже врізаний в камінь.",
  "What can be added in relation to 2024? For me, it was a prolonged observation and an attempt to understand whether Ethereum would eventually implement sharding or not. Sharding is the ability to exist not with a single blockchain but with multiple blockchains within one network. As I observed the merge and the simultaneous rise of Layer 2 (L2) networks, questions arose in my mind about whether sharding would indeed materialize. Sharding seemed interesting to me due to its homogeneity—having multiple chains that are almost identical, lacking any specific characteristics. It appeared to be an interesting approach, but not as flexible as a heterogeneous approach. In L2 networks, even several years ago, I could see the heterogeneity of Ethereum, its ability to work with various types of more specific blockchains. I was curious about the direction it would take—whether sharding, with its homogeneity, would displace L2 solutions or whether L2 solutions with a heterogeneous approach would saturate the Beacon Chain and the main nodes of the Ethereum network.": "Що мо��на додати щодо 2024 року? Для мене це було тривале спостереження і спроба зрозуміти, чи врешті-решт Ethereum реалізує шардування чи ні. Шардування - це можливість існувати не з одним блокчейном, а з декількома блокчейнами в межах однієї мережі. Під час спостереження за злиттям і одночасним зростанням мереж L2 (L2) у мене виникали питання про те, чи справді матеріалізується шардування. Шардування здавалося мені цікавим через його однорідність - наявність декількох ланцюгів, які майже ідентичні, не маючи жодних конкретних характеристик. Це виглядало цікавим підходом, але не таким гнучким, як гетерогенний підхід. У мережах L2, навіть кілька років тому, я бачив гетерогенність Ethereum, його здатність працювати з різними типами більш конкретних блокчейнів. ��ене цікавило, яким шляхом він піде - чи шардування, з його однорідністю, витісне рішення L2, чи рішення L2 з гетерогенним підходом наситить Ланцюг маяка та основні вузли мережі Ethereum.",
  "Today, in 2024, based on articles on ethereum.org, it seems that sharding as a concept has been pushed back, and the focus is on helping various L2 networks integrate with the Beacon Chain and align with the main chain's functionality, which is now divided into two elements in the Ethereum network's architecture.": "Сьогодні, у 2024 році, на основі статей на ethereum.org, здається, що шардування як концепція було відсунуто на другий план, і увага зосереджена на допомозі різним мережам L2 інтегруватися з Ланцюгом маяка та вирівнюватися з функціональністю основного ланцюга, який зараз розділений на два елементи в архітектурі мережі Ethereum.",
  "Therefore, without delving into the details of how L2 networks are structured—although we'll touch upon that when we fill in the second part of the board—we should imagine that Ethereum is now a kind of Beacon Chain, a beacon, a guiding star for numerous L2 networks. These L2 networks can have more specific functionality, executing their logic according to a set of individual functions. This is somewhat in line with the idea of a Swiss Army knife—not making Ethereum a Swiss Army knife, but L2 networks are starting to differentiate in architecture. They duplicate the functionality of the abstract computing machine of Ethereum but perform it with lower gas costs or within their specific segment. Some are already thinking about tuning and making their L2 layer more efficient, focusing on specific functional capabilities. Thus, in my opinion, we are witnessing the emergence of heterogeneity in the world computer that aimed to be homogeneous. Also, it's essential not to forget that decentralized applications (dApps) still exist within the main blockchain, within that same blockchain that started in 2015. This means that during the merge, during the transition to the new architectural state, there was no wipeout, no erasure of the previous history. All decentralized applications and smart contracts underlying these applications continued to exist, and they continue to exist today, and probably tomorrow. This is a question that we will explore using Polkadot as an example, but there is still a feeling that it will be possible to settle a decentralized application in the Beacon Chain—dApps.": "Отже, не заглиблюючись у деталі структури мережі L2 - хоча ми згадаємо про це, коли заповнимо другу частину дошки - ми повинні уявити, що Ethereum зараз є свого роду Ланцюгом Маяка, маяком, керівною зіркою для численних мереж L2. Ці мережі L2 можуть мати більш конкретну функціональність, виконуючи свою логіку відповідно до набору індивідуальних функцій. Це в певній мірі відповідає ідеї швейцарського ножа - не роблячи Ethereum швейцарським ножем, але мережі L2 починають відрізнятися за архітектурою. Вони дублюють функціональність абстрактної обчислювальної машини Ethereum, але виконують її з меншими витратами газу або в межах свого конкретного сегменту. Деякі вже думають про налаштування та зроблення свого L2 шару більш ефективним, зосереджуючись на конкретних функціональних можливостях. Таким чином, на мою думку, ми спостерігаємо за появою гетерогенності в світовому комп'ютері, який мав бути однорідним. Також важливо не забувати, що децентралізовані додатки (dApps) все ще існують в межах основного блокчейну, в межах того ж самого блокчейну, який розпочався у 2015 році. Це означає, що під час злиття, під час переходу до нового архітектурного стану, не було жодного видалення, жодного стирання попередньої історії. Усі децентралізовані додатки та смарт-контракти, що лежать в основі цих додатків, продовжують існувати, і вони продовжують існувати й сьогодні, і, можливо, завтра. Це питання, яке ми розглянемо на прикладі Polkadot, але все ще є відчуття, що бу��е можливо поселити децентралізований додаток в Ланцюгу Маяка - dApps.",
  "In summary, let's imagine the engineering implementation of today's Ethereum as a world computer. We have each network node consisting of two parts. The first layer is responsible for the Ethereum Virtual Machine (EVM), the actual functionality of the virtual machine or Turing complete machine, if we talk in theoretical terms. Perhaps we will see the emergence of alternatives to the virtual machine designed in 2015. These alternatives will likely surpass it in terms of more abstract programming possibilities than writing smart contracts in Solidity. Meanwhile, smart contracts in Solidity continue to feel comfortable. If you want to write functionality for the Ethereum main chain without creating any infrastructure on top of Ethereum, without offloading any calculations to make them cheaper, and so on, decentralized applications that you can write as smart contracts can still be housed in Ethereum's main blockchain. At the same time, Beacon Chain functionality has emerged, separating the consensus logic between validators from the main protocol of the computing machine. This allows for additional flexibility in how consensus should work and how it should be further modified without affecting the virtual machine itself. The example of Shanghai and Defcon 2, where a small opcode error caused a shutdown of part of the infrastructure, hints that it would be good to have such complex functionalities separated into two parts.": "На завершення, уявімо інженерну реалізацію сучасного Ethereum як світового комп'ютера. У нас є кожен мережевий вузол, що складається з двох частин. Перший шар відповідає за Ethereum Virtual Machine (EVM), фактичну функціональність віртуальної машини або машини з повним набором команд, якщо ми говоримо в теоретичних термінах. Можливо, ми побачимо появу альтернатив віртуальній машині, розробленій у 2015 році. Ці альтернативи, ймовірно, перевершать її за можливостями більш абстрактного програмування, ніж написання смарт-контрактів на Solidity. Тим часом смарт-контракти на Solidity продовжують відчувати себе комфортно. Якщо ви хочете написати функціональність для основного ланцюга Ethereum, не створюю��и будь-якої інфраструктури поверх Ethereum, не перенаправляючи жодних обчислень, щоб зробити їх дешевшими, то децентралізовані додатки, які ви можете написати як смарт-контракти, все ще можуть бути розміщені в основному блокчейні Ethereum. У той же час, з'явилася функціональність Ланцюгу Маяка, розділяючи логіку консенсусу між валідаторами від основного протоколу обчислювальної машини. Це дозволяє додаткову гнучкість у тому, як повинен працювати консенсус і як його слід подальше модифікувати, не впливаючи на саму віртуальну машину. Приклад Шанхаю та Defcon 2, де невелика помилка опкоду призвела до вимкнення частини інфраструктури, натякає на те, що було б добре мати такі складні функціональності розділені на дві частини.",
  "What's interesting about the Beacon Chain? It is a more complex, comprehensive algorithm for achieving network synchronicity and finalization with the introduction of concepts such as \"epoch,\" and the presence of a ghost living within the network.": "Що цікавого в Ланцюзі Маяка? Це більш складний, комплексний алгоритм для досягнення синхронізації мережі та фіналізації з введенням концепцій, таких як \"епоха\", та наявність привида, що живе в мережі.",
  "Lastly, what is important to consider now is that Ethereum is effectively putting an end to homogeneity, to the idea of getting a hundred identical blockchains working with the same virtual machine, where smart contracts written in Solidity can reside. Instead, various projects are proposing their own architectures or the same virtual machine taken beyond the main blockchain's limits. Alternatively, they are trying to build their more specific application, which, at the level of the Beacon Chain's main chain, is a smart contract written in Solidity. This is the current representation of Ethereum, which did not become Ethereum 2.0. It remains the same Ethereum—a project that once started with proof of work + Turing complete machine, transforming into this architecture.": "Нарешті, важливо зараз врахувати, що Ethereum фактично кінчає з однорідністю, з ідеєю роботи ста сотень ідентичних блокчейнів з однією віртуальною машиною, де смарт-контракти, написані на Solidity, можуть розміщуватися. Замість цього різні проекти пропонують свої власні архітектури або ту ж саму віртуальну машину, взяту за межі основного блокчейну. Або вони намагаються побудувати свою більш конкретну програму, яка, на рівні основного ланцюга Ланцюгу Маяка, є смарт-контрактом, написаним на Solidity. Це поточне представлення Ethereum, яке не стало Ethereum 2.0. Воно залишається тим самим Ethereum - проектом, який колись почався з доказу роботи + машини з повним набором команд, перетворюючись у цю архітектуру.",
  "Now, let's take a look at how Polkadot emerged and evolved over the last 5 years. Polkadot came into existence five years after Ethereum, born out of the team that developed one of the best clients for Ethereum—Parity. Many might remember their web client, which, compared to Geth and other implementations, was probably much more pleasant to work with, at least from personal experience and the experience of colleagues.": "Зараз давайте розглянемо, як Polkadot виник і розвивався протягом останніх 5 років. Polkadot з'явився через п'ять років після Ethereum, народився з команди, яка розробила одного з найкращих клієнтів для Ethereum - Parity. Багато хто може пам'ятати їх веб-клієнт, який, порівняно з Geth та іншими реалізаціями, був, мабуть, набагато приємніше працювати, принаймні з особистого досвіду та досвіду колег.",
  "In the end, after a couple of months of the relay chain's existence without any decentralized application functionality, without the ability to connect your parachain or L2 network, without user capabilities, the network transitioned from an authority state to proof of stake. This gave developers the ability to upload their runtimes.": "В кінці кінців, після кількох місяців існування реле-ланцюга без будь-якої функціональності децентралізованих додатків, без можливості підключення вашого паралельного ланцюга або мережі L2, без можливостей користувача, мережа перейшла від стану авторитету до доказу ставлення. Це дало розробникам можливість заванта��увати свої часи виконання.",
  "At this point, it's also interesting to discuss the differences between today's Ethereum and how the central part of Polkadot is structured. From the perspective of the heart, which we've already discussed, the picture will be absolutely the same not only for Ethereum and Polkadot but for any project that wants to be presented as an abstract computing machine. However, from an engineering and architectural standpoint, it's fascinating to observe Beacon Chain & Relay Chain. Here, we have a virtual machine, which has been inherited since 2015, but alternatives are being proposed. In the relay chain, there's the ability to upload your runtime. The runtime is, in fact, your virtual machine. For example, some parachains completely emulate the Ethereum Virtual Machine. It's written as a runtime, meaning you can essentially upload an Ethereum Virtual Machine analog to the parachain level in Polkadot or write more specific logic that works with four or five functions. Recall part one about the ideas— you can write your Swiss Army knife, but it won't require creating the entire infrastructure. You can implement specific functionality with certain functions at the runtime level, put it into the Polkadot relay chain, and the immutability of this runtime will be ensured by Polkadot validators.": "На цьому етапі також цікаво обговорити відмінності між сучасним Ethereum та тим, як структурований центральний елемент Polkadot. З точки зору серця, про яке ми вже говорили, картинка буде абсолютно такою ж не тільки для Ethereum та Polkadot, але й для будь-якого проекту, який хоче бути представлений як абстрактна обчислювальна машина. Однак з інженерної та архітектурної точки зору цікаво спостерігати Beacon Chain & Relay Chain. Тут ми маємо віртуальну машину, яка успадкована з 2015 року, але пропонуються альтернативи. У реле-ланцюзі є можливість завантажити свій час виконання. Час виконання, фактично, ваша віртуальна машина. Наприклад, деякі паралельні ланцюги повністю емулюють Ethereum Virtual Machine. Це написано як час виконання, що означає, що ви ф��ктично можете завантажити аналог Ethereum Virtual Machine на рівень паралельного ланцюга в Polkadot або написати більш конкретну логіку, яка працює з чотирма або п'ятьма функціями. Нагадайте частину першу про ідеї - ви можете написати свій швейцарський нож, але це не потребуватиме створення всієї інфраструктури. Ви можете реалізувати певну функціональність з певними функціями на рівні часу виконання, помістити її в реле-ланцюг Polkadot, і незмінність цього часу виконання буде забезпечена валідаторами Polkadot.",
  "What happens next? Over the course of about a year, a layer of parachains begins to form around the relay chain. In terms of Ethereum implementation, you could say that L2 networks are quite similar to parachains. However, there's one interesting cross-network distinction that I find fascinating in Polkadot, and I'm trying to further understand how it will develop—namely, the second layer of validation and data availability checks. After a couple of years, Polkadot takes a shape like this. It's not just a relay chain where proof-of-stake validators protect the runtime of future parachains; an additional and crucial layer of data validation and availability checking emerges from parachains.": "Що відбудеться далі? Протягом близько року навколо ретрансляційного ланцюжка починає формуватися шар парачейнів. З точки зору реалізації Ethereum, можна сказати, що мережі L2 досить схожі на парачейни. Однак є одна цікава перехресна відмінність між мережами, яку я вважаю захоплюючою в Polkadot, і я намагаюся краще зрозуміти, як вона розвиватиметься - а саме, другий шар перевірки та перевірки доступності даних. Через кілька років Polkadot набуває такої форми. Це не просто ретрансляційний ланцюжок, де валідатори доказу участі захищають робочий час майбутніх парачейнів; додатковий і важливий шар перевірки даних та перевірки доступності виникає з парачейнів.",
  "As you look at this diagram, try to notice the analogies that arise and the differences in engineering implementation details. So, what does this represent, and how does this scheme compare with Ethereum? We have an L2 project, in this case, with Polkadot, it's a parachain. A parachain also generates information blocks, which then go to the relay chain to be combined and release a relay chain block as the sum of all headers, headers, and more headers. The parachain collects transactions in a block using collators, which are not involved in validation. They don't stake anything in the relay chain; they only use the runtime, which is in the relay chain. They fetch it, apply it to transactions, perform necessary state transitions, form a block, and, crucially, provide proof of validity—a stamp containing cryptographic proofs that the collator correctly assembled the block. This information goes to the external validation ring of the relay chain. In this ring, there are internal validators of Polkadot—parachain collators. Again, they don't stake anything directly from the relay chain's point of view. Parachain implementations sometimes introduce their consensus among collators, and some don't. For example, in Robonomics, implementing a parachain, we find this paradigm more interesting, less burdensome, and it makes the network simpler while still remaining functionally substantial. Any collator, without reaching consensus with anyone—verified by us—can propose a block and some proof to the external layer. This is precisely why blocks are proposed, proofs of block assembly validity are offered, and there's an external ring. We don't need any consensus from parachain validators. Anyone can generate a block and send it, and if this node of the collator sends incorrect information to the parachain validators on the external ring, the validator at this level will reject it. It won't pass into the central part. But let's say the block was provided correctly by the collator. Our transactions got in; the collator calculated them, applying the runtime stored in the relay chain, executed all state transitions, gathered some proof of validity—validity of the assembled block—and passed it to the external ring of the relay chain. Here, every epoch, which is also part of the finalization, every epoch has validators from the relay chain diverging into parachains. Some of them stay in the center, and the others go to parachains. Their number ranges from 16 to 64 validators, and this figure, I believe, will change in the specification—somewhere more, somewhere less. However, parachain validators re-verify the information from one selected group of validators about everything coming from the collator being correct, that work has been done in accordance with the runtime, and that the proof of validity is indeed valid. The selected segment of relay chain validators who already have something staked respond, or rather, chirp among themselves. They respond to the chosen main block producer of the parachain, so to speak, saying,": "Подивіться на цю діаграму, спробуйте помітити аналогії, які виникають, і відмінності в деталях реалізації інженерії. Так що це представляє, і як ця схема порівнюється з Ethereum? У нас є проект L2, у цьому випадку з Polkadot, це парачейн. Парачейн також генерує інформаційні блоки, які потім йдуть на реле-ланцюг для об'єднання і випуску блоку реле-ланцюгу як суми всіх заголовків, заголовків і ще багато чого. Парачейн збирає транзакції в блок, використовуючи колатори, які не беруть участі в підтвердженні. Вони не ставлять нічого на реле-ланцюг; вони лише використовують рантайм, який знаходиться в реле-ланцюгу. Вони отримують його, застосовують до транзакцій, виконують необхідні переходи стану, формують ��лок і, що найважливіше, надають доказ про валідність - печатку, що містить криптографічні докази того, що колатор правильно зібрав блок. Ця інформація йде до зовнішнього кільця валідації реле-ланцюгу. У цьому кільці є внутрішні валідатори Polkadot - колатори парачейну. Знову ж таки, вони не ставлять нічого безпосередньо з точки зору реле-ланцюгу. Імплементації парачейнів іноді вводять свій консенсус серед колаторів, а деякі - ні. Наприклад, у Robonomics, реалізуючи парачейн, ми вважаємо цей парадигму більш цікавою, менш обтяжливою, і вона робить мережу простішою, залишаючись при цьому функціонально значущою. Будь-який колатор, не досягаючи консенсусу з ким-небудь - підтверджений нами - може запропонувати блок і деякі докази зовнішньому шару. Саме тому блоки пропонуються, пропонуються докази валідності зібраного блоку, і є зовнішнє кільце. Нам не потрібен жоден консенсус від валідаторів парачейну. Будь-хто може згенерувати блок і відправити його, і якщо цей вузол колатора надсилає невірну інформацію валідаторам парачейну на зовнішньому кільці, валідатор на цьому рівні відхилить його. Він не пройде в центральну частину. Але скажімо, що блок був наданий правильно колатором. Наші транзакції потрапили; колатор їх обчислив, застосувавши рантайм, збережений в реле-ланцюгу, виконав всі переходи стану, зібрав деякий доказ валідності - валідність зібраного блоку - і передав його на зовнішнє кільце ��еле-ланцюгу. Тут, кожна епоха, яка також є частиною фіналізації, кожна епоха має валідаторів з реле-ланцюгу, які розходяться в парачейни. Деякі з них залишаються в центрі, а інші йдуть в парачейни. Їх кількість коливається від 16 до 64 валідаторів, і ця цифра, я вважаю, зміниться в специфікації - десь більше, десь менше. Однак валідатори парачейну повторно перевіряють інформацію з однієї вибраної групи валідаторів про все, що надходить від колатора, що ця робота була виконана відповідно до рантайму, і що доказ валідності дійсно є валідним. Вибрані сегменти валідаторів реле-ланцюгу, які вже мають щось стейковане, відповідають, а точніше, щебечуть між собою. Вони відповідають вибраному головному виробнику блоків парачейну, так би мовити, кажуч��: ",
  "\"Yes, we agree. There are no problems. You can carry it through the entire external ring inside.\"": "\"Так, ми погоджуємося. Проблем немає. Ви можете пронести це через увесь зовнішній кільцевий шар всередині.\"",
  "And thus, almost all information formed on the parachain collators, with verification on the external ring, enters the internal one. The lower part, not that it's physically at the bottom, still constitutes the external ring—data availability. Data starts to be checked at this stage, meaning that on the external ring, not only the correctness of block assembly is verified, but the process of preparing for distribution within the Polkadot network begins, ensuring that the block information will not be lost in the future. Here, precisely, is what I mentioned in the second part about chunks, like CD RW. At this stage of block preparation for transfer to the internal ring, the data availability layer is formed as a service, something that is currently also attempted by some projects in Ethereum. Some projects put additional redundant information directly into smart contracts, necessary for checking what is happening on the L2 layer and, if necessary, slashing or punishing those who did it incorrectly. It's impossible to overcome the external ring without distributing block information and without rechecking dozens of nodes with stakes laid down on the assumption that the runtime must work correctly.": "І отже, майже вся інформація, що формується на колаторах парачейнів, з верифікацією на зовнішньому кільці, потрапляє внутрішнє. Нижня частина, не те, що вона фізично знаходиться внизу, все ще складає зовнішнє кільце - доступність даних. Дані починають перевірятися на цьому етапі, що означає, що на зовнішньому кільці перевіряється не лише правильність збирання блоків, але й починається процес підготовки до розподілу в мережі Polkadot, забезпечуючи, що інформація блоку не буде втрачена в майбутньому. Ось тут, саме те, про що я згадував у другій частині про шматки, як CD RW. На цьому етапі підготовки блоку для передачі на внутрішнє кільце формується шар доступності даних як сервіс, що в даний час тако�� намагаються зробити деякі проекти в Ethereum. Деякі проекти додають додаткову зайву інформацію безпосередньо в смарт-контракти, необхідну для перевірки того, що відбувається на рівні L2 і, за необхідності, зменшення або покарання тих, хто зробив це неправильно. Неможливо подолати зовнішнє кільце без розподілу інформації блоку і без повторної перевірки десятків вузлів з вкладами, зробленими на припущенні, що рантайм повинен працювати правильно.",
  "Thus, information that has passed through the external ring is already quite trustworthy, probably yes, you can say that, and on the internal ring, work is mainly done not with parachain blocks, but their block headers are collected into one big header. That is, from many headers, one header of a relay chain block is assembled—a mechanism of linking in Shared Security, as mentioned in Polkadot, which ensures the security of parachains. One could say that parachains are validated and reach a state where the service exists in a distributed decentralized form on the external ring. In the internal ring, the information that has entered attempts to come together in one hyperblock, which should precisely link everything together. There are no calculations happening there; there is no recalculation of absolutely everything. The assembly of the final block takes place, so to speak, in the current iteration of the world computer, to put a point on the question of whether the transaction has passed in a particular parachain. We must assemble a hyperblock that contains not all the information from the parachains but gathers all the headers verified on the external ring of parachains into one large block. And thus, our world computer in Polkadot operates.": "Отже, інформація, яка пройшла через зовнішнє кільце, вже досить надійна, можливо так, можна сказати, і на внутрішньому кільці, робота в основному ведеться не з блоками парачейнів, але їх заголовки блоків збираються в один великий заголовок. Тобто з багатьох заголовків формується один заголовок блоку ретрансляційного ланцюжка - механізм зв'язку в Спільній безпеці, як зазначено в Polkadot, який забезпечує безпеку парачейнів. Можна сказати, що парачейни перевірені і досягають стану, коли сервіс існує у розподіленій децентралізованій формі на зовнішньому кільці. На внутрішньому кільці інформація, що потрапила, намагається об'єднатися в один гіперблок, який повинен точно поєднати все разом. Там не відбуваються обчислення; там немає перерахунку абсолютно всього. Збирається остаточний блок, так би мовити, в поточній ітерації світового комп'ютера, щоб поставити крапку на питанні, чи пройшла транзакція в певному парачейні. Нам потрібно зібрати гіперблок, який містить не всю інформацію з парачейнів, але збирає всі заголовки, перевірені на зовн��шньому кільці парачейнів, в один великий блок. І отже, наш світовий комп'ютер в Polkadot працює.",
  "Let's take another look at these two schemes together: relay chain, beacon chain, runtime, secured by proof of stake, where someone stakes their funds to validate that they will always perform their work correctly. There's a virtual machine where you can also stake your funds, and if you perform any computation or state transition not in accordance with the Ethereum Virtual Machine's specification, you'll be penalized.": "Давайте ще раз поглянемо на ці дві схеми разом: ланцюжок ретрансляції, ланцюжок маяка, рантайм, захищений доказом участі, де хтось ставить свої кошти для підтвердження того, що вони завжди будуть виконувати свою роботу правильно. Є віртуальна машина, де ви також можете ставити свої кошти, і якщо ви виконуєте будь-які обчислення або перехід стану, які не відповідають специфікації Віртуальної машини Ethereum, вас буде покарано.",
  "In Polkadot, there's an additional external layer, which seems to be one of the main advantages, such pleasant perks of the engineering implementation that, in my opinion, should be present here. It should appear between L2 networks and the beacon chain, which exists in Ethereum. By the way, some say that the term \"beacon chain\" is dying out again and is misunderstood, but I really like to use it in analogy with the \"relay chain,\" a term from Ethereum's roadmap.": "У Polkadot є додатковий зовнішній шар, який, здається, є однією з основних переваг, такими приємними перевагами інженерної реалізації, які, на мою думку, повинні бути тут присутні. Він повинен з'явитися між мережами L2 та ланцюжком маяка, який існує в Ethereum. До речі, деякі кажуть, що термін \"ланцюжок маяка\" знову вмирає і неправильно розуміється, але мені дуже подобається використовувати його в аналогії з \"ланцюжком ретрансляції\", терміном з дорожньої карти Ethereum.",
  "And perhaps one more interesting story in this part of the lecture: so far, we can hardly imagine proper cross-chain messages between L2 networks in Ethereum. Maybe I missed something in the papers, but when you don't have an external ring and issues like collators, paravalidators, and data availability services are not resolved, thinking about how two L2 layers can communicate is challenging. Yet, in Polkadot, it exists. Even horizontally, through the relay chain, meaning directly, one can send a transaction securely from one parachain to another, without trusting any bridges between these two parachains. This is another crucial functionality that will likely need to be implemented at the level of connecting L2 networks. Smart contracts in Ethereum communicate well. We have created many chains of linked smart contracts, where one triggers another. With this, there is no problem. But when we say that almost all applications are moving to the L2 layer in a heterogeneous network, I hear that if you live in a specific area, you won't be able to get out. That's not the case at the level of parachains and implementation in Polkadot. Both architectures are worth watching, as, in my opinion, the engineering implementation follows the mainstream path of becoming a global computer. They differ slightly, but there are many similarities. There's an enormous amount of engineering work everywhere. As we see, human civilization, in the form of a multitude of researchers, engineers, and growing developers with significant resources for further development, is moving roughly in the same direction from the smallest early stage to probably some future establishment of the world's computer, all on the same tracks.": "І, можливо, ще одна цікава історія в цій частині лекції: до цього моменту ми мало можемо уявити належні перехресні ланцюжкові повідомлення між L2 мережами в Ethereum. Можливо, я щось пропустив у наукових статтях, але коли у вас немає зовнішнього кільця і питання, такі як колатори, пара-валідатори та служби доступності даних, не вирішені, думати про те, як два L2 шари можуть спілкуватися, важко. Однак у Polkadot це існує. Навіть горизонтально, через реле-ланцюжок, означаючи безпосередньо, можна надіслати транзакцію безпечно з одного параланцюжка в інший, не довіряючи будь-яким мостам між цими двома параланцюжками. Це ще одна важлива функціональність, яка, ймовірно, потрібно буде реалізувати на рівні під��лючення L2 мереж. Розумні контракти в Ethereum добре спілкуються. Ми створили багато ланцюжків зв'язаних розумних контрактів, де один спрацьовує інший. З цим проблем немає. Але коли ми кажемо, що майже всі додатки переходять на рівень L2 в гетерогенній мережі, я чую, що якщо ви живете в певній області, ви не зможете вийти. Це не відбувається на рівні параланцюжків та реалізації в Polkadot. Обидва архітектури варто спостерігати, оскільки, на мою думку, інженерна реалізація йде шляхом становлення глобального комп'ютера. Вони трохи відрізняються, але є багато схожостей. Всюди величезна кількість інженерної роботи. Як ми бачимо, людська цивілізація, у вигляді множини дослідників, інженерів та зростаючих розробників з значними ресурсами для подальшого розвитку, рухається приблизно в одному напрямку від найменшого раннього етапу до, ймовірно, якогось майбутнього створення світового комп'ютера, все на тих самих коліях.",
  "Part 1: The Idea of a World Computer": "Частина 1: Ідея світового комп'ютера",
  "This is the first part of a four-part lecture titled \"World Computer in Your Home.\" In the first part, titled \"The Idea of a World Computer,\" I want to analyze and share my own reflections that have, in a broader historical context, gathered around the hashtag \"world computer.\"": "Це перша частина чотирьох частин лекції під назвою \"Світовий комп'ютер у вашому домі.\" У першій частині, під назвою \"Ідея світового комп'ютера,\" я хочу проаналізувати і поділитися своїми власними роздумами, які, в більш широкому історичному контексті, зібралися навколо хештегу \"світовий комп'ютер.\"",
  "To begin with, let's try to gather a generalized understanding of what a world computer is, without delving into terminology or specific technical details. If you take your mobile phone in hand and look at the icons, you can notice that practically every application on the phone has two major segments or areas of operation.": "Почнемо з того, щоб спробувати зібрати узагальнене розуміння того, що таке світовий комп'ютер, не заглиблюючись у термінологію або конкретні технічні деталі. Якщо взяти ваш мобільний телефон в руку і подивитися на піктограми, ви можете помітити, що практично кожне застосування на телефоні має дві основні частини або області діяльності.",
  "The first is the local part, meaning, for example, your calculator or notes application. This is a completely local application that requires almost no external communication. Although even applications like the notes app on an iPhone are a bit more than that, let's focus on the more austere Open Source side of applications for Android phones, so to speak.": "Перша - це місцева частина, що означає, наприклад, ваш калькулятор або застосунок для нотаток. Це абсолютно місцеве застосування, яке практично не потребує зовнішнього зв'язку. Хоча навіть застосунки, як застосунок для нотаток на iPhone, трохи більше, ніж це, давайте зосередимося на більш суворому відкритому вихідному коді застосунків для телефонів на базі Android, так би мовити.",
  "The second part requires cloud infrastructure, and here, when the question of cloud infrastructure arises, a multitude of quite complex stories begins: who owns this cloud infrastructure, what capabilities do developers have to add features to an application, and in general, how does the user own this application? What capabilities and responsibilities does the user have when dealing with an application that exists not only on their phone but also in some infrastructure beyond their pocket or palm? The world computer is precisely one example of how the developer community responds to these obvious questions. Obvious questions about creating higher-quality applications for your mobile phone, laptop, server, and any other smart device that needs to connect to the network and obtain knowledge from there.": "Друга частина потребує хмарної інфраструктури, і тут, коли постає питання про хмарну інфраструктуру, починається безліч досить складних історій: кому належить ця хмарна інфраструктура, які можливості мають розробники для додавання функцій до застосунку, і взагалі, як користувач володіє цим застосунком? Які можливості та відповідальності має користувач при роботі з застосунком, який існує не лише на їх телефоні, але й у якійсь інфраструктурі поза їх кишенею або долонею? Світовий комп'ютер - це саме один приклад того, як розробницька спільнота відповідає на ці очевидні питання. Очевидні питання про створення високоякісних застосунків для вашого мобільного телефону, ноутбука, сервера та будь-якого іншого розумного пристрою, який потребує підключення до мережі та отримання знань звідти.",
  "The world computer is, accordingly, the same cloud, the same infrastructure that exists on the internet, with which developers can interact and publish their applications. As a user, you can install, download, and run them on your PC. However, with one interesting, crucial feature: no one actually owns the infrastructure or cloud of the world computer. There is no specific company, jurisdiction, or individual on Earth who can determine and say whether you can publish your application there or not, whether you have the right to access this world computer infrastructure to receive the provided service. Therefore, the world computer is a cloud in which any developer can place their application, and any user with access solely to the internet network and not to a specific IP address behind a firewall can use the application by paying for computations from their pocket.": "Світовий комп'ютер, відповідно, є тією ж самою хмарою, тією ж інфраструктурою, яка існує в Інтернеті, з якою розробники можуть взаємодіяти та публікувати свої додатки. Як користувач, ви можете встановлювати, завантажувати та запускати їх на своєму ПК. Однак з однією цікавою, важливою функцією: ніхто фактично не володіє інфраструктурою або хмарою світового комп'ютера. Немає конкретної компанії, юрисдикції або особи на Землі, яка може визначити та сказати, чи можете ви публікувати свою програму там чи ні, чи маєте ви право на доступ до цієї інфраструктури світового комп'ютера для отримання наданої послуги. Тому світовий комп'ютер - це хмара, в якій будь-який розробник може розмістити свою програму, а будь-який користувач з доступом виключно до мережі Інтернет, а не до конкретної IP-адреси за брандмауером, може використовувати програму, оплачуючи обчислення зі свого кишені.",
  "Here's the story in a generalized format. There is no mention of \"blockchain,\" no mention of \"smart contracts,\" but these concepts are underneath. Let's still acknowledge: a world computer is a cloud infrastructure that is sovereign, owned by no one, allowing each developer to avoid censorship from platform owners offering app downloads. It also prevents users from being in a situation where they don't understand how an app works on their phone. In my opinion, these are important and cool features deserving respect and attention from those who want to create more futuristic, cooler applications. This is precisely what my team and I have been doing for eight years, choosing perhaps the most challenging area - creating services for robotics on the world computer, which seems to be right outside your door, quietly scraping and saying, \"I want to come into your home.\"": "Ось історія у загальному форматі. Немає згадки про \"блокчейн,\" немає згадки про \"смарт-контракти,\" але ці концепції лежать в основі. Давайте все-таки визнаємо: світовий комп'ютер - це хмарна інфраструктура, яка є суверенною, належить нікому, дозволяючи кожному розробнику уникнути цензури від власників платформ, що пропонують завантаження додатків. Це також запобігає користувачам потрапляти в ситуацію, коли вони не розуміють, як працює додаток на їх телефоні. На мою думку, це важливі та круті функції, які заслуговують на повагу та увагу від тих, хто хоче с��ворювати більш майбутнісні, крутіші додатки. Саме цим ми з моєю командою займалися вже вісім років, обираючи, можливо, найбільш складну область - створення сервісів для робототехніки на світовому комп'ютері, який, здається, знаходиться прямо за вашими дверима, тихо скребучи і кажучи: \"Я хочу увійти до вашого дому.\"",
  "Now, let's move on to a timeline and look through my personal experience at how the concept of the world computer evolved. First, let's go back to 2012. This year is notable because Bitcoin already exists as a global internet service, accessible to everyone, not owned by anyone specific. By 2012, besides Bitcoin, its so-called forks start appearing. One of the most well-known is Litecoin.": "Тепер давайте перейдемо до хронології та розглянемо мій особистий досвід того, як еволюціонував концепція світового комп'ютера. Спочатку давайте повернемося до 2012 року. Цей рік відзначний тим, що Bitcoin вже існує як глобальна інтернет-послуга, доступна всім, не належить нікому конкретному. Крім Bitcoin, до 2012 року починають з'являтися його так звані форки. Один з найвідоміших - Litecoin.",
  "Litecoin is notable because its developer did the most important work for the entire community. He collected the most crucial configurable variables or constants from different parts of Bitcoin's code after the protocol was launched. This allowed specifying block generation time, block reward, and, statistically, Litecoin is more frequently forked than Bitcoin. When we say \"fork of Bitcoin,\" I can confidently say that, in most cases, it will be a fork of Litecoin.": "Litecoin відзначний тим, що його розробник виконав ��айважливішу роботу для всього співтовариства. Він зібрав найважливіші змінні або константи з різних частин коду Bitcoin після запуску протоколу. Це дозволило вказати час генерації блоку, винагороду за блок, і, статистично, Litecoin частіше форкують, ніж Bitcoin. Коли ми говоримо про \"форк Bitcoin,\" я можу впевнено сказати, що, в більшості випадків, це буде форк Litecoin.",
  "Namecoin is also a fork of Bitcoin, and if memory serves me right, it was initially a direct fork from Bitcoin, and then Litecoin appeared a few months later in 2011. However, Namecoin turned out to be a bit different, paving the way for many developers mentally on where ideas underlying Bitcoin's internet service could evolve. Namecoin went beyond being just a coin; it could store identity as a database and allow an internet service to place your domain name. This was the first example where an internet service spawned from Bitcoin could have a different nature, not just like Litecoin with fast transactions but the ability to pay for storing certain information with its internal currency, an internal token. For example, the name in the .bit domain zone.": "Namecoin також є відгалуженням від Bitcoin, і якщо пам'ять мене не підводить, спочатку воно було прямим відгалуженням від Bitcoin, а потім через кілька місяців у 2011 році з'явився Litecoin. Однак Namecoin виявився трохи відмінним, відкриваючи шлях для багатьох розробників у ментальному плані, де ідеї, що лежать в основі інтернет-сервісу Bitcoin, могли розвиватися. Namecoin вийшов за межі простої монети; він міг зберігати ідентичність як базу даних і дозволяти інтернет-сервісу розміщати ваш доменне ім'я. Це був перший приклад, коли інтернет-сервіс, створений на основі Bitcoin, міг мати інший характер, не просто як Litecoin зі швидкими транзакціями, але з можливістю оплати зберігання певної інформації власною внутрішньою валют��ю, внутрішнім токеном. Наприклад, ім'я в доменній зоні .bit.",
  "Developers worldwide were experimenting with Bitcoin, mostly creating forks, making them faster, cheaper electronic cash. Alongside this, the first services appeared, seeing opportunities not only in financial applications but also in cross-industrial applications in other areas like Namecoin. Namecoin provided the first globally accessible and unowned internet service through which you could launch your website without being under the jurisdiction of a specific organization but within a distributed globally accessible network. This moment is crucial for us to move on to the early precursors of the world computer's ideas.": "Розробники по всьому світу експериментували з Bitcoin, в основному створюючи відгалуження, роблячи їх швидшими, дешевшими електронними грошима. Паралельно з цим з'явилися перші сервіси, бачачи можливості не лише в фінансових застосуваннях, але й в міжгалузевих застосуваннях в інших галузях, таких як Namecoin. Namecoin надав перший глобально доступний та невласний інтернет-сервіс, через який ви могли запустити свій веб-сайт, не перебуваючи під юрисдикцією конкретної організації, але в межах розподіленої глобально доступної мережі. Цей момент є важливим для нас, щоб перейти до ранніх передвісників ідей світового комп'ютера.",
  "The first practical ideas of the world computer emerged in 2014, two years after the appearance of the first wave of Bitcoin forks and the creation of meaningful services dedicated not only to electronic cash but also exploring broader themes. We encounter ideas that precede the launch of Ethereum.": "Перші практичні ідеї світового комп'ютера виникли в 2014 році, чере�� два роки після появи першої хвилі відгалужень Bitcoin та створення значущих сервісів, присвячених не лише електронним грошам, але й досліджуючи більш широкі теми. Ми стикаємося з ідеями, що передують запуску Ethereum.",
  "In 2014, at several meetups worldwide, in Miami and, I believe, in Europe, Vitalik Buterin articulated sensible ideas. He suggests that we can develop not just a set of internet services that essentially function as a Swiss army knife, right? We can develop a virtual machine. Those with an education in Computer Science probably remember what an infinite tape is in Turing machines, and if we go back to the theory of computational machines, we probably recall the theoretical origins of creating our personal computers, essentially the server infrastructure we have today. It's interesting that, fifty years after the development of von Neumann architecture and the complete Turing machine theory, and with the dawn of internet technologies only by 2014, and only after experiments with Bitcoin, the first idea emerges on our planet of creating a fully virtual computational machine based on the same theory that has been tested in the computer science industry for the past 50 years. The mechanics are the same as when creating any personal computer or server in a data center, but based more on achievements in internet technologies and the achievements of the world that will later be called Web3.": "У 2014 році на кількох зустрічах по всьому світу, в Маямі і, я вважаю, в Європі, Віталік Бутерін висловив розумні ідеї. Він пропонує, що ми можемо розвивати не лише набір інтернет-сервісів, які в основному функціонують як швейцарський ножик, чи не так? Ми можемо розробити віртуальну машину. Ті, хто мають освіту в галузі комп'ютерних наук, ймовірно, пам'ятають, що таке нескінченна стрічка в машинах Тьюрінга, і якщо ми повернемося до теорії обчислювальних машин, ми, ймовірно, згадаємо теоретичні походження створення наших персональних комп'ютерів, в основному інфраструктури сервера, яку ми маємо сьогодні. Цікаво, що, після розвитку архітектури фон Неймана та повної теорії машин Тьюрінга, і з початком інтернет-технологій лише до 2014 року, і лише після експериментів з Bitcoin, на нашій планеті виникає перша ідея створення повністю віртуальної обчислювальної машини на основі тієї ж теорії, яка була перевірена в галузі комп'ютерних наук протягом останніх 50 років. Механіка така сама, як при створенні будь-якого персонального комп'ютера або сервера в центрі обробки даних, але базується більше на досягненнях в інтернет-технологіях та досягненнях світу, який пізніше буде називатися Web3.",
  "Ethereum itself is not a Swiss army knife, not a set of specific internet services. It is, in the direct sense, a cloud, a computational machine. What lies at its core, I will tell you in the next lecture. Here, the most important thing for us is to focus on where the idea of Ethereum began. It started with the realization that, in two years, dozens of different internet services were invented that were interesting because they were globally accessible, available without censorship for developers to deploy. Users could use them only with an internal currency. However, what was not liked in all these concepts was that almost every interesting service required its own massive distributed infrastructure. Unlike familiar internet services, you couldn't just launch your globally accessible infrastructure if you were a very small person or a small team because such a network would be vulnerable, and the service itself would become unsafe. To overcome the problems that were side effects or negative externalities of creating your own globally accessible sovereign internet service, the concept of Ethereum emerged. Ethereum, as a full-fledged cloud capable of handling any formalized computation, allows you to write your program code, a complete program essentially, and run it in the same blockchain alongside hundreds of other applications. This possibility, sounding from the small stages of 2014, naturally captivated the minds of many and seemed absolutely logical for someone with a basic education in Computer Science. If you could understand what Turing completeness was by 2014, if you could envision the historical theory of creating a personal computer, you would definitely not overlook the Ethereum whitepaper and would say that this is exactly what the entire developer community needs.": "Сам Ethereum не є швейцарським кишеневим ножем, не набіром конкретних інтернет-сервісів. Це, в прямому сенсі, хмара, обчислювальна машина. Що лежить в його основі, я розповім вам на наступній лекції. Тут для нас найважливіше зосередитися на тому, де почалася ідея Ethereum. Все почалося з реалізації того, що за два роки було винайдено десятки різних інтернет-сервісів, які були цікаві тим, що були глобально доступні, доступні без цензури для розробників для розгортання. Користувачі могли використовувати їх тільки з внутрішньою валютою. Однак у всіх цих концепціях не подобалося те, що майже кожен цікавий сервіс вимагав власної масштабної розподіленої інфраструктури. На відміну від звичайних інтернет-сервісів, ви не могли просто запустити свою глобально доступну інфраструктуру, якщо ви були дуже малою людиною або малою командою, оскільки така мережа була б вразливою, і сам сервіс став би небезпечним. Щоб подолати проблеми, які були побічними ефектами або негативними зовнішніми ефектами створення власного глобально доступного суверенного інтернет-сервісу, з'явилася концепція Ethereum. Ethereum, як повноцінна хмара, здатна обробляти будь-які формалізовані обчислення, дозволяє вам писати свій програмний код, повну програму в суті, і запускати його в тій же блокчейні поряд з сотнями інших програм. Ця можливість, що звучала з початкових стадій 2014 року, природно зачарувала розуми багатьох і здавалася абсолютно логічною для тих, хто має базову освіту в галузі комп'ютерних наук. Якщо ви могли зрозуміти, що таке повна обчислювальна повнота до 2014 року, якщо ви могли уявити історичну теорію створення персонального комп'ютера, ви однозначно не пропустили білий папір Ethereum і сказали б, що це саме те, що потрібно всій розробницькій спільноті.",
  "I believe the year 2014 and Ethereum mark the first, though not explicitly named, instances of the concept of a global computer. It started with the idea that we don't need a Swiss knife; instead, we need infrastructure or a universal cloud that addresses global-level security challenges. Developers, at a low cost, should be able to deploy their applications there without concerning themselves with issues like securing the network or creating a network of providers for this computer or your specific internet service.": "Я вважаю, що рік 2014 року і Ethereum позначають перші, хоча не явно названі, випадки концепції глобального комп'ютера. Все почалося з ідеї, що нам не потрібен швейцарський ніж; замість цього нам потрібна інфраструктура або універсальна хмара, яка вирішує проблеми безпеки на глобальному рівні. Розробники за невеликі кошти повинні мати можливість розгортати свої додатки там, не турбуючись про такі питання, як забезпечення мережі або створення мережі постач��льників для цього комп'ютера або вашого конкретного інтернет-сервісу.",
  "In 2015, Ethereum was effectively launched. From that moment onwards, even until 2020, I haven't encountered significant counterarguments against the idea of creating not just specific internet services but embracing and developing the concept of a virtual computer, virtual server, cloud, or a global computer, as I prefer to call it.": "У 2015 році Ethereum був ефективно запущений. З того моменту і до 2020 року я не зустрів значних контраргументів проти ідеї створення не лише конкретних інтернет-сервісів, але й прийняття та розвиток концепції віртуального комп'ютера, віртуального сервера, хмари або глобального комп'ютера, як я вважаю за краще його називати.",
  "Various variations emerge, perhaps some remember the then-popular EOS suggesting a slightly different consumption paradigm. Despite my personal aversion to that project, with its 21st validator and all, it seemed sufficient for many. But it introduced the idea that owning tokens grants you a portion of bandwidth, which, in the realm of Robonomics architecture, remains interesting to me to this day.": "Виникають різні варіації, можливо, дехто пам'ятає тоді популярний EOS, який пропонував трохи інший парадигму споживання. Незважаючи на мою особисту антипатію до цього проекту, з його 21-м валідатором і всім цим, це здавалося достатнім для багатьох. Але він вніс ідею того, що володіння токенами надає вам частку пропускної здатності, що, в рамках архітектури Robonomics, залишається цікавим для мене й до цього дня.",
  "Simultaneously, other ideas on how to modernize the Ethereum network arise. Projects like Definity, Solana, and others come into play. Around the same time, Gavin Wood introduces Polkadot, who assisted Vitalik in creating Ethereum. From a multitude of technological projects between 2015 and 2020, we move from a race to create individual internet service variants to witnessing, on a communication protocol level, the emergence of something like Ethereum killers. Many projects started under this slogan, taking the idea of a unified cloud for multiple internet services and modifying some aspects. For instance, EOS proposed an alternative utilization scheme, where only token-backed ownership allowed access to bandwidth. There were projects where the programming language for writing code was more interesting. For example, during a hackathon for BMW, when we won with an implementation on Ethereum, the automaker immediately stated that we wouldn't go any further unless we had formally verified contracts, which was impossible to achieve on Ethereum at that time.": "Одночасно виникають інші ідеї щодо модернізації мережі Ethereum. Проекти, такі як Definity, Solana та інші, вступають в гру. Приблизно в той же час Гевін Вуд представляє Polkadot, який допоміг Віталіку у створенні Ethereum. З великої кількості технологічних проектів між 2015 та 2020 роками ми переходимо від гонки за створенням окремих варіантів інтернет-сервісів до спостереження, на рівні протоколу зв'язку, виникнення чогось на зразок вбивць Ethereum. Багато проектів розпочалися під цим гаслом, взявши ідею єдиного хмарного сервісу для кількох інтернет-сервісів та модифікувавши деякі аспекти. Наприклад, EOS запропонував альтернативну схему використання, де доступ до пропускної здатності надавався лише власникам то��енів. Були проекти, де мова програмування для написання коду була цікавішою. Наприклад, під час хакатону для BMW, коли ми перемогли з реалізацією на Ethereum, автовиробник відразу заявив, що ми не підемо далі, якщо у нас не будуть формально підтверджені контракти, що було неможливо досягти на Ethereum в той час.",
  "At this moment, as you read about the ideas of Eternity and other networks, you may think, \"I should try working with them too.\" Service developers understood this, as did, as I mentioned, projects like Definity, which recently launched the World Computer and is gaining traction. Simultaneously, the idea of Polkadot emerges as a heterogeneous multi-chain framework. Ethereum, around the mid-2010s, also received a roadmap for scalability and development. By 2024, almost all concepts converge on the idea of having not just one database or blockchain but a multitude. Various transaction processing methods, two-layer consensus algorithms, optimistic majority approaches, and a plethora of technical implementation variations emerge, all aiming at the same global computer concept.": "У цей момент, коли ви читаєте про ідеї Eternity та інших мереж, ви можете подумати: \"Мені слід спробувати працювати з ними також\". Розробники сервісів зрозуміли це, як і проекти, такі як Definity, які недавно запустили Світовий Комп'ютер та набирають обертів. Одночасно виникає ідея Polkadot як гетерогенна багатоланкова структура. Ethereum, приблизно в середині 2010-х років, також отримав дорожню карту для масштабованості та розвитку. До 2024 року майже всі конц��пції збігаються на ідеї мати не лише одну базу даних або блокчейн, але багато. Різноманітні методи обробки транзакцій, двошарові алгоритми консенсусу, оптимістичні підходи більшості та безліч варіацій технічної реалізації виникають, всі спрямовані на той самий глобальний комп'ютерний концепт.",
  "Let's now go through a timeline snapshot:": "Давайте тепер розглянемо знімок часової шкали:",
  "**2009-2012**: Emergence of the first globally accessible internet service for electronic cash - Bitcoin.": "**2009-2012**: Виникнення першого глобально доступного інтернет-сервісу для електронних грошей - Bitcoin.",
  "**Early 2012**: The first fork war occurs, with projects emerging to replicate similar services. Some multi-billion projects create their forks. Simultaneously, projects like Namecoin propose interesting ideas.": "**Початок 2012 року**: Відбувається перший військовий розділ, з проектами, що виникають для реплікації схожих сервісів. Деякі мультимільярдні проекти створюють свої форки. Одночасно проекти, такі як Namecoin, пропонують цікаві ідеї.",
  "**2014**: The concept of a world computer emerges, requiring a deep understanding of computer science theory and immersion in Bitcoin's development.": "**2014**: Виникає концепція світового комп'ютера, яка потребує глибокого ро��уміння теорії комп'ютерних наук та поглиблення в розвиток Bitcoin.",
  "**2015-2020**: The concept moves from theory to practice. Modifications and variations of Ethereum arise, introducing different ideas with varying degrees of quality. The term \"World Computer\" became established.": "**2015-2020**: Концепція переходить від теорії до практики. Виникають модифікації та варіації Ethereum, які вводять різні ідеї з різними ступенями якості. Термін \"Світовий Комп'ютер\" став усталеним.",
  "**2024**: We reach the World Computer, a term now well-established, marking the transition from a simple calculator on your phone to a globally accessible institution. The idea of the World Computer encompasses future money, programming money, storage for identification records, and important documents.": "**2024**: Ми досягаємо Світового Комп'ютера, термін, який зараз добре встановлений, позначаючи перехід від простого калькулятора на вашому телефоні до глобально доступного закладу. Ідея Світового Комп'ютера охоплює майбутні гроші, програмування грошей, зберігання ідентифікаційних записів та важливих документів.",
  "In conclusion, from a simple calculator to a globally accessible institution, the idea of the World Computer has evolved. It's seen as a place for the future of money and the storage of vital records. The concept of a World Computer has progressed from theoretical discussions to practical engineering implementations. In the next lecture, the discussion will delve into what a World Computer actually represents. It is fundamentally a state transition function, a concept to be explored further in the upcoming lecture, emphasizing its importance and the need to safeguard it.": "На завершення, від простого калькулятора до глобально доступного закладу, ідея Світового Комп'ютера еволюціонувала. Його розглядають як місце для майбутніх грошей та збері��ання важливих записів. Концепція Світового Комп'ютера просунулася від теоретичних обговорень до практичних інженерних реалізацій. У наступній лекції обговорення буде зосереджено на тому, що насправді представляє собою Світовий Комп'ютер. Це фундаментальна функція переходу стану, концепція, яку слід досліджувати далі в майбутній лекції, підкреслюючи її важливість та необхідність захисту.",
  "Part 2: The Heart of the World Computer": "Частина 2: Серце світового комп'ютера",
  "What lies at the core of projects like Ethereum or Polkadot, or any other web3 project claiming the title of the world computer, and why does the comparison with the heart in the human body fit so well into the abstract architecture of the world computer?": "Що лежить в основі проектів, таких як Ethereum або Polkadot, або будь-якого іншого проекту web3, який претендує на звання світового комп'ютера, і чому порівняння з серцем в людському тілі так добре вписується в абстрактну архітектуру світового комп'ютера?",
  "Let's try to understand these questions in this part of the lecture, and to begin with, we'll have to break the chains of Bitcoin maximalists a bit. Most likely, you've already read one or several popular science articles dedicated to Bitcoin in your life, and the main thing that is practically noted everywhere is the three main advantages of Bitcoin as electronic cash:": "Давайте спробуємо зрозуміти ці питання в цій частині лекції, і для початку нам треба трохи відірватися від біткойн-максималістів. Ймовірно, ви вже читали одну або кілька популярно-наукових статей, присвячених біткоїну у своєму житті, і головне, що практично відзначається скрізь, це три основні переваги біткоїну як електронних грошей:",
  "Censorship resistance": "Стійкість до цензури",
  "Immutability of data stored in the Bitcoin blockchain": "Незмінність даних, збережених у блокчейні бітко��ну",
  "Transparency of transactions": "Прозорість транзакцій",
  "Let's quickly go through each of these properties, and most importantly, at the end, we'll need to step back a bit from them, as the world computer inherits them as some kind of successor to Bitcoin.": "Давайте швидко пройдемося кожною з цих властивостей, і, що найважливіше, в кінці нам треба трохи відступити від них, оскільки світовий комп'ютер успадковує їх як свого роду спадкоємця біткоїну.",
  "**Firstly**, immutability of data. Of course, this property, from the perspective of electronic cash, has significant advantages and importance. After you send a transaction or receive bitcoins, after one or two blocks, you gradually begin to feel the immutability of data in the blockchain. In the first 15 minutes, you can observe, using a blockchain explorer, how the transaction should settle. You already see it in the network, but it is not finalized, meaning these bitcoins are not yet in your account. However, after several blocks, there is confidence that these funds will not disappear from your account. As time passes, the probability of values being somehow overwritten from your account becomes almost negligible, practically reducing to zero. This is our property of data immutability. How cool it is when you can share information with the recipient, send them a link to the blockchain explorer, and you don't need to obtain any paper or document from the bank stating that you sent a payment on a certain date and time - this is the second advantage of Bitcoin that is very helpful in practice and is probably the most pleasant perk when comparing a bank transfer and a Bitcoin transfer.": "**По-перше**, незмінність даних. Звичайно, ця властивість, з точки зору електронних грошей, має значні переваги і важливість. Після того, як ви відправите транзакцію або отримаєте біткоїни, після одного або двох блоків ви поступово починаєте відчувати незмінність даних у блокчейні. Протягом перших 15 хвилин ви можете спостерігати, використовуючи дослідник блокчейну, як транзакція повинна вирішитися. Ви вже бачите це в мережі, але воно не закінчене, що означає, що ці біткоїни ще не на вашому рахунку. Однак після кількох б��оків ви впевнені, що ці кошти не зникнуть з вашого рахунку. З плином часу ймовірність того, що значення будуть якось перезаписані з вашого рахунку, стає майже незначною, практично зводячись до нуля. Це наша властивість незмінності даних. Як це круто, коли ви можете поділитися інформацією з отримувачем, надіслати їм посилання на дослідник блокчейну, і вам не потрібно отримувати жодних паперів або документів від банку, які підтверджують, що ви відправили платіж у певну дату і час - це друга перевага біткоїну, яка дуже допомагає на практиці і, ймовірно, є найприємнішим бонусом при порівнянні банківського переказу та переказу біткоїну.",
  "**Secondly**, transparency of transactions. There is practically no fear when using Bitcoin that you will find yourself in a region of the world or connected to an internet provider through which you cannot perform operations with the Bitcoin network. There are practically no options other than locking you in a dark room without internet access so that you cannot use the Bitcoin network.": "**По-друге**, прозорість транзакцій. Практично немає страху при використанні біткоїну, що ви опинитеся в регіоні світу або підключитеся до постачальника Інтернету через який ви не зможете виконувати операції з мережею біткоїну. Практично немає варіантів, окрім того, що вас замкнуть у темній кімнаті без доступу до Інтернету, щоб ви не могли використовувати мережу біткоїну.",
  "These three properties are, of course, very important. Now, in order to understand the question \"What is at the heart of the world computer,\" we will need to step back from them, abstract ourselves, and make a small leap of faith, a jump, approximately, 100 years back to the 1930s.": "Ці три властивості, звичайно, дуже важливі. Тепер, щоб зрозуміти питання \"Що є в основі світового комп'ютера,\" нам потрібно відступити від них, абстрагуватися і зробити невеликий стрибок віри, стрибок, приблизно, на 100 років назад до 1930-х.",
  "In 1936, Alan Turing made a proposal to the scientific community to solve the formalization problem and, in fact, a more qualitative description of such a concept as an algorithm. Interestingly, from Alan Turing's proposal, the architecture and development of all computer science in the future emerged, but he in no way pursued the idea of creating a personal computer, and he knew nothing about data centers or clouds. His task was to provide a way to define an algorithm in the context of the tasks faced by mathematicians. It's a fascinating picture over the span of a century that the achievement of computer science turns out to be a by-product of a rather mundane problem among mathematicians.": "У 1936 році Алан Тьюрінг зробив пропозицію науковій спільноті щодо вирішення проблеми формалізації і, фактично, більш якісного опису такого поняття, як алгоритм. Цікаво, що з пропозиції Алана Тьюрінга виникла архітектура та розвиток всієї комп'ютерної науки у майбутньому, але він ні в якому разі не прагнув до ідеї створення персонального комп'ютера, і він нічого не знав про центри обробки даних або хмари. Його завданням було забезпечити спосіб визначенн�� алгоритму в контексті завдань, що стоять перед математиками. Це захоплююча картина на протязі століть, що досягнення комп'ютерної науки виявляється побічним продуктом досить банальної проблеми серед математиків.",
  "Let's delve into what Alan Turing proposed, without delving too deeply into algorithm theory and the purpose for which he suggested it. Alan Turing proposed the Turing machine, which represents an infinite tape (we can call it memory cells to make it easier), traversed by a reading and writing head. This head, positioned over a certain cell, can read data, apply some simple operations to them, and write new values.": "Давайте заглибимося в те, що запропонував Алан Тьюрінг, не заглиблюючись занадто глибоко в теорію алгоритмів та мету, для якої він її запропонував. Алан Тьюрінг запропонував машину Тьюрінга, яка представляє собою нескінченну стрічку (ми можемо назвати її клітинами пам'яті, щоб спростити), яку проходить читаюча та пишуча головка. Ця головка, розташована над певною клітиною, може читати дані, застосовувати до них деякі прості операції та записувати нові значення.",
  "Today, when you hear phrases like this, it might seem to you: \"Well, yes, it's a hard drive, a computer, or something like that.\" That's absolutely correct. This description gave rise to the first computer architecture. However, the main task of the Turing machine was to provide a means of representing a system or entity capable of performing any formalized computations. One can imagine a box or room, even filled with lamps, into which you insert your punch card, card, or transmit a Bluetooth signal, and the machine starts working, performing simple operations that ultimately solve your problem. Thus, the Turing machine is a universal computational mechanism that primarily solves the universal and essential task of providing a mechanism through which any simple computation or, more accurately, any formalized computation can be performed—computations that can be decomposed into the language of mathematics": "Сьогодні, коли ви чуєте фрази подібні до цієї, вам може здатися: \"Ну, так, це жорсткий диск, комп'ютер або щось подібне.\" Це абсолютно правильно. Цей опис породив першу архітектуру комп'ютера. Однак основне завдання машини Тьюрінга полягало в тому, щоб забезпечити засіб представлення системи або сутності, здатної виконувати будь-які формалізовані обчислення. Можна уявити ящик або кімнату, навіть заповнену лампами, в яку ви вставляєте свою перфокарту, картку або передаєте сигнал Bluetooth, і машина починає працювати, виконуючи прості операції, які в кінцевому підсумку вирішують вашу проблему. Таким чином, машина Тьюрінга є універсальним обчислювальним механізмом, який в першу чергу вирішує універсальне та важливе завдання забезпечення механізму, за допомогою якого можна виконувати будь-які прості обчислення або, точніше, будь-які формалізовані обчислення—обчислення, які можуть бути розкладені на мову математики",
  "In essence, the task of the last 100 years, after finding some solution in the field of mathematics, was precisely to give it a physical form, to find the set of transistors that could be placed on a board, learn how to solder them all, reduce the processes of the computing processor, and so on. No wonder that the theory from 1936 finds application in 2014 for the ideas of the world computer. These 100 years were occupied, in general, in another area—the field of physically implementing this computer.": "У суті завдання останніх 100 років, після знаходження деякого рішення в галузі математики, полягало саме в тому, щоб надати йому фізичну форму, знайти набір транзисторів, які можна було б розмістити на платі, вивчити, як їх всі паяти, зменшити процеси обчислювального процесора і так далі. Не дивно, що теорія з 1936 року знаходить застосування в 2014 році для ідей світового комп'ютера. Ці 100 років були зайняті, взагалі, в іншій області - галузі фізичної реалізації цього комп'ютера.",
  "When the planet became saturated, and we had personal computers, computational machines even inside smart devices, and when data centers started growing on the planet, the question shifted from the hardware solution to how the computational machine might look not at the physical or mathematically abstract level but at some non-physical, perhaps metaphysical, level relative to the entire planet. However, the foundation remains the same: the state transition function and nothing else.": "Коли планета насичувалася, і у нас були персональні комп'ютери, обчислювальні машини навіть всередині розумних пристроїв, і коли на планеті почали зростати центри обробки даних, питання зсунулося від апаратного рішення до того, як може виглядати обчислювальна машина не на фізичному або математично абстрактному рівні, а на якомусь нематеріальному, можливо, метафізичному рівні відносно всієї планети. Однак основа залишається тією ж: функція переходу стану і нічого більше.",
  "As an addition to what has been said, so that we don't only dwell on the theory of 1936 and don't just break the shackles of Bitcoin maximalists, open the Ethereum white paper. There you will find the crucial phrase \"Turing complete machine\"—this is the main definition of Ethereum. A Turing complete machine means that Ethereum can handle any simple operations described in a formal language, operations that are possible. This is not some set of operations that Ethereum can provide as a calculator or a sophisticated calculator for scientists. Instead, it is an abstraction inside which it is possible to load any possible variations, manipulations with variables, constants, additions, calculations with any states, and so on. You won't find anything different from what Turing proposed in the 1930s in the Ethereum concept. You will find an engineering implementation of how to do it. If we move on and open the Polkadot wiki, it's a bit more challenging to find. For this, you should use the search, enter \"State transition,\" and in the search results, find several mentions that Polkadot guarantees nothing else but the state transition. Neither the storage of data in the Polkadot blockchain nor any additional services—only the purest change of state caused by incoming transactions and processed by Polkadot validators. Now, let's try to delve more into this.": "Як додаток до сказаного, щоб ми не тільки зупинялися на теорії 1936 року і не тільки руйнували кайдани максималістів Bitcoin, відкрийте білий папір Ethereum. Там ви знайдете важливу фразу \"Машина, що завершує обчислення\" - це основне визначення Ethereum. Машина, що завершує обчислення, означає, що Ethereum може обробляти будь-які прості операції, описані формальною мовою, операції, які можливі. Це не якийсь набір операцій, які Ethereum може надати як калькулятор або вдосконалений калькулятор для вчених. З��мість цього, це абстракція всередині якої можна завантажити будь-які можливі варіації, маніпуляції змінними, константами, додаваннями, обчисленнями з будь-якими станами і так далі. Ви не знайдете нічого відмінного від того, що пропонував Тьюрінг у 1930-х роках в концепції Ethereum. Ви знайдете інженерне втілення того, як це зробити. Якщо ми перейдемо і відкриємо вікі Polkadot, буде трохи складніше знайти. Для цього вам слід використовувати пошук, ввести \"Функція переходу стану\" і в результатах пошуку знайти кілька згадок того, що Polkadot гарантує нічого іншого, крім функції переходу стану. Ані зберігання даних в блокчейні Polkadot, ані будь-які додаткові послуги - тільки найчистіша зміна стану, спричинена вхідними транзакціями і оброблена валідаторами Polkadot. Тепер давайте спробуємо краще поглибитися в це.",
  "Now, let's add a bit to this linear diagram to move from the theory of the 1930s to today's realities, where we describe the abstract picture of the world computer. To do this, let's consider an example with Alice and Bob. Alice, being in the office, wants to start Bob's home vacuum robot for cleaning. If we look at today's concepts of how the link between Alice's mobile application and the robot vacuum at home is implemented, you will see roughly the following picture: Alice's mobile application generates a transaction in some cloud where calculations take place, and the output of these calculations is the output values that effectively turn into a command to start the vacuum robot. It would be useful for us, from the field of robotics and Robonomics as concepts in the world of web3, to understand that in the cloud, there is a digital twin of this robot, and its state is changed. We can, in general, not go that far and stop at the fact that Alice sends a transaction to the cloud, and the cloud, having performed all the necessary calculations and manipulations, generates a command to start Bob's vacuum robot.": "Зараз додамо трохи до цієї лінійної діаграми, щоб перейти від теорії 1930-х років до сучасної реальності, де ми описуємо абстрактне зображення світового комп'ютера. Для цього розглянемо приклад з Алісою та Бобом. Аліса, будучи в офісі, хоче запустити пилосос-робот Боба для прибирання вдома. Якщо ми розглянемо сучасні концепції того, як реалізоване зв'язок між мобільним додатком Аліси та пилосос-роботом вдома, ви побачите приблизно наступне зображення: мобільний додаток Аліси генерує транзакцію в якому-небудь хмарі, де відбуваються обчислення, і вихідні значення цих обчислень ефективно перетворюються на команду для запуску пилосос-робота. Було б корисно для нас, з польової робототехніки та Робономіки як концепцій у світі web3, зрозуміти, що в хмарі є цифровий двійник цього робота, і його стан змінюється. Ми можемо, взагалі, не йти так далеко і зупинитися на тому, що Аліса відправляє транзакцію в хмару, а хмара, виконавши всі необхідні обчислення та маніпуляції, генерує команду для запуску пилосос-робота Боба.",
  "In this scheme today, there are several main questions: if you were interacting with a physical computer in front of you or were in a room with the vacuum robot, you would approach, press a physical button, and set it in motion. What changes when instead of arrows, there is not a manual drive but a communication layer, the internet? A multitude of questions arises about how we can safely connect Alice and this cloud, how we can be sure that Alice has access to this cloud. The question of the communication network arises—how we can protect Alice from someone else addressing her vacuum robot, requesting, for example, to make a video of her entire apartment instead of cleaning, and a similar aspect arises: why would the vacuum robot listen to this cloud with such honor and integrity? Why would the robot fully trust this cloud?": "У цій схемі сьогодні є кілька основних питань: якщо ви взаємодієте з фізичним комп'ютером перед вами або знаходитесь в кімнаті з пилосос-роботом, ви підходили б, натискати фізичну кнопку та запускати його в рух. Що змінюється, коли замість стрілок, тут не ручний привід, а комунікаційний шар, інтернет? Виникає безліч питань про те, як ми можемо безпечно підключити Алісу до цієї хмари, як ми можемо бути впевнені, що Аліса має доступ до цієї хмари. Виникає питання про мережу зв'язку - як ми можемо захистити Алісу від того, що хтось інший звертається до її пилосос-робота, запитуючи, наприклад, зробити відео всієї її квартири замість прибирання, і виникає схожий аспект: чому пилосос-робот слухатиме цю хмару з такою повагою та чесністю? Чому робот повністю довірятиме цій хмарі?",
  "Today's approach with the architecture of cloud solutions that connect your mobile phone, or rather, the application on your mobile phone, and some technology on the other side, smart devices, is based on the significant achievements in building physical computers. Computers in data centers today are something extraordinary—the level of technical processes is simply amazing. However, from the perspective of communication technologies, when you already have some experience working with internet applications, it seems that somewhere there, at the level of a technical school or college, or maybe not right next to how developers, architects of Intel processors are solving their tasks now. Almost all questions about connecting Alice to Bob boil down solely to outputting a specific access certificate on a specific IP address from both sides, linking them together, and the cloud will own and do anything. The most important thing in this scheme is to do anything, meaning to perform state transitions or operations that occur without any guarantees that for Alice, for Bob, these will be executed according to the same logic. No one can say anything about how the cloud is arranged. It is a black box where computations are not formalized, and neither Alice nor Bob knows how the computation is performed.": "Сьогоднішній підхід з архітектурою хмарних рішень, які з'єднують ваш мобільний телефон, або, точніше, додаток на вашому мобільному телефоні, та якусь технологію з іншого боку, розумні пристрої, базується на значних досягненнях у побудові фізичних комп'ютерів. Комп'ютери в центрах обробки даних сьогодні - це щось надзвичайне - рівень технічних процесів просто дивовижний. Однак з точки зору кому��ікаційних технологій, коли у вас вже є деякий досвід роботи з інтернет-додатками, здається, що десь там, на рівні технічної школи або коледжу, або можливо не зовсім поруч з тим, як розробники, архітекти процесорів Intel вирішують свої завдання зараз. Майже всі питання про підключення Аліси до Боба зводяться виключно до виведення конкретного сертифіката доступу на конкретну IP-адресу з обох сторін, зв'язуючи їх разом, і хмара буде володіти та робити все. Найважливіше в цій схемі - зробити все, що означає виконати переходи стану або операції, які відбуваються без будь-яких гарантій, що для Аліси, для Боба, вони будуть виконані за тією ж логікою. Ніхто не може сказати нічого про те, як організована хмара. Це чорна скринька, де обчислення не формалізовані, і ні Аліса, ні Боб не знають, як виконуються обчислення.",
  "The place where you must fully trust—relying on the reputation of the company that owns these data centers, and you must completely trust the network access providers who issue a certificate and verify the security of your connection. In fact, if we talk about the boom of internet applications, this is a huge problem. The problem is that there are actually some citadels located in specific jurisdictions that operate on a relatively simple technology stack to connect you as easily as possible to the cloud, which represents a black box. Dissatisfaction with this approach actually arouses interest in the world computer because it will arrange things a bit differently. And how? Let's try to supplement the scheme we drew with blue color right now.": "Місце, де ви повинні повністю довіряти - покладаючись на репутацію компанії, яка володіє цими центрами обробки даних, і ви повинні повністю довіряти постачальникам мережевого доступу, які видаватимуть сертифікат та перевірятимуть безпеку вашого з'єднання. Фактично, якщо ми говоримо про бум інтернет-застосунків, це велика проблема. Проблема полягає в тому, що насправді є деякі цитаделі, розташовані в конкретних юрисдикціях, які працюють на відносно простому технологічному стеку, щоб підключити вас якнайлегше до хмари, яка представляє собою чорну скриньку. Незадоволення цим підходом насправді викликає інтерес до світового комп'ютера, оскільки він буде трохи інакше організовувати речі. І як? Давайте спробуємо доповнити схему, яку ми намалювали синім кольором прямо зараз.",
  "So, to supplement our linear graph, our linear diagram from both sides, let's take a look at the discoveries that have significance in computer science and that are directly or indirectly related to achievements from the world of web3.": "Таким чином, щоб доповнити нашу лінійну графіку, нашу лінійну діаграму з обох сторін, давайте розглянемо відкриття, які мають значення в комп'ютерних науках і які безпосередньо або опосередковано пов'язані з досягненнями зі світу web3.",
  "Let's start with Leslie Lamport in 1976. Those who attended my presentations, lectures from 2015-2020, probably remember how often I liked to mention that before the invention of Bitcoin, problems related to creating a decentralized network were well described by Leslie Lamport in 1976 in the Byzantine Generals problem. The solution to the Byzantine Generals problem is at the core of Tendermint PBFT algorithms and all synchronous algorithms used from Telegram Open Network to Tendermint, to Cosmos, and other blockchain projects that, accordingly, followed the path of Byzantine Generals.": "Почнемо з Леслі Лампорта в 1976 році. Ті, хто відвідував мої презентації, лекції з 2015-2020 років, можливо пам'ятають, як часто я любив згадувати, що до винаходу Bitcoin проблеми, пов'язані з створенням децентралізованої мережі, були добре описані Леслі Лампортом в 1976 році в проблемі Візантійських генералів. Рішення проблеми Візантійських генералів лежить в основі алгоритмів Tendermint PBFT та всіх синхронних алгоритмів, використованих ��ід Telegram Open Network до Tendermint, до Cosmos та інших блокчейн-проектів, які, відповідно, йшли шляхом Візантійських генералів.",
  "The second interesting achievement in internet technologies is torrent trackers. We don't have any specific, already erased, cloud or a black box that stores files. Still, users worldwide, by exchanging torrent files, can download exactly the file they were looking for, and this works without data substitution. No one uploads any viruses to you by replacing the file. There might sometimes be a virus embedded in the file, but the idea of receiving a link to download and actually downloading something other than what you were offered to download using torrent technology is impossible. Similar processes exist in the IPFS network, a hash-oriented storage - a way of connecting various participants with trust in the information you convey without using a black box, precisely.": "Другим цікавим досягненням в інтернет-технологіях є торрент-трекери. У нас немає жодного конкретного, вже видаленого, хмарного або чорного ящика, що зберігає файли. Однак користувачі по всьому світу, обмінюючись торрент-файлами, можуть завантажити саме той файл, який вони шукали, і це працює без заміни даних. Ніхто не завантажує вам жодних вірусів, замінюючи файл. Можливо, іноді в файлі може бути вбудований вірус, але ідея отримання посилання на завантаження та фактичного завантаження чогось іншого, ніж вам пропонували завантажити, використовуючи технологію торрентів, неможлива. Подібні процеси існують в мережі IPFS, орієнтованій на хеш-сховище - спосіб з'єднання різних учасників з довірою до інформації, яку ви передаєте, не використовуючи чорний ящик, точно.",
  "And of course, Bitcoin. Bitcoin, as a more collective example, I'm sure Satoshi Nakamoto was well aware of Leslie Lamport's solution to the Byzantine Generals problem and, of course, observed how the idea of torrent trackers was developing. If we don't emphasize the properties that the Bitcoin blockchain obtained, such as immutability, transparency of transactions, and, to some extent, censorship resistance, then Bitcoin is an internet service that performs state transition, some changes in state based on transactions without a central node. It is an example of a collective construction of a global network in which there is a constantly functioning state transition function that we can trust, and to ensure trust, neither jurisdictions nor specific IP addresses nor the most primitive technologies used and still used today in building cloud services are used. The collective image of Bitcoin allowed overlaying the general concept from the 1930s of a Turing-complete machine on the existence of a universal abstract function for everything.": "І, звичайно, Bitcoin. Bitcoin, як більш колективний приклад, я впевнений, що Сатоші Накамото добре знав рішення Леслі Лампорта для проблеми Візантійських генералів і, звичайно, спостерігав, як розвивалася ідея торрент-трекерів. Якщо ми не підкреслюємо властивості, які отримав блокчейн Bitcoin, такі як незмінність, прозорість транзакцій і, до певної міри, стійкість до цензури, то Bitcoin є інтернет-сервісом, який виконує перехід стану, деякі зміни стану на основі транзакцій без центрального вузла. Це приклад колективної побудови глобальної мережі, в якій є постійно працююча функція переходу стану, якій ми можемо довіряти, і для забезпечення довіри не використовуються журисдикції, конкретні IP-адреси або найпримітивніші технології, які використовуються і досі використовуються сьогодні при побудові хмарних сервісів. Колективне уявлення про Bitcoin дозволило накладання загальної концепції з 1930-х років про машину з повним набором команд на існування універсальної абстрактної функції для всього.",
  "So, what do we need to add to this scheme to envision a global computer? From the bottom, we provide consensus validators or, in general, validators. It can be said that the \"Data availability layer\" is probably a phrase many have heard around Ethereum this year, and it has become an advantage of Bitcoin as well. However, in the organization scheme of the global computer, this is one piece of the puzzle and, as I mentioned, it complements the main function that lies at the heart of the global computer—the function of universal state transition. Going back to the very beginning, the analogy of the heart in the human body is interesting here. It's not a thinking thing, indeed. Yes, it doesn't generate, you could say, the brain is much more important. Still, life is impossible without the heart. It simply pumps blood. Similarly, at the core of the global computer, all transactions are pumped through the state transition function, resulting in outputs. But to organize this in a distributed internet network without the need to trust some citadel, we need to supplement the picture with two components.": "Так от, що нам потрібно додати до цієї схеми, щоб уявити глобальний комп'ютер? Знизу ми надаємо валідаторів консенсусу або, взагалі, валідаторів. Можна сказати, що \"Шар доступності даних\" ймовірно, фраза, яку багато хто чув цього року в Ethereum, і вона стала перевагою також для Bitcoin. Однак у схемі організації глобального комп'ютера це один елемент головоломки і, як я вже зазначив, він доповнює основну функцію, яка лежить в основі глобального комп'ютера - ��ункцію універсального переходу стану. Повертаючись до самого початку, аналогія з серцем в людському тілі тут цікава. Це не розумна річ, насправді. Так, воно не генерує, можна сказати, що мозок набагато важливіший. Проте, життя неможливе без серця. Воно просто качає кров. Точно так само, в основі глобального комп'ютера всі транзакції прокачуються через функцію переходу стану, що призводить до виходів. Але для організації цього в розподіленій інтернет-мережі без необхідності довіряти якійсь цитаделі, нам потрібно доповнити картину двома компонентами.",
  "The first component is a set of computers or nodes that are ready to execute the state transition. When you send transactions, they don't just go here; they go to the validators. Validators perform computations, recalling what I've already mentioned in this ongoing conversation. They take your transaction, retrieve information from the blockchain about how to process that transaction, apply that processing, and then coordinate with other validators the fact that they correctly executed the state transition. The core of the global computer, in terms of protection against situations where Bob, the vacuum cleaner robot, receives a correct command from Alice in the office, is not based on trust but on cross-verification by a multitude of network participants based on available information from the blockchain. Not only from the blockchain, by the way. It's complex, and we won't delve into it right now, but essentially, a multitude of validators take turns watching and have incentives, some internal incentives within the protocol, to prevent the universal and capable-of-calculating-anything machine from executing this operation incorrectly. A validator effectively processes transactions that come into the global computer, and other validators help prevent situations where one of the validators performed an incorrect calculation. The better the consensus algorithms of the validators, the better protection we have for the state transition function or, in other words, the heart of our global computer.": "Перший компонент - це набір комп'ютерів або вузлів, які готові виконувати перехід стану. Коли ви відправляєте транзакції, вони не просто йдуть сюди; вони йдуть до валідаторів. Валідатори виконують обчислення, пригадуючи те, що я вже згадував у цьому триваючому розмові. Вони беруть вашу транзакцію, отримують інформацію з блокчейну про те, як обробити цю транзакцію, застосовують цю обробку, а потім координують з іншими валідаторами той факт, що вони правильно виконали перехід стану. Ядро глобального комп'ютера, щодо захисту від ситуацій, коли Боб, робот-пилосос, отримує правильну команду від Еліс у офісі, ґрунтується не на довірі, а на перехресній перевірці великою кількістю учасників мережі на основі доступної інформації з блокчейну. Не лише з блокчейну, до речі. Це складно, і ми зараз не будемо вдаватися в це, але в основному, велика кількість валідаторів по черзі спостерігають і мають стимули, деякі внутрішні стимули в межах протоколу, щоб запобігти тому, що універсальна та здатна обчислювати будь-що машина виконала цю операцію неправильно. Валідатор ефективно обробляє транзакції, які надходять до глобального комп'ютера, і інші валідатори допомагають запобігти ситуаціям, коли один з валідаторів виконав неправильний розрахунок. Чим кращі алгоритми консенсусу валідаторів, тим кращий захист ми маємо для функції переходу стану або, іншими словами, серця нашого глобального комп'ютера.",
  "The second part of this scheme is the data availability service—what we've always called the database in Bitcoin or Ethereum. In fact, we'll have to abandon that concept because there's a fundamental change in the architecture of all projects, and for those specifically targeting the global computer, this change is most crucial. For a simple present-day example: there are various implementations of Layer 2 networks on top of Ethereum—such as Arbitrum, Optimism, and others. If you start looking into their main differences and how they operate, you'll find that, in some cases, an L2 network in Ethereum sends a larger amount of data, solely from the first-layer blockchain, i.e., from the Ethereum blockchain. All the necessary puzzle pieces to confirm that the computation on the L2 layer was correct can be found in the first-layer Ethereum blockchain. On the other hand, other approaches suggest that beyond the first layer of Ethereum, something else is stored that needs to be found to prove the correctness of transactions. So, right now, before our eyes, there is again a question of improvement, but specifically of such an architecture where transactions go on the left, in the middle, we have the heart in the form of the state transition function, validators, and their consensus allows for the correct execution of this state transition. But there is also a question of data availability, which is necessary to ensure both cross-verification and, essentially, the existence of the service itself. Some approaches and patterns for creating L2 on top of Ethereum today ask the question: \"What if a certain L2 layer loses the data it doesn't store within the main Ethereum blockchain?\"": "Друга частина цієї схеми - це служба доступності даних - те, що ми завжди називали базою даних у Bitcoin або Ethereum. Фактично, нам доведеться відмовитися від цього концепту, оскільки в архітектурі всіх проектів відбувається фундаментальна зміна, і для тих, хто спеціально спрямовується на глобальний комп'ютер, ця зміна є найважливішою. На сьогоднішній день, як приклад, існують різні реалізації мереж Layer 2 поверх Ethereum - такі як Arbitrum, Optimism та інші. Якщо ви почнете досліджувати їхні основні відмінності та принципи роботи, ви знайдете, що у деяких випадках мережа L2 в Ethereum відправляє більшу кількість даних, виключно з першого рівня блокчейну, тобто з блокчейну Ethereum. Усі необхідні частинки головоломки для підтвердження того, що обчислення на рівні L2 було вірним, можна знайти в першому рівні блокчейну Ethereum. З іншого боку, інші підходи вказують на те, що поза першим рівнем Ethereum зберігається щось інше, що потрібно знайти для підтвердження вірності транзакцій. Таким чином, прямо зараз, перед нашими очима, знову постає питання про удосконалення, але конкретно такої архітектури, де транзакції йдуть ліворуч, в середині ми маємо серце у вигляді функції переходу стану, валідатори, і їх консенсус дозволяє правильне виконання цього переходу стану. Але також постає питання доступності даних, яке необхідно забезпечити як перевірку, так і, в суті, існування самої служби. Деякі підходи та шаблони для створення L2 поверх Ethereum сьогодні ставлять питання: \"Що, якщо певний рівень L2 втрачає дані, які він не зберігає в основному блокчейні Ethereum?\"",
  "Let's complement this picture with how Polkadot is structured. Polkadot has two consensus mechanisms: the \"babe\" consensus, responsible for the parachain-level consensus and is fast, and the \"grandpa\" consensus, which is slower and verifies everything afterward. So, if you delve into the wiki article titled \"The Path of a Block in the Polkadot Network,\" you will encounter interesting abbreviations. After achieving the \"babe\" consensus at the parachain level, the \"grandpa\" consensus introduces the concept of \"proof of validity and data availability.\" Going deeper, you'll find the term \"chunk\" of redundant pieces of information, inspired by CD RW technologies from the 90s and 2000s. This addresses the question of how to preserve information when absolute trust in a specific entity in the network is not feasible. The concept of \"chunk\" of redundant information is one of these patterns.": "Давайте доповнимо цю картину тим, як побудований Polkadot. У Polkadot є два механізми консенсусу: консенсус \"babe\", відповідальний за консенсус на рівні паралелі і є швидким, та консенсус \"grandpa\", який є повільним і перевіряє все пізніше. Таким чином, якщо ви заглибитеся в статтю вікі з назвою \"Шлях блоку в мережі Polkadot\", ви зіткнетеся з цікавими скороченнями. Після досягнення консенсусу \"babe\" на рівні паралелі, консенсус \"grandpa\" вводить концепцію \"доказу валідності та доступності даних\". Глибше занурюючись, ви знайдете термін \"chunk\" зайвих шматків інформації, натхненний технологіями CD RW з 90-х та 2000-х років. Це відповідає на питання про те, як зберегти інфо��мацію, коли абсолютна довіра до певного суб'єкта в мережі неможлива. Концепція \"chunk\" зайвої інформації є одним з цих шаблонів.",
  "Summing up, at the core lies an abstract function that enables any computation and was described by Alan Turing in the 1930s. The personal computer, essentially a side effect of a mathematical problem, emerged from Turing's work. The technologies first applied in Bitcoin, such as consensus that allows the network to exist without a specific data center or entity responsible for data correctness, form a functioning mechanism. It goes beyond providing a specific service for electronic cash transfers; it allows us to audit and control any computation in the network. Additionally, we face the challenge of ensuring data availability, as it's not the primary concern of the world computer. The world computer's task lies at its core, executing computation, managing state transitions, and performing calculations, while the data in this scheme serves as a puzzle piece that is more necessary to support the lower part. Thus, this overall scheme can be seen as an abstract and generalized illustration of the world computer's structure, where the state transition function is at its core.": "Підсумовуючи, в основі лежить абстрактна функція, яка дозволяє будь-яке обчислення і була описана Аланом Тьюрінгом у 1930-х роках. Особистий комп'ютер, в суті, як побічний ефект математичної проблеми, виник в результаті роботи Тьюрінга. Технології, які спочатку застосовувалися в Bitcoin, такі як консенсус, який дозволяє мережі існувати без конкретного центру обробки даних або суб'єкта, відповідального за правильність даних, формують працюючий механізм. Це виходить за межі надання конкретної послуги для електронних грошових переказів; це дозволяє нам аудитувати та контролювати будь-яке обчислення в мережі. Крім того, ми стикаємося з викликом забезпечення доступності даних, оскільки це не є основною проблемою світового комп'ютера. Завдання світового комп'ютера полягає в його основі, виконанні обчислень, управлінні переходами стану та виконанні обчислень, тоді як дані в цій схемі служать головоломкою, яка є більш необхідною для підтримки нижньої частини. Таким чином, цю загальну схему можна розглядати як абстрактне та узагальнене зображення структури світового комп'ютера, де функція переходу стану знаходиться в його основі.",
  "Part 4: The Path of a New Block of Information in the World Computer": "Частина 4: Шлях нового блоку інформації у світовому комп'ютері",
  "The fourth and final part of our lecture is \"The World Computer in Your Home.\" After this, I will begin recording screencasts for the practical part of the sessions.": "Четверта і остання частина нашої лекції - \"Світовий комп'ютер у вашому домі\". Після цього я почну записувати скрінкасти для практичної частини занять.",
  "Now we will try to summarize almost all the theory we have covered so far in terms of one process. The process that describes the path of an information block in the world computer. Let's start again by returning to the theme of web3 and the concept of blockchain. The phrase \"block\" or \"information block\" can be considered identical when stepping away from the last 10 years and taking a more general theory, as explored in the previous parts of the lectures. The concept of a \"block of information\" aligns with web3, but not necessarily with blockchain. Even without any crypto projects, we need to understand that when forming the theory of the world computer without referencing the formation of information blocks, it's currently challenging to envision other models. So, we will consider the path of an information block throughout the entire world computer, not because it is blockchain, but because, for now, there are no other ways to conceptualize the existence of the world computer other than by processing information in specific portions.": "Тепер ми спробуємо узагальнити майже всю теорію, яку ми вже розглянули, у термінах одного процесу. Процес, який описує шлях блоку інформації у світовому комп'ютері. Давайте почнемо знову, повернувшись до теми web3 та концепції блокчейну. Фразу \"блок\" або \"блок інформації\" можна вважати ідентичними, коли віддалимося від останніх 10 років і взяли більш загальну теорію, як досліджено в попередніх частинах лекцій. Концепція \"блоку інформації\" відповідає web3, але не обов'язково блокчейну. Навіть без будь-яких криптопроектів, нам потрібно розуміти, що, формуючи теорію світового комп'ютера без посилання на формування блоків інформації, наразі складно уявити інші моделі. Тому ми розглянемо шлях блоку інформації по всьому світовому комп'ютеру, не тому що це блокчейн, а тому що наразі немає інших способів уявити існування світового комп'ютера, крім обробки інформації в конкретних порціях.",
  "Block of information = block in web3, but without blockchain and without any crypto project influence. We must currently consider the formation of information blocks when discussing the theory of the world computer. Now, let's move on to the first point. I tried to find close analogies from everyday life to help illustrate the path of an information block in the world computer. The analogy I've chosen is the movement of a bus on a route. Our first meeting point is the bus station.": "Блок інформації = блок у web3, але без блокчейну та без впливу будь-якого криптопроекту. Наразі ми повинні розглядати формування блоків інформації, коли обговорюємо теорію світового комп'ютера. Тепер перейдемо до першої точки. Я намагався знайти близькі аналогії з повсякденного життя, щоб допомогти проілюструвати шлях блоку інформації у світовому комп'ютері. Аналогія, яку я обрав, - це рух автобуса по маршруту. Наша перша зустрічна точка - автобусна зупинка.",
  "I marked transactions in pink as small dots. Let's imagine a typical bus stop where people gather, waiting for a bus that operates on a schedule. If we don't consider the hustle and bustle of large cities, where buses are always late, everyone in the world generally knows that the train from village A to village B always arrives around 7:15 am. Transactions that users want to send to the world computer gather at a certain bus stop and wait for the bus to arrive.": "Я позначив транзакції рожевими як маленькі крапки. Уявімо типову автобусну зупинку, де люди збираються, чекаючи на автобус, який працює за розкладом. Якщо не враховувати гамір великих міст, де автобуси завжди запізнюються, всі в світі загалом знають, що поїзд з села А до села Б завжди прибуває близько 7:15 ранку. Транзакції, які користувачі хочуть відправити у світовий комп'ютер, збираються на певній автобусній зупинці і чекають, коли прибуде автобус.",
  "This is how our block is formed. Imagine: the bus arrives, and each person starts boarding one by one, taking their seats. The bus then follows its route. In our case, the block of information overcomes the first frontier. Our transactions, in some form, have settled into the bus and overcome the initial barrier. I will be using terminology primarily from Polkadot, and the third part should have better explained the concept of the world computer in the comparison between Ethereum and Polkadot. My personal opinion, and probably the majority of engineers today would agree, is that the representation of a heterogeneous multicentric world computer is better implemented in Polkadot. However, we will still go through the terms inherited from Ethereum, but towards the end of this part of the lecture.": "Ось як формується наш блок. Уявіть: автобус прибуває, і кожна людина починає сідати по одній, займаючи свої місця. Потім автобус йде своєю маршрутом. У нашому випадку блок інформації подолав перший фронт. Наші транзакції, у певній формі, вже встигли увійти в автобус і подолати початковий бар'єр. Я буду використовувати термінологію в основному з Polkadot, і третя частина повинна краще пояснити концепцію світового комп'ютера в порівнянні між Ethereum та Polkadot. Моя особиста думка, і, ймовірно, більшість інженерів сьогодні погодилися б, полягає в тому, що представлення гетерогенного багатоцентрового світового комп'ютера краще реалізовано в Polkadot. Однак ми все ще пройдемо терміни, успадковані від Ethereum, ал�� в кінці цієї частини лекції.",
  "What is the line that separates the bus stop from the bus's further movement? This line represents the collators of the network – participants in the network nodes who collect transactions. You can think of a collator not as a bus driver but as a controller who stays at the bus stop. In other words, this controller checks whether you have a ticket when you enter the bus. It doesn't recheck in the database how valid the ticket is but looks at the basic parameters of the ticket and checks if everything seems fine. In reality, collators perform almost all the calculations required, verifying the ticket number and other data, but they are not required to guarantee that the check is done correctly. Therefore, collators are controllers who remain at the bus stop, primarily ensuring passenger boarding, seating, and sending the bus further along the route.": "Яка лінія відокремлює автобусну зупинку від подальшого руху автобуса? Ця лінія представляє колаторів мережі - учасників вузлів мережі, які збирають транзакції. Ви можете уявляти колатора не як водія автобуса, а як контролера, який залишається на автобусній зупинці. Іншими словами, цей контролер перевіряє, чи є у вас квиток при вході в автобус. Він не перевіряє в базі даних, наскільки дійсний квиток, але дивиться на основні параметри квитк�� і перевіряє, чи все виглядає належним чином. На практиці колатори виконують майже всі необхідні обчислення, перевіряючи номер квитка та інші дані, але їм не потрібно гарантувати, що перевірка виконана правильно. Тому колатори - це контролери, які залишаються на автобусній зупинці, в основному забезпечуючи посадку пасажирів, розміщення та відправлення автобуса далі по маршруту.",
  "Beyond the drawn border, we enter the first validation area where paravalidators are located. These are validators of the entire ecosystem, the entire network, specifically assigned for a certain time to check each transaction and thus perform actual computations in the world computer. Our not-yet-fully-formed block of information is marked with a dashed line. It is still a candidate block of information since it has not undergone any actual verification. The collator, who collected the block of information and checked the transactions at the entrance, does not participate in any way in securing the cybersecurity of the computations conducted. Its task is only to seat all transactions and form the first block. At this stage, the transformation from a candidate to a real block of information begins.": "Поза намальованою межею ми входимо в першу зону перевірки, де розташовані паравалідатори. Це валідатори всього екосистеми, всієї мережі, спеціально призначені на певний час для перевірки кожної транзакції та виконання фактичних обчислень у світовому комп'ютері. Наш ще не повністю сформований блок інформації позначений пунктирною лінією. Це все ще кандидат на блок інформації, оскільки він не пройшов жодної фактичної перевірки. Колатор, який зібрав блок інформації та перевірив транзакції на вході, не бере участь у забезпеченні кібербезпеки обчислень, які проводяться. Його завдання - лише розмістити всі транзакції та сформувати перший блок. На цьому етапі починається перетворення з кандидата на реальний блок інформації.",
  "I have divided it into three parts, but forgot one more. Let's consider four parts of this candidate block. The top part, known to users of various web3 applications as the header or block header, is the quintessence, the most popular piece of information circulating and reflected from the block explorer to the console clients of all nodes mining, staking, and so on. The header is a key element of the block, but it is practically formed at the last stage at this point.": "Я розділив це на три частини, але забув ще одну. Давайте розглянемо чотири частини цього кандидатського блоку. Верхня частина, відома користувачам різних додатків web3 як заголовок або блочний заголовок, є сутністю, найпопулярнішим шматком інформації, що циркулює та відображається з блок-експлорера на консольні клієнти всіх вузлів, які майнять, стейкують та інше. Заголовок є ключовим елементом блоку, але він практично формується на останньому етапі на цей момент.",
  "Firstly, we have our actual requests for state transitions or computations. There is a list of changes that need to be made: convert A to A', B to B', C to C', applying a set of algorithms to them. For this, we will now build another boundary immediately and go beyond it to perform this part of the work, and then only proceed beyond it. Already at the block preparation stage, we have to cross the second boundary within the world computer to go for the algorithms that need to be applied to prepare the block. As I mentioned before, theoretically, the controller at the bus stop here does the same, but I wouldn't pay much attention to that. The block preparation stage, especially when we talk about examples simultaneously from Polkadot and Ethereum as a world computer, they differ slightly and show us the insignificance of checks at this stage because it is precisely on the second step, after passing the first boundary and receiving the block of information from collators, that the attention-worthy calculations of this world computer begin.": "По-перше, у нас є наші фактичні запити на переходи стану або обчислення. Є список змін, які потрібно внести: перетворити A на A', B на B', C на C', застосовуючи до них набір алгоритмів. Для цього ми зараз побудуємо ще одну межу негайно і вийдемо за її межі, щоб виконати цю частину роботи, а потім лише продовжимо за її межі. Вже на етапі підготовки блоку нам доведеться перетнути другу межу всередині світового комп'ютера, щоб перейти до алгоритмів, які потрібно застосувати для підготовки блоку. Як я вже зазначив раніше, теоретично контролер на автобусній зупинці тут робить те ж саме, але я б не звертав на це багато уваги. Етап підготовки блоку, особливо коли ми говоримо про приклади одночасно з Polkadot та Ethereum як світового комп'ютера, вони трохи відрізняються і показують нам незначність перевірок на цьому етапі, оскільки саме на другому кроці, після проходження першої межі та отримання блоку інформації від колаторів, починаються варте уваги обчислення цього світового комп'ютера.",
  "To perform these calculations, the validator, at this stage, can only do so by turning to the relay chain, the central database, and taking from there the algorithms from the runtime. In the case of Ethereum, it was the same virtual machines in the previous architectural concept, which could be applied, so there was no need to go anywhere. Almost every node had a complete copy of the algorithms that could be applied. But in terms of a heterogeneous network, where each segment or each individual chain may have its own set of algorithms, a validator, before actually executing all the transitions, calculations obtained in the form of a block candidate from the collator, must consult. It must consult the relay chain, consult the main blockchain in the network and take from there the necessary algorithms, apply them, and perform state transitions.": "Для виконання цих обчислень перевірник на цьому етапі може робити це лише звертаючись до релеєвого ланцюжка, центральної бази даних, і брати звідти алгоритми з рантайму. У випадку Ethereum, це були ті самі віртуальні машини в попередньому архітектурному концепції, які можна було застосовувати, тому нікуди йти не потрібно було. Майже кожен вузол мав повну копію алгоритмів, які можна було застосувати. Але в термінах гетерогенної мережі, де кожний сегмент або кожен окремий ланцюжок може мати свій власний набір алгоритмів, перевірник, перед тим як фактично виконати всі переходи, обчислення, отримані у вигляді кандидата на блок від коллатора, повинен проконсультуватися. Він повинен проконсульту��атися з релеєвим ланцюжком, проконсультуватися з основним блокчейном в мережі і взяти звідти необхідні алгоритми, застосувати їх і виконати переходи стану.",
  "During the execution of calculations, a Merkle tree is simultaneously formed, and we won't dwell on it because Merkle trees are not that complicated from the perspective of computer science. Still, I notice that to understand how to apply them in engineering and in the architecture of a project, how they are applied, not just by reading on Wikipedia, you need to break your head a bit, imagine examples. In this example, we won't delve too much into it, but I think for those who are already familiar with some basic definitions, have read about Merkle trees, it will become a bit clearer about how and at what moments another Merkle tree is assembled. The Merkle tree is formed when we actually perform calculations and output values appear. These output values are packed into a binary tree format, then the addition is performed between them in computer science language, and the top node reaches the header. Let's denote it with a big letter \"H.\" It's a small and pleasant aspect of considering such schemes.": "Під час виконання обчислень одночасно формується дерево Меркла, і ми не будемо зупинятися на цьому, оскільки дерева Меркла не настільки складні з точки зору комп'ютерних наук. Проте я зауважую, що для розуміння того, як їх застосовувати в інженерії та в архітектурі проекту, як вони застосовуються, не лише читаючи на Вікіпедії, потрібно трохи поламати голову, уявити приклади. У цьому прикладі ми не будемо занадто глибоко вдаватися в це, але я думаю, що для тих, хто вже знайомий з деякими базовими визначеннями, прочитав про дерева Меркла, стане трохи зрозуміліше, як і в які моменти форму��ться інше дерево Меркла. Дерево Меркла формується, коли ми фактично виконуємо обчислення і з'являються вихідні значення. Ці вихідні значення упаковуються у бінарний формат дерева, потім виконується додавання між ними мовою комп'ютерних наук, і верхній вузол доходить до заголовка. Давайте позначимо його великою літерою \"H.\" Це невеликий і приємний аспект розглядання таких схем.",
  "In this scheme, we can note how the block header is actually related to the computations performed inside. Let's look again - our block candidate came from the collator. There is a set of transactions that need to be executed, perform calculations. The validator went through another internal boundary, one more, behind the algorithms, applied them, and recorded all the results at the lowest level of the Merkle tree. The other nodes are essentially systemic. They do not come from any data; they don't come from anywhere. At the second level, the node does not come from any information. It is obtained by summing values in these two leaves, and when we go up with you, we get only the root of this tree, which is enough to protect all output values. We won't get the same header if we change any of these calculations. And this is one of the magical and simple features, like hash-oriented storage, of how we can protect a whole block of information by talking only about one header. Therefore, headers are so important and play a cornerstone role even in architectures when we transition from one chain or one virtual machine to many combined in the network. It is enough for us to ensure the security of storing headers to be sure that all transactions that were executed at the block preparation stage were executed correctly, and they cannot be replaced.": "У цій схемі ми можемо зауважити, як заголовок блоку фактично пов'язаний з обчисленнями, виконаними всередині. Давайте ще раз подивимося - наш кандидат на блок прийшов від коллатора. Є набір транзакцій, які потрібно виконати, виконати обчислення. Перевірник пройшов через ще одну внутрішню межу, ще одну, за алгоритмами, застосував їх і записав всі результати на найнижчому рівні дерева Меркла. Інші вузли в основному системні. Вони не походять з жодних даних; вони не приходять звідки-небудь. На другому рівні вузол не походить з жодної інформації. Він отримується шляхом сумування значень в цих двох листках, і коли ми йдемо вгору з вами, ми отримуємо лише корінь цього дерева, що достатньо для захисту всіх вихідних значень. Ми не отримаємо того самого заголовка, якщо змінимо будь-які з цих обчислень. І це одна з чарівних і простих функцій, як напрямлене зберігання хешів, як ми можемо захистити цілу блок-інформацію, говорячи лише про один заголовок. Тому заголовки настільки важливі і відіграють ключову роль навіть в архітектурах, коли ми переходимо з одного ланцюжка або однієї віртуальної машини до багатьох, об'єднаних в мережу. Для нас достатньо забезпечити безпеку зберігання заголовків, щоб бути впевненими, що всі транзакції, які були виконані на етапі підготовки блоку, були виконані правильно, і їх не можна замінити.",
  "And one field is still left unfilled. In the process of preparing the block of information, it is the author's field, that is, the validator who actually performed all the changes, prepared the Merkle tree, and recorded the header. Since we are considering an example with the bus moving along the route from the stop, let's call the validator a \"controller\" who goes right inside the bus, passes each seat, approaches each person, checks for real what is written on their tickets, makes some mark, validates it, and, accordingly, puts their signature. The controller, for example, number 134, meaning, naturally, each validator has some unique identifier, their address, and we also somehow uniquely renamed it here.": "І одне поле все ще залишається незаповненим. У процесі підготовки блоку інформації це поле автора, тобто валідатора, який фактично виконав всі зміни, підготував дерево Меркла та записав заголовок. Оскільки ми розглядаємо приклад з автобусом, який рухається вздовж маршруту від зупинки, давайте назвемо валідатора \"контролером\", який заходить прямо всередину автобуса, проходить кожне місце, підходить до кожної людини, перевіряє реальність того, що написано на їх квитках, робить певну позначку, підтверджує це та, відповідно, ставить свій підпис. Контролер, наприклад, номер 134, що означає, звичайно, що кожен валідатор має унікальний ідентифікатор, свою адресу, і ми також якось унікально пере��менували його.",
  "And it seems that at this point, we could have shaded and made our block boundaries bolder, but no, and this is one of the interesting changes that have occurred in the last 5 years in terms of decentralized ecosystems, namely the shift from proof of work. When validators of the network, at that time miners, never had to coordinate anything with each other. You produced a block and sent it to the network and moved on. In fact, it was not a consensus of agreed consent. It was a consensus of obvious agreement with the fact that had occurred. What is interesting changes when the architecture becomes more complex, and we have come closer from a simple calculator like Bitcoin with a ledger towards an actual virtual computer, is that at each stage, the connectivity of participants who ensure security and block production has increased. Because, in fact, no one who risks their stake, the one who ensures this security and wants to earn by processing your transactions, has something to lose, unlike proof of work. In proof of work, you bought the equipment, yes, you put money into it, you spend electricity, but there is actually no protection against the fact that you can attack the network with your power, the same 51% attack, where someone with a lot of miners can try to rewrite the chain.": "І здається, що на цьому етапі ми могли б затінити та зробити наші межі блоку більш виразними, але ні, і це одна з цікавих змін, які відбулися за останні 5 років у термінах децентралізованих екосистем, а саме зміна з доказу роботи. Коли валідатори мережі, тоді шахтарі, ніколи не мали потреби узгоджувати щось один з одним. Ви створювали блок та відправляли його в мережу та йшли далі. Фактично це не було консенсусом узгодженої згоди. Це був консенсус очевидної згоди з тим, що відбулося. Що цікаво, зміни, коли архітектура стає складнішою, і ми наближаємося від простого калькулятора, подібного до Bitcoin з рахунком, до фактичного віртуального комп'ютера, полягає в тому, що на кожному етапі збільшується зв'язаність учасників, які забезпе��ують безпеку та виробництво блоків. Тому що, фактично, ніхто, хто ризикує своїм ставкою, той, хто забезпечує цю безпеку та хоче заробити, обробляючи ваші транзакції, не має чого втрачати, на відміну від доказу роботи. У доказі роботи ви купуєте обладнання, так, ви вкладаєте гроші в нього, витрачаєте електроенергію, але фактично немає захисту від того, що ви можете атакувати мережу своєю потужністю, та сама атака на 51%, де хтось з великою кількістю шахтарів може спробувати переписати ланцюжок.",
  "Now we are talking about proof of stake, where a deposit is already made, and if you do something wrong, a part will be withdrawn from it, as a penalty. All nodes, absolutely, in all architectures that I currently observe, mechanisms for messaging between validators began to appear quickly at the block preparation stage. In Polkadot, it is no different. Any validator of a separate parachain that collects a block knows the addresses or already has established contact with another 15-63 validators who are with you on this epoch, on some temporary period, as validators, and each of them randomly becomes a block producer at some point. But being appointed as a producer does not negate a very important component of this process. You do not stop interacting with the other participants. There is always a pool of validators assigned to a specific epoch, to a certain time slot, for validating a particular parachain or segment of the world computer. Regardless of whether you are a validator-controller specifically assigned to produce the next block in the world computer of this segment, you still stay in touch with the other validators, and you have constant contact with them.": "Зараз ми говоримо про доказ власності, де вже зроблено депозит, і якщо ви щось зробите неправильно, з нього буде знято частину як покарання. Усі вузли, абсолютно, в усіх архітектурах, які я зараз спостерігаю, механізми обміну повідомленнями між валідаторами почали швидко з'являтися на етапі підготовки блоку. У Polkadot це не відрізняється. Будь-який валідатор окремого парачейну, який збирає блок, знає адреси або вже встановив контакт з іншими 15-63 валідаторами, які з вами на цій епосі, на певний тимчасовий період, як валідатори, і кожен з них випадковим чином стає виробником блоку в певний момент. Але призначення виробником не відміняє дуже важливої складової цього процесу. Ви не припиняєте взаємодію з іншими учасниками. Завжди є пул валідаторів, призначених для певної епохи, для певного часового інтервалу, для перевірки певного парачейну або сегмента світового комп'ютера. Незалежно від того, чи ви є валідатор-контролером, спеціально призначеним для виробництва наступного блоку у світовому комп'ютері цього сегмента, ви все ще знаходитесь на зв'язку з іншими валідаторами, і ви постійно з ними контактуєте.",
  "Why is this constant contact necessary? It turns out to be quite simple. We do not want, when we move into the inner part, to be afraid or worry that we performed any of the operations incorrectly. As surprising as it may seem, it is beneficial for any validator, before moving on, to first turn to their colleagues assigned to validation and ask them to double-check the calculations. This check is informal, so even if we do not use any logging into an immutable database of requests for verification and the results of this verification, the appointed controller, after talking to the pool of validators, still collects additional responses from all validators assigned to this parachain or network segment. Together with additional confirmations, the controller moves on to the next stage. But even here, it's not quite as simple. At this stage, another process has to be performed. It is important to note that at this stage, our block of information is still a candidate block, and settlement of information is already taking place in the storage. Neither at the very end, nor after we have created and sealed the block and attached it with an archiver in the final part, namely here, in this middle part where all the calculations are actually performed, does the information get saved in the storage. Therefore, our controller, in addition to talking to their colleagues, also ensures the storage of data in some storage, which is also quite metaphysical because the moment you communicate with other validators, this storage gets filled. How is this checked? We will need to move on to the next stage.": "Чому цей постійний контакт необхідний? Виявляється, це досить просто. Ми не хочемо, коли ми переходимо до внутрішньої частини, боятися або перейматися тим, що ми виконали будь-які операції неправильно. Незважаючи на те, наскільки це може здатися дивним, це корисно для будь-якого валідатора, перед тим як переходити далі, спочатку звернутися до своїх колег, які призначені для валідації, і попросити їх перевірити розрахунки. Ця перевірка є неформальною, тому навіть якщо ми не використовуємо жодного журналювання в незмінній базі даних запитів на перевірку та результатів цієї перевірки, призначений контролер, після розмови з пулом валідаторів, все ще збирає додаткові відповіді від усіх валідаторів, які призначені для цієї парачейн або сегменту мережі. Разом з додатковими підтвердженнями контролер переходить до наступного етапу. Але навіть тут все не так просто. На цьому етапі потрібно виконати ще один процес. Важливо зауважити, що на цьому етапі наш блок інформації все ще є кандидатським блоком, і вже відбувається вирішення інформації в сховищі. Ні в самому кінці, ні після того, як ми створили і запечатали блок і прикріпили його з архіватором в кінцевій частині, а саме тут, в цій середній частині, де всі розрахунки фактично виконуються, інформація не зберігається в сховищі. Тому наш контролер, крім розмови з колегами, також забезпечує збереження даних в деякому сховищі, що також досить метафізично, оскільки в момент спілкування з іншими валідаторами це сховище заповнюється. Як це перевіряється? Нам потрібно перейти до наступного етапу.",
  "In summary, to complete the middle part, let's look again. We still have only a candidate block at the very beginning. Yes, all transactions are roughly calculated somewhere at the bus stop, everyone has taken their seats according to their tickets. We have passed the first boundary, which is essentially direct established contact between validators and block collators. In Ethereum and Polkadot, these are slightly different schemes now. But everything that happens on the left side at the very beginning does not provide cybersecurity for data and calculations. It's just preparation. Once we have passed and entered the environment of the validators' attention, work with the block of information in the world computer begins. A randomly selected validator, in our case, with a bus route - a controller, actually goes through each of the seats, checks the ticket, checks and performs all the calculations that were made, gathers all the information into a tree. The resulting root node of this tree becomes the header of the proposed block. The validator who actually performs all the calculations with this block of information communicates with the other participants who perform a similar function for the same route in an undefined time slot. And while communicating with them and asking them to verify all the calculations, we are actually filling a certain storage of data in the network. It is not a specific physical storage; there is no specific IP address, no specific hard drive onto which they all load through some VPN or login and password scheme, of course not. In the process of communicating with other validators, data remains on their local machines, and this data will further participate in the transformation of this candidate into a new block of information. In essence, the sealed block that will be settled in the relay chain is collected. We have assembled a block. All the metadata around the calculations is already filled, which means we can try to move on to the next frontier.": "У підсумку, щоб завершити середню частину, давайте ще раз подивимося. У нас все ще є лише кандидатський блок в самому початку. Так, всі транзакції приблизно розраховані десь на автобусній зупинці, кожен зайняв свої місця відповідно до своїх квитків. Ми пройшли першу межу, яка суттєво встановила прямий контакт між валідаторами та блок-коллекторами. У Ethereum та Polkadot це зараз трохи різні схеми. Але все, що відбувається зліва в самому початку, не забезпечує кібербезпеку для даних та розрахунків. Це лише підготовка. Як тільки ми пройшли та увійшли в середовище уваги валідаторів, починається робота з блоком інформації у світовому комп'ютері. Випадково обраний валідатор, у нашому випадку, з маршруто�� автобуса - контролер, фактично проходить кожне з місць, перевіряє квиток, перевіряє та виконує всі розрахунки, збирає всю інформацію в дерево. Отриманий кореневий вузол цього дерева стає заголовком запропонованого блоку. Валідатор, який фактично виконує всі розрахунки з цим блоком інформації, спілкується з іншими учасниками, які виконують схожу функцію для того ж маршруту в невизначеному часовому інтервалі. І під час спілкування з ними та прохання їх перевірити всі розрахунки, ми фактично наповнюємо певне сховище даних в мережі. Це не конкретне фізичне сховище; тут немає конкретної IP-адреси, жорсткого диска, на який вони всі завантажують через якусь VPN або схему входу та пароля, звичайно, ні. Під час спілкування з іншими валідаторами дан�� залишаються на їхніх локальних машинах, і ці дані подальше братимуть участь у перетворенні цього кандидата в новий блок інформації. По суті, зібраний блок, який буде врегульований у реле-ланцюгу. Ми зібрали блок. Усі метадані навколо розрахунків вже заповнені, що означає, що ми можемо спробувати перейти до наступної фронтирної зони.",
  "At this moment, let's delve into the passage of the next boundary. The most crucial aspect at the final stage becomes the block header. We are less concerned with the execution of computations; we can simplify our perspective here, as computations may vary based on the architecture, whether it's Ethereum or Polkadot. The key point is that, on the intermediate stage, from what I observe in the theory and practice of implementing the world computer concept, most computations happen at an intermediate level. The last level remains only to execute essential checks. Almost all these checks in a multi-chain architecture are related to the concatenation or merging of block headers into one block.": "На цей момент давайте поглибимося в проходження наступної межі. Найважливішим аспектом на останньому етапі стає заголовок блоку. Ми менше звертаємо увагу на виконання обчислень; ми можемо спростити нашу перспективу тут, оскільки обчислення можуть відрізнятися в залежності від архітектури, чи то Ethereum, чи Polkadot. Ключовий момент полягає в тому, що на проміжному етапі, з того, що я спостерігаю в теорії та практиці впровадження концепції світового комп'ютера, більшість обчислень відбуваються на проміжному рівні. Останній рівень залишається лише для виконання важливих перевірок. Майже всі ці перевірки в мульти-ланцюжковій архітектурі пов'язані з конкатенацією або злиттям заголовків блоків.",
  "In the final part of our journey, the most important element in the world computer's information block becomes the cornerstone – the header. The second component is more about meta-information. If the header is the actual result of all computations, the additional meta-information being transmitted consists of receipts and signatures of the validators who participated in the intermediate stage of this process. At the final stage, we can visualize the whole picture solely as the assembly of the same tree, not as a list of transactions. In the relay chain's final part, the crucial aspect is the assembly of headers from many similar processes, but linked to different segments of the world computer, different parachains.": "На останньому етапі нашої подорожі найважливішим елементом в інформаційному блоку світового комп'ютера стає кутовий камінь - заголовок. Другий компонент більше стосується мета-інформації. Якщо заголовок є фактичним результатом всіх обчислень, додаткова мета-інформація, яка передається, складається з квитанцій та підписів валідаторів, які брали участь на проміжному етапі цього процесу. На останньому етапі ми можемо візуалізувати цілу картину виключно як збірку того ж самого дерева, а не як список транзакцій. У фінальній частині реле-ланцюга ключовим аспектом є збірка заголовків з багатьох схожих процесів, але пов'язаних з різними сегментами світового комп'ютера, різними паралелями.",
  "Each parachain, each set of validators – we've discussed one example, but in reality, such block preparations for parachains happen 30-40 times. The number of parachain slots or the number of L2 networks in Ethereum will result in a similar number of processes with a similar architecture. However, in the final stage, we will see an approximately identical picture everywhere – how the block header will be formed from a multitude of headers from other blocks. In this process, we need to introduce one more entity and jump back across the boundary to the second stage.": "Кожна паралеля, кожний набір валідаторів - ми обг��ворили один приклад, але насправді такі підготовки блоків для паралелей відбуваються 30-40 разів. Кількість слотів паралелей або кількість L2 мереж в Ethereum призведе до подібної кількості процесів з подібною архітектурою. Однак на фінальному етапі ми побачимо приблизно ідентичну картину всюди - як буде сформований заголовок блоку з множини заголовків з інших блоків. У цьому процесі нам потрібно ввести ще одну сутність і перескочити через межу на другий етап.",
  "Finalizers. In fact, they are also validators, but relay chain validators. In the Polkadot architecture, we have a thousand validators divided into two groups. The first, a very small group, is responsible only for forming the block header and a new block consisting of the headers of the State of the States blocks. The second group – parachain validators – is further divided into many subgroups, but this group is called parachain validators. In L2 networks above Ethereum, this story will eventually gain more understanding, more denominators. For now, let's focus on the Polkadot architecture. Finalizers, besides checking an additional set of meta-information and rechecking a validator with a specific ID, randomly chosen to generate this block of all blocks, also help recheck meta-information, check, and assemble all headers into one. It's a bit complex, yes, if we look at it from the perspective of tree assembly.": "Фіналізатори. Фактично, вони також є валідаторами, але валідаторами реле-ланцюга. У архітектурі Polkadot ми маємо тисячу валідаторів, розділених на дві групи. Перша, дуже мала група, відповідає лише за формування заголовка блоку та нового блоку, що складається з заголовків блоків Стану блоків Стану. Друга група - валідатори паралелей - поділяється на багато підгруп, але ця група називається валідаторами паралелей. У L2 мережах над Ethereum ця історія з часом набуде більшого розуміння, більшої кількості знаменників. Наразі давайте зосередимося на архітектурі Polkadot. Фіналізатори, крім перевірки додаткового набору мета-інформації та повторної перевірки валідатора з конкретним ID, випадково обраного для генерації цього блоку з усіх блоків, також допомагають повторно перевірити мета-інформацію, перевірити та зібрати всі заголовки в один. Це трохи складно, так, якщо ми дивимося на це з точки зору збірки дерева.",
  "In addition to this, in the Polkadot architecture and in Ethereum with the latest changes, a data availability check takes place. For this, finalizers visit parachain validators and try to request actual information about each block stored in the network. If they receive data from at least 1/3 of the validators, using technology that allows redundant storage of information, and subsequently, if someone loses it, one or two or three validators can still restore it, there is a critical threshold at 1/3. If 1/3 of the nodes respond and say that we have data about the block being produced, finalizers tell the block that it is already a fully formed information block, that all computations have been done correctly, that we have already taken the header of this block and combined it with someone else's headers from other segments of the network. We have already formed the main header of the entire network. After that, finalizers place many checkmarks on the final block, which combines all performed computations.": "Крім того, в архітектурі Polkadot та в Ethereum з останніми змінами відбувається перевірка доступності даних. Для цього фіналізатори відвідують валідаторів парачейнів і намагаються запитати фактичну інформацію про кожний блок, збережений в мережі. Якщо вони отримують дані від принаймні 1/3 валідаторів, використовуючи технологію, яка дозволяє резервне зберігання інформації, і в подальшому, якщо хтось втратить її, один, два або три валідатори все ще можуть відновити її, існує критичний поріг на рівні 1/3. Якщо 1/3 вузлів відповідають і кажуть, що у нас є дані про блок, який виробляється, фіналізатори повідомляють блок, що це вже повністю сформований інформаційний блок, що всі обчислення були виконані правильно, що ми вже взяли заголовок цього блоку і поєднали його з заголовками інших сегментів мережі. Ми вже сформували головний заголовок всієї мережі. Після цього фіналізатори розміщують багато позначок на кінцевому блоку, який поєднує всі виконані обчислення.",
  "Currently, this is the situation from the perspective of the most engineering-implemented multi-chain heterogeneous ecosystem, which is Polkadot. It is the most engineering-implemented multi-chain heterogeneous ecosystem, not too far from Ethereum. I would like to focus on the comparison, and if someone is interested in understanding how information blocks flow in Ethereum with L2 networks, you can try to do that now. I will return to this question when some elements of Ethereum, in terms of heterogeneity and multi-chain aspects, are completed. It might take 1-2 years, and then we can build such a picture. Nevertheless, we can generally accept a scheme with three main stages:": "Наразі це ситуація з точки зору найбільш інженерно реалізованої багатоланкової гетерогенної екосистеми, якою є Polkadot. Це найбільш інженерно реалізована багатоланкова гетерогенна екосистема, не занадто далека від Ethereum. Я б хотів зосередитися на порівнянні, і якщо хтось зацікавлений у розумінні того, як інформаційні блоки потоком в Ethereum з мережами L2, ви можете спробувати це зараз. Я повернуся до цього питання, коли деякі елементи Ethereum, з точки зору гетерогенності та багатоланко��их аспектів, будуть завершені. Це може зайняти 1-2 роки, і тоді ми зможемо побудувати таку картину. Тим не менш, ми можемо загалом прийняти схему з трьох основних етапів.",
  "**1. Formation of a candidate for the information block:**": "**1. Формування кандидата на інформаційний блок:**",
  "In this stage, the initial candidate for the information block is formed.": "На цьому етапі формується початковий кандидат на інформаційний блок.",
  "**2. Execution of all computations, data storage, data availability, rechecking with other nodes, ensuring that all state transitions are performed correctly according to specific algorithms, and storing these algorithms in the main citadel:**": "**2. Виконання всіх обчислень, зберігання даних, доступність даних, перевірка з іншими вузлами, забезпечення того, що всі переходи стану виконуються правильно згідно з конкретними алгоритмами, та зберігання цих алгоритмів у головному цитаделі:**",
  "This stage involves the actual execution of computations, saving data to certain layers, ensuring data availability, rechecking with other nodes to confirm that all state transitions are in accordance with algorithms stored somewhere in the main citadel.": "На цьому етапі відбувається фактичне виконання обчислень, збереження даних на певних рівнях, забезпечення доступності даних, перевірка з іншими вузлами для підтвердження того, що всі переходи стану відповідають алгоритмам, збереженим десь у головному цитаделі.",
  "**3. Finalization, which will not recheck the computations but will verify the meta-information, how this meta-information is stored. It will then assemble the final block, which is the state of the states, and release it as a common information block for the entire segmented multi-chain network:**": "**3. Фіналізація, яка не буде перевіряти обчислення, але перев��рить мета-інформацію, як ця мета-інформація зберігається. Потім вона зібере остаточний блок, який є станом станів, і випустить його як загальний інформаційний блок для всієї сегментованої мульти-ланцюжкової мережі:**",
  "The final stage involves checking the meta-information, verifying how this meta-information is stored, assembling the final block (state of the states), and releasing it as a common information block for the entire segmented multi-chain network.": "Останній етап включає перевірку мета-інформації, перевірку того, як ця мета-інформація зберігається, збирання остаточного блоку (стан станів) та випуск його як загального інформаційного блоку для всієї сегментованої мульти-ланцюжкової мережі.",
  "At this point, we can say that our information is saved. It has passed through the heart, the heart has executed its data transfer correctly, and we can already use the output values. Some will use them to open a smart-contract-purchased apartment with a smart lock, while others might show off their NFT, just received for 10 ethers.": "На цьому етапі ми можемо сказати, що наша інформація збережена. Вона пройшла через серце, серце виконало свій перенос даних правильно, і ми вже можемо використовувати вихідні значення. Деякі використовуватимуть їх, щоб відкрити квартиру, куплену за допомогою розумного контракту �� розумним замком, тоді як інші можуть показати свій NFT, щойно отриманий за 10 ефірів.",
  "In general, this is approximately how it works. This concludes the theoretical part. I think it took about 2 hours, and ahead of us are practical sessions that I will be recording over the next few months. They will help us understand the observed data from the console window, decentralized applications, block explorers, where we will gradually understand how all these theoretical numbers and letters actually look in implementation using Polkadot as an example. I will also start getting hands-on with implementations at the L2 level using one of the well-known frameworks for building L2. Thank you to everyone who has been watching.": "Загалом, це приблизно так працює. Це завершує теоретичну частину. Я думаю, що це зайняло близько 2 годин, і перед нами практичні сесії, які я буду записувати протягом наступних кількох місяців. Вони допоможуть нам зрозуміти спостережені дані з вікон консолі, децентралізовані додатки, блок-дослідники, де ми поступово зрозуміємо, як всі ці теоретичні цифри та літери фактично виглядають у реалізації, використовуючи Polkadot як приклад. Я також почну працювати на практиці з реалізаціями на рівні L2 за допомогою одного з відомих фреймворків для побудови L2. Дякую всім, хто дивився."
}