{
  "Part 3: Emergence of the World Computer": "Часть 3: Возникновение мирового компьютера",
  "In the third part titled \"Emergence of the World Computer,\" we will attempt, layer by layer, to recreate the engineering implementation of the world computer using examples from Ethereum and Polkadot, as before.\"": "В третьей части под названием \"Возникновение мирового компьютера\" мы попытаемся, слой за слоем, воссоздать инженерную реализацию мирового компьютера, используя примеры из Ethereum и Polkadot, как и раньше.",
  "Learn": "Учить",
  "In the third part titled \"Emergence of the World Computer,\" we will attempt, layer by layer, to recreate the engineering implementation of the world computer using examples from Ethereum and Polkadot, as before.": "В третьей части под названием \"Возникновение мирового компьютера\" мы попытаемся, слой за слоем, воссоздать инженерную реализацию мирового компьютера, используя примеры из Ethereum и Polkadot, как и раньше.",
  "Let's start with Ethereum. Ethereum began in 2015 with a state that can be characterized as a combination of the proof-of-work consensus algorithm, enabling the world computer to exist in a decentralized state (as discussed in Part 2). Additionally, the Ethereum Virtual Machine (EVM) was introduced, serving as a Turing-complete computational machine. Together, these two elements formed the first version of the world computer, sometimes referred to as a precursor. Within this context, decentralized applications, or smart contracts, began to emerge.": "Давайте начнем с Ethereum. Ethereum начался в 2015 году с состояния, которое можно охарактеризовать как комбинацию алгоритма консенсуса proof-of-work, позволяющего мировому компьютеру существовать в децентрализованн��м состоянии (как обсуждалось в части 2). Кроме того, была представлена Ethereum Virtual Machine (EVM), служащая в качестве машины для вычислений с полным набором команд. Вместе эти два элемента образовали первую версию мирового компьютера, иногда называемую предшественником. В этом контексте начали появляться децентрализованные приложения или смарт-контракты.",
  "Over the next 5 years, Ethereum lived a relatively unchanged life, undergoing some engineering tunings, such as a continuous increase in gas limits, with the exception of events like the Shanghai fork. Notably, during the second DEFCON held in Shanghai, a denial-of-service attack exploited a function in the virtual machine that consumed minimal gas but triggered significant computations on the Ethereum network. This led to memory overflow, effectively disrupting an entire Ethereum node. This incident highlights the intricate details that arise when dealing with a large and abstract solution like creating a virtual machine.": "В течение следующих 5 лет Ethereum жил относительно неизменной жизнью, претерпевая некоторые инженерные настройки, такие как непрерывное увеличение лимитов газа, за исключением событий, таких как Шанхайский форк. Особенно во время второго DEFCON, проведенного в Шанхае, атака отказа в обслуживании использовала функцию виртуальной машины, потребляющую минимальное количество газа, но вызывающую значительные вычисления в сети Ethereum. Это привело к переполнению памяти, что эффективно нарушило работу целого узла Ethereum. Этот инцидент подчеркивает сложные детали, возникающие при работе с большим и абстрактным решением, таким как создание виртуальной машины.",
  "Moving forward, a significant shift occurred around the end of the decade, particularly in 2020, with the advent of Ethereum 2.0. However, Ethereum 2.0 has now been deprecated, and I would characterize the real breakthrough as starting around 2019-2020. During this period, there was a true technological breakthrough in Ethereum, moving towards the concept of Ethereum 2.0. The moment of engineering change in Ethereum's architecture can be considered the event known as \"the merge,\" where the functionalities of the beacon chain were combined. The merge marked a significant shift in the paradigm of Ethereum, transitioning it into a slightly different state than what was on the board. The actual engineering change in Ethereum's architecture can be associated with \"the merge,\" where the functionalities of the beacon chain were integrated. For a detailed history of this, you can refer to the ethereum.org website, which provides an excellent article on the coexistence of the traditional Ethereum blockchain with the parallel blockchain launched in 2015 and the Ethereum Virtual Machine.": "Двигаясь вперед, произошло значительное изменение в конце десятилетия, особенно в 2020 году, с появлением Ethereum 2.0. Однако Ethereum 2.0 теперь устарел, и я бы характеризовал настоящий прорыв начиная с 2019-2020 года. В этот период произошел настоящий технологический прорыв в Ethereum, двигаясь в направлении концепции Ethereum 2.0. Момент инженерного изменения в архитектуре Ethereum можно считать событием, известным как \"слияние\", когда функциональности цепочки маяка были объединены. Слияние отметило значительное изменение в парадигме Ethereum, переводя его в немного другое состояние, чем то, что было на доске. Фактическое инженерное изменение в архитектуре Ethereum можно ассоциировать с \"слиянием\", когда функциональности цепочки маяка были интегрированы. Для подробной истории этого вы можете обратиться на сайт ethereum.org, который предоставляет отличную статью о сосуществовании традиционного блокчейна Ethereum с параллельным блокчейном, запущенным в 2015 году, и Ethereum Virtual Machine.",
  "When the merge occurred, we witnessed a new architectural representation, both at the network level and for individual nodes interacting with the Ethereum network. What was the actual change? For many, the merge signifies the transition from proof-of-work to proof-of-stake, which is indeed significant. It implies increased efficiency and fine-tuning, but it's still a tuning relative to one of the parameters. However, the more noteworthy internal engineering change for each network client was the split. There was no longer a single specific network client or a monolithic architecture. Instead, we got two components of a single node interacting with the Ethereum network.": "Когда произошло слияние, мы стали свидетелями нового архитектурного представления как на уровне сети, так и для отдельных узлов, взаимодействующих с сетью Ethereum. Что же было на самом деле изменено? Для многих слияние означает переход от доказательства работы к доказательству доли, что действительно значительно. Это подразумевает увеличение эффективности и настройку, но это все еще настройка относительно одного из параметров. Однако более заметным внутренним инженерным изменением для каждого сетевого клиента было разделение. Больше не было одного конкретного сетевого клиента или монолитной архитектуры. Вместо этого мы получили два компонента одного узла, взаимодействующих с сетью Ethereum.",
  "The first part, which I labeled \"beacon chain\" on the diagram, essentially represents a collective image of all the innovations that came into the Ethereum client at the moment of the merge. The second part is the preserved virtual machine. Nevertheless, it's worth adding something here too. Dialogues truly began about replacing the virtual machine, which was exclusively tailored to work with smart contracts and smart contracts in a specific language—Solidity. This is because, by 2015, there were practically no interpreters left for smart contracts in languages other than Solidity, and the architecture appeared somewhat one-sided from the perspective of an Ethereum programmer. You learn a snippet of JavaScript in the form of Solidity, write smart contract code on it, and get your DApp, like Uniswap, for example.": "Первая часть, которую я обозначил как \"цепь маяка\" на диаграмме, по сути представляет собой коллективное изображение всех инноваций, которые появились в клиенте Ethereum на момент слияния. Вторая часть - сохраненная виртуальная машина. Тем не менее, стоит добавить здесь что-то еще. Диалоги действительно начались о замене виртуальной машины, которая была исключительно нацелена на работу со смарт-контрактами и смарт-контрактами на определенном языке - Solidity. Это потому, что к 2015 году практически не осталось интерпретаторов для смарт-контрактов на языках, отличных от Solidity, и архитектура казалась отчасти односторонней с точки зрения программиста Ethereum. Вы изучаете кусочек JavaScript в виде Solidity, пишете на нем код смарт-контракта и получаете свое DApp, например, Uniswap.",
  "Since the emergence of a more complex Ethereum architecture, discussions have revolved around the idea that the virtual machine, which existed as a somewhat monolithic element from 2015, can also be replaced in the new architecture. The conversation shifted towards replacing it with something like WebAssembly (Wasm) or a more interesting solution from the perspective of writing code for the world computer. You could say, \"Wasm with a question mark.\"": "С момента появления более сложной архитектуры Ethereum обсуждения крутились вокруг идеи, что виртуальная машина, существовавшая как своего рода монолитный элемент с 2015 года, также может быть заменена в новой архитектуре. Разговор сместился в сторону замены ее на что-то вроде WebAssembly (Wasm) или более интересного решения с точки зрения написания кода для мирового компьютера. Можно сказать, \"Wasm с вопросительным знаком.\"",
  "From the perspective of the Beacon Chain, it indeed operates on proof-of-stake, but what's more interesting is the inclusion of Gasper. This represents a modification of the original ideas about Casper. Casper, often referred to as the friendly ghost finality gadget, was introduced, perhaps even as early as Defcon 3 or 4, and maybe even discussed at Defcon 2—I don't recall precisely. But at the EthCC conference in Paris, which definitely took place in 2018, Vlad Zamfir and Vitalik, from different rooms, were discussing the emergence of Casper as a friendly ghost, overseeing participants in proof-of-stake and coming to the aid of the network when a node misbehaves. From this idea of Casper, Gasper emerges. Without delving into terminology too much, the consensus algorithm undergoes a shift, changing not only in terms of simplicity but also becoming more complex, similar to Polkadot. As I mentioned earlier, Polkadot has two consensus algorithms, Babe and Grandpa. Similarly, with Ethereum's Beacon Chain functionality, achieving consensus and finality is not as instantaneous. It involves epochs, and the network operates on a more complex scenario, reaching a state that is already somewhat dynamic, not frozen, and is essentially carved in stone.": "С точки зрения Beacon Chain, она действительно работает на доказательстве доли, но еще более интересным является включение Gasper. Это представляет собой модификацию первоначальных идей о Casper. Casper, часто называемый дружелюбным призрачным устройством окончательности, был представлен, возможно, даже на Defcon 3 или 4, и, возможно, даже обсуждался на Defcon 2—я не помню точно. Но на конференции EthCC в Париже, которая определенно состоялась в 2018 году, Влад Замфир и Виталик, из разных комнат, обсуждали появление Casper как дружелюбного призрака, наблюдающего за участниками в доказательстве доли и приходящего на помощь сети, когда узел ведет себя неправильно. Из этой идеи Casper появляется Gasper. Без углубления в терминологию, алгоритм консенсуса проходит сдвиг, меняясь не только в плане простоты, но и становясь более сложным, аналогично Polkadot. Как я уже упоминал ранее, у Polkadot есть два алгоритма консенсуса, Babe и Grandpa. Аналогично, с функциональностью Beacon Chain Ethereum достижение консенсуса и окончательности не происходит мгновенно. Это включает эпохи, �� сеть работает в более сложном сценарии, достигая состояния, которое уже в некоторой степени динамично, не заморожено и, по сути, высечено в камне.",
  "What can be added in relation to 2024? For me, it was a prolonged observation and an attempt to understand whether Ethereum would eventually implement sharding or not. Sharding is the ability to exist not with a single blockchain but with multiple blockchains within one network. As I observed the merge and the simultaneous rise of Layer 2 (L2) networks, questions arose in my mind about whether sharding would indeed materialize. Sharding seemed interesting to me due to its homogeneity—having multiple chains that are almost identical, lacking any specific characteristics. It appeared to be an interesting approach, but not as flexible as a heterogeneous approach. In L2 networks, even several years ago, I could see the heterogeneity of Ethereum, its ability to work with various types of more specific blockchains. I was curious about the direction it would take—whether sharding, with its homogeneity, would displace L2 solutions or whether L2 solutions with a heterogeneous approach would saturate the Beacon Chain and the main nodes of the Ethereum network.": "Что можно добавить относительно 2024 года? Для меня это было продолжительное наблюдение и попытка понять, реализует ли Ethereum в конечном итоге шардинг или нет. Шардинг - это способность существовать не с одной блокчейном, а с несколькими блокчейнами в одной сети. Пока я наблюдал слияние и одновременный рост сетей Layer 2 (L2), у меня возникли вопросы о том, действительно ли шардинг воплотится в жизнь. Шардинг показался мне интересным из-за его однородности - наличие нескольких цепочек, которые почти идентичны, не имея каких-либо специфических характеристик. Это показалось мне интересным подходом, но не таким гибким, как гетерогенный подход. В сетях L2, даже несколько лет назад, я видел гетерогенность Ethereum, его способность работать с различными типами более конкретных блокчейнов. Меня интересовало, в каком направлении это пойдет - сможет ли шардинг с его однородностью вытеснить решения L2 или же решения L2 с гетерогенным подходом насытят Beacon Chain и основные узлы сети Ethereum.",
  "Today, in 2024, based on articles on ethereum.org, it seems that sharding as a concept has been pushed back, and the focus is on helping various L2 networks integrate with the Beacon Chain and align with the main chain's functionality, which is now divided into two elements in the Ethereum network's architecture.": "Сегодня, в 2024 году, основываясь на статьях на ethereum.org, кажется, что шардинг как концепция был отложен, и фокус сосредоточен на помощи различным сетям L2 интегрироваться с Beacon Chain и выравниваться с функциональностью основной цепи, которая теперь разделена на два элемента в архитектуре сети Ethereum.",
  "Therefore, without delving into the details of how L2 networks are structured—although we'll touch upon that when we fill in the second part of the board—we should imagine that Ethereum is now a kind of Beacon Chain, a beacon, a guiding star for numerous L2 networks. These L2 networks can have more specific functionality, executing their logic according to a set of individual functions. This is somewhat in line with the idea of a Swiss Army knife—not making Ethereum a Swiss Army knife, but L2 networks are starting to differentiate in architecture. They duplicate the functionality of the abstract computing machine of Ethereum but perform it with lower gas costs or within their specific segment. Some are already thinking about tuning and making their L2 layer more efficient, focusing on specific functional capabilities. Thus, in my opinion, we are witnessing the emergence of heterogeneity in the world computer that aimed to be homogeneous. Also, it's essential not to forget that decentralized applications (dApps) still exist within the main blockchain, within that same blockchain that started in 2015. This means that during the merge, during the transition to the new architectural state, there was no wipeout, no erasure of the previous history. All decentralized applications and smart contracts underlying these applications continued to exist, and they continue to exist today, and probably tomorrow. This is a question that we will explore using Polkadot as an example, but there is still a feeling that it will be possible to settle a decentralized application in the Beacon Chain—dApps.": "Следовательно, не вдаваясь в детали о том, как устроены L2-сети - хотя мы коснемся этого, когда заполним вторую часть доски - мы должны представить, что Ethereum теперь является своего рода Beacon Chain, маяком, направляющей звездой для многочисленных L2-сетей. Эти L2-сети могут иметь более конкретную функциональность, выполняя свою логику в соответствии с набором индивидуальных функций. Это в некоторой степени соответствует идее швейцарского армейского ножа - не делая Ethereum швейцарским армейским ножом, но L2-сети начинают дифференцироваться в архитектуре. Они дублируют функциональность абстрактной вычислительно�� машины Ethereum, но выполняют ее с более низкими затратами газа или в пределах своего конкретного сегмента. Некоторые уже думают о настройке и улучшении эффективности своего L2-уровня, сосредотачиваясь на конкретных функциональных возможностях. Таким образом, на мой взгляд, мы становимся свидетелями появления гетерогенности в мировом компьютере, который стремился быть однородным. Кроме того, важно не забывать, что децентрализованные приложения (dApps) по-прежнему существуют в основной блокчейн, в том же самом блокчейне, который начался в 2015 году. Это означает, что во время слияния, во время перехода к новому архитектурному состоянию, не было стирания, не было стирания предыдущей истории. Все децентрализованные приложения и смарт-контракты, лежащие в их основе, продолжали существовать, и они продолжают существовать и сегодня, и, вероятно, завтра. Это вопрос, который мы рассмотрим на примере Polkadot, но все еще есть ощущение, что будет возможно разместить децентрализованное приложение в Beacon Chain - dApps.",
  "In summary, let's imagine the engineering implementation of today's Ethereum as a world computer. We have each network node consisting of two parts. The first layer is responsible for the Ethereum Virtual Machine (EVM), the actual functionality of the virtual machine or Turing complete machine, if we talk in theoretical terms. Perhaps we will see the emergence of alternatives to the virtual machine designed in 2015. These alternatives will likely surpass it in terms of more abstract programming possibilities than writing smart contracts in Solidity. Meanwhile, smart contracts in Solidity continue to feel comfortable. If you want to write functionality for the Ethereum main chain without creating any infrastructure on top of Ethereum, without offloading any calculations to make them cheaper, and so on, decentralized applications that you can write as smart contracts can still be housed in Ethereum's main blockchain. At the same time, Beacon Chain functionality has emerged, separating the consensus logic between validators from the main protocol of the computing machine. This allows for additional flexibility in how consensus should work and how it should be further modified without affecting the virtual machine itself. The example of Shanghai and Defcon 2, where a small opcode error caused a shutdown of part of the infrastructure, hints that it would be good to have such complex functionalities separated into two parts.": "В заключение, давайте представим инженерную реализацию сегодняшнего Ethereum как мирового компьютера. У нас есть каждый сетевой узел, состоящий из двух частей. Первый уровень отвечает за Ethereum Virtual Machine (EVM), фактическую функциональность виртуальной машины или машины, полностью совместимой с машиной, если говорить в теоретических терминах. Возможно, мы увидим появление альтернатив виртуальной машине, разработанной в 2015 году. Эти альтернативы, вероятно, превзойдут ее в плане более абстрактных программных возможностей, чем написание смарт-контрактов на Solidity. Тем временем смарт-контракты на Solidity продолжают чувствовать себя комфортно. Если вы хотите написать функциональность для основной цепи Ethereum, не создавая какой-либо инфраструктуры поверх Ethereum, не перегружая какие-либо вычисления, чтобы сделать их дешевле и так далее, децентрализованные приложения, которые вы можете написать как смарт-контракты, по-прежнему могут находиться в основной блокчейн Ethereum. В то же время появилась функциональность Beacon Chain, разделяющая логику консенсуса между валидаторами от основного протокола вычислительной машины. Это позволяет дополнительную гибкость в том, как должен работать консенсус и как его следует дальше модифицировать, не затраги��ая саму виртуальную машину. Пример Шанхая и Defcon 2, где небольшая ошибка опкода вызвала отключение части инфраструктуры, намекает на то, что было бы хорошо иметь такие сложные функциональности разделены на две части.",
  "What's interesting about the Beacon Chain? It is a more complex, comprehensive algorithm for achieving network synchronicity and finalization with the introduction of concepts such as \"epoch,\" and the presence of a ghost living within the network.": "Что интересно в Beacon Chain? Это более сложный, всесторонний алгоритм достижения синхронизации сети и финализации с введением концепций, таких как \"эпоха\", и наличие призрака, живущего внутри сети.",
  "Lastly, what is important to consider now is that Ethereum is effectively putting an end to homogeneity, to the idea of getting a hundred identical blockchains working with the same virtual machine, where smart contracts written in Solidity can reside. Instead, various projects are proposing their own architectures or the same virtual machine taken beyond the main blockchain's limits. Alternatively, they are trying to build their more specific application, which, at the level of the Beacon Chain's main chain, is a smart contract written in Solidity. This is the current representation of Ethereum, which did not become Ethereum 2.0. It remains the same Ethereum—a project that once started with proof of work + Turing complete machine, transforming into this architecture.": "Наконец, что важно учитывать сейчас, это то, что Ethereum фактически ставит конец однородности, идее о том, чтобы получить сто одинаковых блокчейнов, работающих с одной и той же виртуальной машиной, где смарт-контракты, написанные на Solidity, могут находиться. Вместо этого различные проекты предлагают свои собственные архитектуры или ту же виртуальную машину, выведенную за пределы основной цепи блокчейна. В качестве альтернативы они пытаются построить свое более конкретное приложение, которое, на уровне основной цепи Beacon Chain, является смарт-контрактом, написанным на Solidity. Это текущее представление Ethereum, которое не стало Ethereum 2.0. Он остается тем же Ethereum - проектом, который однажды начался с доказательства работы + машины, полностью совместимой с машиной, превращаясь в эту архитектуру.",
  "Now, let's take a look at how Polkadot emerged and evolved over the last 5 years. Polkadot came into existence five years after Ethereum, born out of the team that developed one of the best clients for Ethereum—Parity. Many might remember their web client, which, compared to Geth and other implementations, was probably much more pleasant to work with, at least from personal experience and the experience of colleagues.": "Теперь давайте посмотрим, как появился и развивался Polkadot за последние 5 лет. Polkadot появился через пять лет после Ethereum, родившись из команды, которая разработала одного из лучших клиентов для Ethereum - Parity. Многие, возможно, помнят их веб-клиент, который, по сравнению с Geth и другими реализациями, был, вероятно, намного приятнее работать, по крайней мере, из личного опыта и опыта коллег.",
  "In the end, after a couple of months of the relay chain's existence without any decentralized application functionality, without the ability to connect your parachain or L2 network, without user capabilities, the network transitioned from an authority state to proof of stake. This gave developers the ability to upload their runtimes.": "В конце концов, после нескольких месяцев существования цепи ретрансляции без какой-либо функциональности децентрализованных приложений, без возможности подключения вашей парачейн или сети L2, без возможностей пользователей, сеть перешла из состояния власти в доказательство доли. Это дало разработчикам возможность загружать свои временные интервалы.",
  "At this point, it's also interesting to discuss the differences between today's Ethereum and how the central part of Polkadot is structured. From the perspective of the heart, which we've already discussed, the picture will be absolutely the same not only for Ethereum and Polkadot but for any project that wants to be presented as an abstract computing machine. However, from an engineering and architectural standpoint, it's fascinating to observe Beacon Chain & Relay Chain. Here, we have a virtual machine, which has been inherited since 2015, but alternatives are being proposed. In the relay chain, there's the ability to upload your runtime. The runtime is, in fact, your virtual machine. For example, some parachains completely emulate the Ethereum Virtual Machine. It's written as a runtime, meaning you can essentially upload an Ethereum Virtual Machine analog to the parachain level in Polkadot or write more specific logic that works with four or five functions. Recall part one about the ideas— you can write your Swiss Army knife, but it won't require creating the entire infrastructure. You can implement specific functionality with certain functions at the runtime level, put it into the Polkadot relay chain, and the immutability of this runtime will be ensured by Polkadot validators.": "На этом этапе также интересно обсудить различия между сегодняшним Ethereum и структурой центральной части Polkadot. С точки зрения сердца, о котором мы уже говорили, картинка будет абсолютно такой же не только для Ethereum и Polkadot, но и для любого проекта, который хочет быть представлен как абстрактная вычислительная машина. Однако с точки зрения инженерии и архитектуры увлекательно наблюдать Beacon Chain & Relay Chain. Здесь у нас есть виртуальная машина, которая была унаследована с 2015 года, но предлагаются альтернативы. В цепи ретрансляции есть возможность загрузить свой временной интервал. Временной интервал, на самом деле, ваша виртуальная машина. Например, некоторые парачейны полностью эмулируют Ethereum Virtual Machine. Он написан как временной интервал, что означает, что вы в основном можете загрузить аналог Ethereum Virtual Machine на уровне парачейна в Polkadot или написать более конкретную логику, которая работает с четырьмя или пятью функциями. Вспомните часть первую об идеях - вы можете написать свой швейцарский нож, но это не потребует создания всей инфраструктуры. Вы можете реализовать конкретную функциональность с определенными функциями на уровне временного интервала, поместить ее в цепь ретрансляции Polkadot, и неизменяемость этого временного интервала будет обеспечена валидаторами Polkadot.",
  "What happens next? Over the course of about a year, a layer of parachains begins to form around the relay chain. In terms of Ethereum implementation, you could say that L2 networks are quite similar to parachains. However, there's one interesting cross-network distinction that I find fascinating in Polkadot, and I'm trying to further understand how it will develop—namely, the second layer of validation and data availability checks. After a couple of years, Polkadot takes a shape like this. It's not just a relay chain where proof-of-stake validators protect the runtime of future parachains; an additional and crucial layer of data validation and availability checking emerges from parachains.": "Что произойдет дальше? В течение примерно года вокруг цепи ретрансляции начинает формироваться слой парачейнов. В терминах реализации Ethereum можно сказать, что L2-сети довольно похожи на парачейны. Однако есть одно интересное перекрестное различие между сетями, которое я нахожу увлекательным в Polkadot, и я пытаюсь дальше понять, как это будет развиваться - а именно, второй уровень проверки и проверки доступности данных. Через пару лет Polkadot принимает такой вид. Это не просто цепь ретрансляции, где валидаторы доказательства доли защищают работу будущих парачейнов; дополнительный и критически важный уровень проверки данных и проверки доступности возникает из парачейнов.",
  "As you look at this diagram, try to notice the analogies that arise and the differences in engineering implementation details. So, what does this represent, and how does this scheme compare with Ethereum? We have an L2 project, in this case, with Polkadot, it's a parachain. A parachain also generates information blocks, which then go to the relay chain to be combined and release a relay chain block as the sum of all headers, headers, and more headers. The parachain collects transactions in a block using collators, which are not involved in validation. They don't stake anything in the relay chain; they only use the runtime, which is in the relay chain. They fetch it, apply it to transactions, perform necessary state transitions, form a block, and, crucially, provide proof of validity—a stamp containing cryptographic proofs that the collator correctly assembled the block. This information goes to the external validation ring of the relay chain. In this ring, there are internal validators of Polkadot—parachain collators. Again, they don't stake anything directly from the relay chain's point of view. Parachain implementations sometimes introduce their consensus among collators, and some don't. For example, in Robonomics, implementing a parachain, we find this paradigm more interesting, less burdensome, and it makes the network simpler while still remaining functionally substantial. Any collator, without reaching consensus with anyone—verified by us—can propose a block and some proof to the external layer. This is precisely why blocks are proposed, proofs of block assembly validity are offered, and there's an external ring. We don't need any consensus from parachain validators. Anyone can generate a block and send it, and if this node of the collator sends incorrect information to the parachain validators on the external ring, the validator at this level will reject it. It won't pass into the central part. But let's say the block was provided correctly by the collator. Our transactions got in; the collator calculated them, applying the runtime stored in the relay chain, executed all state transitions, gathered some proof of validity—validity of the assembled block—and passed it to the external ring of the relay chain. Here, every epoch, which is also part of the finalization, every epoch has validators from the relay chain diverging into parachains. Some of them stay in the center, and the others go to parachains. Their number ranges from 16 to 64 validators, and this figure, I believe, will change in the specification—somewhere more, somewhere less. However, parachain validators re-verify the information from one selected group of validators about everything coming from the collator being correct, that work has been done in accordance with the runtime, and that the proof of validity is indeed valid. The selected segment of relay chain validators who already have something staked respond, or rather, chirp among themselves. They respond to the chosen main block producer of the parachain, so to speak, saying,": "Просматривая эту диаграмму, попробуйте заметить аналогии, которые возникают, и различия в деталях инженерной реализации. Итак, что это представляет, и как этот схема сравнивается с Ethereum? У нас есть проект L2, в данном случае с Polkadot, это парачейн. Парачейн также генерирует информационные блоки, которые затем отправляются на ретрансляционную цепь для объединения и выпуска блока ретрансляционной цепи в виде суммы всех заголовков, заголовков и еще заголовков. Парачейн собирает транзакции в блок, используя коллаторов, которые не участвуют в проверке. Они не ставят ничего на ретрансляционную цепь; они только используют время выполнения, которое находится в ретрансляционной цепи. Они получают ��го, применяют к транзакциям, выполняют необходимые переходы состояний, формируют блок и, что самое важное, предоставляют доказательство правильности - печать, содержащую криптографические доказательства того, что коллатор правильно собрал блок. Эта информация идет на внешнее кольцо валидации ретрансляционной цепи. В этом кольце есть внутренние валидаторы Polkadot - коллаторы парачейна. Опять же, они не ставят ничего прямо с точки зрения ретрансляционной цепи. Реализации парачейна иногда вводят свое согласие среди коллаторов, а некоторые нет. Например, в Robonomics, реализуя парачейн, мы находим эту парадигму более интересной, менее обременительной и делающей сеть более простой, сохраняя при этом функциональную значимость. Любой коллатор, не д��стигая согласия с кем-либо - проверенный нами - может предложить блок и некоторое доказательство на внешний слой. Вот почему предлагаются блоки, предлагаются доказательства правильности сборки блока, и есть внешнее кольцо. Нам не нужно никакого согласия от валидаторов парачейна. Любой может сгенерировать блок и отправить его, и если этот узел коллатора отправляет неверную информацию валидаторам парачейна на внешнем кольце, валидатор на этом уровне отклонит ее. Она не пройдет в центральную часть. Но предположим, что блок был предоставлен правильно коллатором. Наши транзакции попали; коллатор их вычислил, применяя время выполнения, хранящееся в ретрансляционной цепи, выполнил все переходы состояний, собрал некоторое доказательство пра��ильности - правильность собранного блока - и передал его на внешнее кольцо ретрансляционной цепи. Здесь, каждую эпоху, которая также является частью завершения, каждая эпоха имеет валидаторов из ретрансляционной цепи, расходящихся в парачейны. Некоторые из них остаются в центре, а другие идут в парачейны. Их количество варьируется от 16 до 64 валидаторов, и это число, я верю, изменится в спецификации - где-то больше, где-то меньше. Тем не менее, валидаторы парачейна повторно проверяют информацию из выбранной группы валидаторов о том, что все, что поступает от коллатора, является правильным, что работа выполнена в соответствии с временем выполнения, и что доказательство правильности действительно действительно. Выбранный сегмент валидаторов ретрансляционной цепи, у которых уже что-то ставится, отвечают, или, скорее, щебечут между собой. Они отвечают выбранному основному производителю блоков парачейна, так сказать, говоря,",
  "\"Yes, we agree. There are no problems. You can carry it through the entire external ring inside.\"": "\"Да, мы согласны. Проблем нет. Вы можете проходить через весь внешний кольцевой проход.\"",
  "And thus, almost all information formed on the parachain collators, with verification on the external ring, enters the internal one. The lower part, not that it's physically at the bottom, still constitutes the external ring—data availability. Data starts to be checked at this stage, meaning that on the external ring, not only the correctness of block assembly is verified, but the process of preparing for distribution within the Polkadot network begins, ensuring that the block information will not be lost in the future. Here, precisely, is what I mentioned in the second part about chunks, like CD RW. At this stage of block preparation for transfer to the internal ring, the data availability layer is formed as a service, something that is currently also attempted by some projects in Ethereum. Some projects put additional redundant information directly into smart contracts, necessary for checking what is happening on the L2 layer and, if necessary, slashing or punishing those who did it incorrectly. It's impossible to overcome the external ring without distributing block information and without rechecking dozens of nodes with stakes laid down on the assumption that the runtime must work correctly.": "И так, почти вся информация, сформированная на коллаторах парачейн, с верификацией на внешнем кольце, попадает во внутреннее. Нижняя часть, не то чтобы она физически находится внизу, все еще составляет внешнее кольцо - доступность данных. На этом этапе начинается проверка данных, что означает, что на внешнем кольце проверяется не только правильность сборки блока, но и начинается процесс подготовки к распространению в сети Polkadot, обеспечивая сохранение информации о блоке в будущем. Именно здесь, во второй части, я упомянул о кусках, как CD RW. На этом этапе подготовки блока к передаче во внутреннее кольцо формируется слой доступности данных как сервис, что в настоящее время также пытаются сдел��ть некоторые проекты в Ethereum. Некоторые проекты добавляют дополнительную избыточную информацию непосредственно в смарт-контракты, необходимую для проверки того, что происходит на уровне L2 и, при необходимости, наказания тех, кто сделал это неправильно. Невозможно преодолеть внешнее кольцо без распространения информации о блоке и без повторной проверки десятков узлов с заложенными ставками на предположение, что время выполнения должно работать правильно.",
  "Thus, information that has passed through the external ring is already quite trustworthy, probably yes, you can say that, and on the internal ring, work is mainly done not with parachain blocks, but their block headers are collected into one big header. That is, from many headers, one header of a relay chain block is assembled—a mechanism of linking in Shared Security, as mentioned in Polkadot, which ensures the security of parachains. One could say that parachains are validated and reach a state where the service exists in a distributed decentralized form on the external ring. In the internal ring, the information that has entered attempts to come together in one hyperblock, which should precisely link everything together. There are no calculations happening there; there is no recalculation of absolutely everything. The assembly of the final block takes place, so to speak, in the current iteration of the world computer, to put a point on the question of whether the transaction has passed in a particular parachain. We must assemble a hyperblock that contains not all the information from the parachains but gathers all the headers verified on the external ring of parachains into one large block. And thus, our world computer in Polkadot operates.": "Таким образом, информация, прошедшая через внешнее кольцо, уже довольно надежна, вероятно, да, можно сказать, и на внутреннем кольце работа в основном ведется не с блоками парачейн, а их заголовки блоков собираются в один большой заголовок. Из многих заголовков собирается один загол��вок блока цепочки реле - механизм связи в Shared Security, как упоминалось в Polkadot, который обеспечивает безопасность парачейн. Можно сказать, что парачейны проверены и достигли состояния, когда сервис существует в распределенной децентрализованной форме на внешнем кольце. На внутреннем кольце информация, которая вошла, пытается объединиться в один гиперблок, который должен точно связать все вместе. Там не происходят вычисления; нет пересчета абсолютно всего. Сборка окончательного блока происходит, так сказать, в текущей итерации мирового компьютера, чтобы поставить точку в вопросе о том, прошла ли транзакция в конкретном парачейне. Нам нужно собрать гиперблок, который содержит не всю информацию из парачейнов, но собирает все заголовки, прове��енные на внешнем кольце парачейнов, в один большой блок. И так, наш мировой компьютер в Polkadot работает.",
  "Let's take another look at these two schemes together: relay chain, beacon chain, runtime, secured by proof of stake, where someone stakes their funds to validate that they will always perform their work correctly. There's a virtual machine where you can also stake your funds, and if you perform any computation or state transition not in accordance with the Ethereum Virtual Machine's specification, you'll be penalized.": "Давайте еще раз взглянем на эти две схемы вместе: цепь ретрансляции, цепь маяка, среда выполнения, обеспеченная доказательством доли, где кто-то ставит свои средства, чтобы подтвердить, что они всегда будут выполнять свою работу правильно. Есть виртуальная машина, где вы также можете поставить свои средства, и если вы выполняете какие-либо вычисления или переходы состояний не в соответствии с спецификацией виртуальной машины Ethereum, вас будут наказывать.",
  "In Polkadot, there's an additional external layer, which seems to be one of the main advantages, such pleasant perks of the engineering implementation that, in my opinion, should be present here. It should appear between L2 networks and the beacon chain, which exists in Ethereum. By the way, some say that the term \"beacon chain\" is dying out again and is misunderstood, but I really like to use it in analogy with the \"relay chain,\" a term from Ethereum's roadmap.": "В Polkadot есть дополнительный внешний слой, который, кажется, является одним из основных преимуществ, таких приятных бонусов инженерной реализации, которые, на мой взгляд, должны быть здесь. Он должен появиться между сетями L2 и цепью маяка, ��оторая существует в Ethereum. Кстати, некоторые говорят, что термин \"цепь маяка\" снова умирает и недопонимается, но мне действительно нравится использовать его в аналогии с \"цепью ретрансляции\", термином из дорожной карты Ethereum.",
  "And perhaps one more interesting story in this part of the lecture: so far, we can hardly imagine proper cross-chain messages between L2 networks in Ethereum. Maybe I missed something in the papers, but when you don't have an external ring and issues like collators, paravalidators, and data availability services are not resolved, thinking about how two L2 layers can communicate is challenging. Yet, in Polkadot, it exists. Even horizontally, through the relay chain, meaning directly, one can send a transaction securely from one parachain to another, without trusting any bridges between these two parachains. This is another crucial functionality that will likely need to be implemented at the level of connecting L2 networks. Smart contracts in Ethereum communicate well. We have created many chains of linked smart contracts, where one triggers another. With this, there is no problem. But when we say that almost all applications are moving to the L2 layer in a heterogeneous network, I hear that if you live in a specific area, you won't be able to get out. That's not the case at the level of parachains and implementation in Polkadot. Both architectures are worth watching, as, in my opinion, the engineering implementation follows the mainstream path of becoming a global computer. They differ slightly, but there are many similarities. There's an enormous amount of engineering work everywhere. As we see, human civilization, in the form of a multitude of researchers, engineers, and growing developers with significant resources for further development, is moving roughly in the same direction from the smallest early stage to probably some future establishment of the world's computer, all on the same tracks.": "И, возможно, еще одна интересная история в этой части лекции: до сих пор мы едва можем представить себе правильные межцепочные сообщения между L2-сетями в Ethereum. Может быть, я что-то упустил в статьях, но когда у вас нет внешнего кольца и проблемы, такие как коллаторы, паравалидаторы и службы доступности данных не решены, думать о том, как два уровня L2 могут общаться, вызывает трудности. Однако в Polkadot это существует. Даже горизонтально, через ретрансляционную цепь, что означает, что можно отправить транзакцию надежно с одной парачейны на другую, не доверяя никаким мостам между этими двумя парачейнами. Это еще одна важная функциональность, которую, вероятно, придется реализовать на уровне соединения сетей L2. Смарт-контракты в Ethereum хорошо общаются. Мы создали множество цепочек связанных смарт-контрактов, где один вызывает другой. С этим нет проблем. Но когда мы говорим, что почти все приложения переходят на уровень L2 в гетерогенной сети, я слышу, что если вы живете в определенной области, вы не сможете выбраться. Но это не так на уровне парачейн и реализации в Polkadot. Обе архитектуры стоят того, чтобы следить за ними, поскольку, на мой взгляд, инженерная реализация следует основному пути становления глобальным компьютером. Они немного отличаются, но есть много сходств. Везде огромное количество инженерной работы. Как мы видим, человеческая цивилизация, в виде множества исследователей, инженеров и растущих разработчиков с значительными ресурсами для дальнейшего развития, движется примерно в одном направлении от самого раннего этапа к, вероятно, будущему установлению мирового компьютера, все по одним и тем же путям.",
  "Part 1: The Idea of a World Computer": "Часть 1: Идея мирового компьютера",
  "This is the first part of a four-part lecture titled \"World Computer in Your Home.\" In the first part, titled \"The Idea of a World Computer,\" I want to analyze and share my own reflections that have, in a broader historical context, gathered around the hashtag \"world computer.\"": "Это первая часть четырехчастной лекции под названием \"Мировой компьютер у вас дома\". В первой части, под названием \"Идея мирового компьютера\", я хочу проанализировать и поделиться своими собственными размышлениями, которые, в более широком историческом контексте, собрались вокруг хэштега \"мировой компьютер\".",
  "To begin with, let's try to gather a generalized understanding of what a world computer is, without delving into terminology or specific technical details. If you take your mobile phone in hand and look at the icons, you can notice that practically every application on the phone has two major segments or areas of operation.": "Давайте попробуем сначала собрать обобщенное понимание того, что такое мировой компьютер, не углубляясь в терминологию или конкретные технические детали. Если взять в руку мобильный телефон и посмотреть на значки, можно заметить, что практически у каждого приложения на телефоне есть две основные части или области действия.",
  "The first is the local part, meaning, for example, your calculator or notes application. This is a completely local application that requires almost no external communication. Although even applications like the notes app on an iPhone are a bit more than that, let's focus on the more austere Open Source side of applications for Android phones, so to speak.": "Первая - это локальная часть, то есть, например, ваш калькулятор или приложение для заметок. Это полностью локальное приложение, которое практически не требует внешнего общения. Хотя даже приложения, такие как приложение для заметок на iPhone, немного больше, чем это, давайте сосредоточимся на более строгой стороне приложений с открытым исходным кодом для телефонов на Android, так сказать.",
  "The second part requires cloud infrastructure, and here, when the question of cloud infrastructure arises, a multitude of quite complex stories begins: who owns this cloud infrastructure, what capabilities do developers have to add features to an application, and in general, how does the user own this application? What capabilities and responsibilities does the user have when dealing with an application that exists not only on their phone but also in some infrastructure beyond their pocket or palm? The world computer is precisely one example of how the developer community responds to these obvious questions. Obvious questions about creating higher-quality applications for your mobile phone, laptop, server, and any other smart device that needs to connect to the network and obtain knowledge from there.": "Вторая часть требует облачной инфраструктуры, и здесь, когда возникает вопрос об облачной инфраструктуре, начинается множество довольно сложных историй: кому принадлежит эта облачная инфраструктура, какие возможности есть у разработчиков добавлять функции в приложение и вообще, как пользователь владеет этим приложением? Какие возможности и обязанности у пользо��ателя, когда он имеет дело с приложением, которое существует не только на его телефоне, но и в какой-то инфраструктуре за его карманом или ладонью? Мировой компьютер - это именно один из примеров того, как сообщество разработчиков отвечает на эти очевидные вопросы. Очевидные вопросы о создании приложений более высокого качества для вашего мобильного телефона, ноутбука, сервера и любого другого умного устройства, которое должно подключаться к сети и получать оттуда знания.",
  "The world computer is, accordingly, the same cloud, the same infrastructure that exists on the internet, with which developers can interact and publish their applications. As a user, you can install, download, and run them on your PC. However, with one interesting, crucial feature: no one actually owns the infrastructure or cloud of the world computer. There is no specific company, jurisdiction, or individual on Earth who can determine and say whether you can publish your application there or not, whether you have the right to access this world computer infrastructure to receive the provided service. Therefore, the world computer is a cloud in which any developer can place their application, and any user with access solely to the internet network and not to a specific IP address behind a firewall can use the application by paying for computations from their pocket.": "Мировой компьютер, соответственно, является тем же облачным сервисом, той же инфраструктурой, которая существует в интернете, с которой разработчики могут взаимодействовать и публиковать свои приложения. Как пользователь, вы можете установить, загрузить и запустить их на своем ПК. Однако с одной интересной, ключевой особенностью: никто фактически не владеет инфраструктурой или облаком мирового компьютера. Нет конкретной компании, юрисдикции или человека на Земле, который может определить и сказать, можете ли вы опубликовать свое приложение там или нет, имеете ли право на доступ к этой инфраструктуре мирового компьютера для получения предоставляемых услуг. Поэтому мировой компьютер - это облако, в котором любой разработчик может разместить свое приложение, и любой пользователь с доступом исключительно к интернет-сети, а не к конкретному IP-адресу за брандмауэром, может использовать приложение, оплачивая вычисления из своего кармана.",
  "Here's the story in a generalized format. There is no mention of \"blockchain,\" no mention of \"smart contracts,\" but these concepts are underneath. Let's still acknowledge: a world computer is a cloud infrastructure that is sovereign, owned by no one, allowing each developer to avoid censorship from platform owners offering app downloads. It also prevents users from being in a situation where they don't understand how an app works on their phone. In my opinion, these are important and cool features deserving respect and attention from those who want to create more futuristic, cooler applications. This is precisely what my team and I have been doing for eight years, choosing perhaps the most challenging area - creating services for robotics on the world computer, which seems to be right outside your door, quietly scraping and saying, \"I want to come into your home.\"": "Вот история в обобщенном формате. Нет упоминания о \"блокчейне\", нет упоминания о \"умных контрактах\", но эти концепции лежат в основе. Давайте все же признаем: мировой компьютер - это облачная инфраструктура, которая является суверенной, не принадлежащей никому, позволяющая каждому разработчику избежать цензуры со стороны владельцев платформ, предлагающих загрузку приложений. Это также предотвращает ситуацию, когда пользователи не понимают, как работает приложение на их телефоне. По моему мнению, это важные и крутые функции, заслуживающие уважения и внимания тех, кто хочет создавать более футуристические, крутые приложения. Именно это мы и моя команда делаем в течение восьми лет, выбирая, возможно, самую сложную область - создание сервисов для робототехники на мировом компьютере, который, кажется, находится прямо у вашей двери, тихо скребется и говорит: \"Я хочу войти к вам в дом\".",
  "Now, let's move on to a timeline and look through my personal experience at how the concept of the world computer evolved. First, let's go back to 2012. This year is notable because Bitcoin already exists as a global internet service, accessible to everyone, not owned by anyone specific. By 2012, besides Bitcoin, its so-called forks start appearing. One of the most well-known is Litecoin.": "Теперь давайте перейдем к временной шкале и рассмотрим мой личный опыт того, как развивалась концепция мирового компьютера. Во-первых, вернемся к 2012 году. Этот год заметен тем, что Биткоин уже существует как глобальный интернет-сервис, доступный каждому, не принадлежащий никому конкретному. К 2012 году, помимо Биткоина, начинают появлятьс�� его так называемые форки. Один из самых известных - Лайткоин.",
  "Litecoin is notable because its developer did the most important work for the entire community. He collected the most crucial configurable variables or constants from different parts of Bitcoin's code after the protocol was launched. This allowed specifying block generation time, block reward, and, statistically, Litecoin is more frequently forked than Bitcoin. When we say \"fork of Bitcoin,\" I can confidently say that, in most cases, it will be a fork of Litecoin.": "Лайткоин заметен тем, что его разработчик выполнил самую важную работу для всего сообщества. Он собрал наиболее важные настраиваемые переменные или константы из различных частей кода Биткоина после запуска протокола. Это позволило указать время генерации блока, награду за блок и, статистически, Лайткоин чаще всего форкается, чем Биткоин. Когда мы говорим о \"форке Биткоина\", я могу уверенно сказать, что в большинстве случаев это будет форк Лайткоина.",
  "Namecoin is also a fork of Bitcoin, and if memory serves me right, it was initially a direct fork from Bitcoin, and then Litecoin appeared a few months later in 2011. However, Namecoin turned out to be a bit different, paving the way for many developers mentally on where ideas underlying Bitcoin's internet service could evolve. Namecoin went beyond being just a coin; it could store identity as a database and allow an internet service to place your domain name. This was the first example where an internet service spawned from Bitcoin could have a different nature, not just like Litecoin with fast transactions but the ability to pay for storing certain information with its internal currency, an internal token. For example, the name in the .bit domain zone.": "Namecoin также является форком Bitcoin, и если мне память не изменяет, изначально он был прямым форком от Bitcoin, а затем через несколько месяцев в 2011 году появился Litecoin. Однако Namecoin оказался немного другим, прокладывая путь для многих разработчиков в уме, где идеи, лежащие в основе интернет-сервиса Bitcoin, могли бы развиваться. Namecoin вышел за рамки просто монеты; он мог хранить идентичность как базу данных и позволять интернет-сервису размещать ваше доменное имя. Это был первый пример, когда интернет-сервис, возникший из Bitcoin, мог иметь другую природу, не просто как Litecoin с быстрыми транзакциями, но и способностью оплачивать хранение определенной информации своей внутренней валютой, внутренним токеном. Например, имя в доменной зоне .bit.",
  "Developers worldwide were experimenting with Bitcoin, mostly creating forks, making them faster, cheaper electronic cash. Alongside this, the first services appeared, seeing opportunities not only in financial applications but also in cross-industrial applications in other areas like Namecoin. Namecoin provided the first globally accessible and unowned internet service through which you could launch your website without being under the jurisdiction of a specific organization but within a distributed globally accessible network. This moment is crucial for us to move on to the early precursors of the world computer's ideas.": "Разработчики по всему миру экспериментировали с Bitcoin, в основном создавая форки, делая их быстрее, дешевле электронные деньги. Параллельно с этим появились первые сервисы, видя возможности не только в финансовых приложениях, но и в кросс-индустриальных приложениях в других областях, таких как Namecoin. Namecoin предоставил первый всемирно доступный и не принадлежащий никому интернет-сервис, через который вы могли запустить свой веб-сайт, не находясь под юрисдикцией конкретной организации, а в рамках распределенной всемирно доступной сети. Этот момент критичен для нас, чтобы перейти к ранним предшественникам идей мирового компьютера.",
  "The first practical ideas of the world computer emerged in 2014, two years after the appearance of the first wave of Bitcoin forks and the creation of meaningful services dedicated not only to electronic cash but also exploring broader themes. We encounter ideas that precede the launch of Ethereum.": "Первые практические идеи мирового компьютера появились в 2014 году, через два года после появления первой волны форков Bitcoin и создания значимых сервисов, посвященных не только электронным деньгам, но и исследованию более широких тем. Мы сталкиваемся с идеями, предшествующими запуску Ethereum.",
  "In 2014, at several meetups worldwide, in Miami and, I believe, in Europe, Vitalik Buterin articulated sensible ideas. He suggests that we can develop not just a set of internet services that essentially function as a Swiss army knife, right? We can develop a virtual machine. Those with an education in Computer Science probably remember what an infinite tape is in Turing machines, and if we go back to the theory of computational machines, we probably recall the theoretical origins of creating our personal computers, essentially the server infrastructure we have today. It's interesting that, fifty years after the development of von Neumann architecture and the complete Turing machine theory, and with the dawn of internet technologies only by 2014, and only after experiments with Bitcoin, the first idea emerges on our planet of creating a fully virtual computational machine based on the same theory that has been tested in the computer science industry for the past 50 years. The mechanics are the same as when creating any personal computer or server in a data center, but based more on achievements in internet technologies and the achievements of the world that will later be called Web3.": "В 2014 году на нескольких митапах по всему миру, в Майами и, я думаю, в Европе, Виталик Бутерин высказал разумные идеи. Он предлагает, что мы можем развивать не просто набор интернет-сервисов, которые в основном функционируют как швейцарский нож, верно? Мы можем разработать виртуальную машину. Те, кто обучался в области информатики, вероятно, помнят, что такое бесконечная лента в машинах Тьюринга, и если мы вернемся к теории вычислительных машин, мы, вероятно, вспомним теоретические основы создания наших персональных компьютеров, в основном серверной инфраструктуры, которую у нас есть сегодня. Интересно, что, спустя пятьдесят лет после разработки архитектуры фон Неймана и полной теории машины Тьюринга, и с появлением технологий интернета только к 2014 году, и только после экспериментов с Bitcoin, на нашей планете появляется первая идея создания полностью виртуальной вычислительной машины на основе той же теории, которая испытывалась в индустрии информационных технологий в течение последних 50 лет. Механика такая же, как при создании любого персонального компьютера или сервера в центре обработки данных, но основана больше на достижениях в области интернет-технологий и достижениях мира, который позже будет называться Web3.",
  "Ethereum itself is not a Swiss army knife, not a set of specific internet services. It is, in the direct sense, a cloud, a computational machine. What lies at its core, I will tell you in the next lecture. Here, the most important thing for us is to focus on where the idea of Ethereum began. It started with the realization that, in two years, dozens of different internet services were invented that were interesting because they were globally accessible, available without censorship for developers to deploy. Users could use them only with an internal currency. However, what was not liked in all these concepts was that almost every interesting service required its own massive distributed infrastructure. Unlike familiar internet services, you couldn't just launch your globally accessible infrastructure if you were a very small person or a small team because such a network would be vulnerable, and the service itself would become unsafe. To overcome the problems that were side effects or negative externalities of creating your own globally accessible sovereign internet service, the concept of Ethereum emerged. Ethereum, as a full-fledged cloud capable of handling any formalized computation, allows you to write your program code, a complete program essentially, and run it in the same blockchain alongside hundreds of other applications. This possibility, sounding from the small stages of 2014, naturally captivated the minds of many and seemed absolutely logical for someone with a basic education in Computer Science. If you could understand what Turing completeness was by 2014, if you could envision the historical theory of creating a personal computer, you would definitely not overlook the Ethereum whitepaper and would say that this is exactly what the entire developer community needs.": "Сам по себе Ethereum не является швейцарским армейским ножом, не набором конкретных интернет-сервисов. Это, в прямом смысле, облако, вычислительная машина. Что лежит в его основе, я расскажу в следующей лекции. Здесь самое важное для нас - сосредоточиться на том, где началась идея Ethereum. Она началась с понимания того, что за два года было изобретено десятки различных интернет-сервисов, которые были интересны, потому что они были доступны по всему миру, доступны без цензуры для разработчиков для развертывания. Пользователи могли использовать их только с внутренней валютой. Однако то, что не понравилось во всех этих концепциях, заключалось в том, что практически каждый интересный сервис требовал собственной массовой распределенной инфраструктуры. В отличие от привычных интернет-сервисов, вы не могли просто запустить свою глобально доступную инфраструктуру, если вы были очень маленьким человеком или маленькой командой, потому что такая сеть была бы уязвимой, и сам сервис стал бы небезопасным. Чтобы преодолеть проблемы, которые были побочными эффектами или негативными внешними эффектами создания собственного глобально доступного суверенного интернет-сервиса, возникла концепция Ethereum. Ethereum, как полноценное облако, способное обрабатывать любые формализованные вычисления, позволяет вам писать свой программный код, по сути, полную программу, и запускать ее в той же цепочке блоков наряду с сотнями других приложений. Эта возможность, звучавшая с маленьких этапов 2014 года, естественно пленяла умы многих и казалась абсолютно логичной для тех, кто имел базовое образование в области информатики. Если вы могли понять, что такое полнота Тьюринга к 2014 году, если вы могли представить себе историческую теорию создания персонального компьютера, вы определенно не пропустили бы белую книгу Ethereum и сказали бы, что именно это нужно всему сообществу разработчиков.",
  "I believe the year 2014 and Ethereum mark the first, though not explicitly named, instances of the concept of a global computer. It started with the idea that we don't need a Swiss knife; instead, we need infrastructure or a universal cloud that addresses global-level security challenges. Developers, at a low cost, should be able to deploy their applications there without concerning themselves with issues like securing the network or creating a network of providers for this computer or your specific internet service.": "Я считаю, что год 2014 и Ethereum отмечают первые, хотя и не явно названные, примеры концепции глобального компьютера. Это началось с идеи, что нам не нужен швейцарский нож; вместо этого нам нужна инфраструктура или универсальное облако, которое решает глобальные проблемы безопасности. Разработчики должны иметь возможность развертывать свои приложения там по низкой цене, не беспокоясь о таких вопросах, как обеспечение безопасности сети или создание сети поставщиков для этого компьютера или вашего конкретного интернет-сервиса.",
  "In 2015, Ethereum was effectively launched. From that moment onwards, even until 2020, I haven't encountered significant counterarguments against the idea of creating not just specific internet services but embracing and developing the concept of a virtual computer, virtual server, cloud, or a global computer, as I prefer to call it.": "В 2015 году Ethereum был успешно запущен. С того момента и до 2020 года я не столкнулся с значительными аргументами против идеи создания не просто конкретных интернет-сервисов, а принятия и развития концепции виртуального компьютера, виртуального сервера, облака или глобального компьютера, как я предпочитаю называть его.",
  "Various variations emerge, perhaps some remember the then-popular EOS suggesting a slightly different consumption paradigm. Despite my personal aversion to that project, with its 21st validator and all, it seemed sufficient for many. But it introduced the idea that owning tokens grants you a portion of bandwidth, which, in the realm of Robonomics architecture, remains interesting to me to this day.": "Появляются различные вариации, возможно, кто-то помнит тогда популярный EOS, предлагающий немного другую парадигму потребления. Несмотря на мое личное отвращение к этому проекту, с его 21-м валидатором и всем прочим, это п��казалось достаточным для многих. Но он внес идею того, что владение токенами дает вам часть пропускной способности, что, в рамках архитектуры Робономики, остается для меня интересным и по сей день.",
  "Simultaneously, other ideas on how to modernize the Ethereum network arise. Projects like Definity, Solana, and others come into play. Around the same time, Gavin Wood introduces Polkadot, who assisted Vitalik in creating Ethereum. From a multitude of technological projects between 2015 and 2020, we move from a race to create individual internet service variants to witnessing, on a communication protocol level, the emergence of something like Ethereum killers. Many projects started under this slogan, taking the idea of a unified cloud for multiple internet services and modifying some aspects. For instance, EOS proposed an alternative utilization scheme, where only token-backed ownership allowed access to bandwidth. There were projects where the programming language for writing code was more interesting. For example, during a hackathon for BMW, when we won with an implementation on Ethereum, the automaker immediately stated that we wouldn't go any further unless we had formally verified contracts, which was impossible to achieve on Ethereum at that time.": "Одновременно возникают другие идеи о модернизации сети Ethereum. Проекты, такие как Definity, Solana и другие, начинают играть роль. Примерно в то же время Гэвин Вуд представляет Polkadot, который помог Виталику создать Ethereum. Из множества технологических проектов между 2015 и 2020 годами мы переходим от гонки за создание отдельных вариантов интернет-сервисов к наблюдению, на уровне протокола связи, появления чего-то вроде убийц Ethereum. Многие проекты начались под этим лозунгом, взяв идею объединенного облака для нескольких интернет-сервисов и модифицировав некоторые аспекты. Например, EOS предложила альтернативную схему использования, где доступ к полосе пропускания разрешался только владельцам токенов. Бы��и проекты, где язык программирования для написания кода был более интересным. Например, во время хакатона для BMW, когда мы победили с реализацией на Ethereum, автопроизводитель сразу заявил, что мы не продвинемся дальше, если у нас не будет формально проверенных контрактов, что было невозможно достичь на Ethereum в то время.",
  "At this moment, as you read about the ideas of Eternity and other networks, you may think, \"I should try working with them too.\" Service developers understood this, as did, as I mentioned, projects like Definity, which recently launched the World Computer and is gaining traction. Simultaneously, the idea of Polkadot emerges as a heterogeneous multi-chain framework. Ethereum, around the mid-2010s, also received a roadmap for scalability and development. By 2024, almost all concepts converge on the idea of having not just one database or blockchain but a multitude. Various transaction processing methods, two-layer consensus algorithms, optimistic majority approaches, and a plethora of technical implementation variations emerge, all aiming at the same global computer concept.": "В этот момент, когда вы читаете о идеях Eternity и других сетей, вы можете подумать: \"Мне тоже стоит попробовать поработать с ними\". Разработчики сервисов поняли это, как и, как я упоминал, проекты, такие как Definity, которые недавно запустили World Computer и набирают обороты. Одновременно возникает идея Polkadot как гетерогенной мультицепочечной структуры. Ethereum, примерно в середине 2010-х годов, также получил дорожную карту по масштабируемости и развитию. К 2024 году практически все концепции сходятся на идее иметь не просто одну базу данных или блокчейн, а множество. Появляются различные методы обработки транзакций, двухуровневые алгоритмы консенсуса, оптимистические подходы большинства и множество технических вариаций реализации, все направленные на одну и ту же глобальную концепцию компьютера.",
  "Let's now go through a timeline snapshot:": "Давайте теперь рассмотрим снимок временной шкалы:",
  "**2009-2012**: Emergence of the first globally accessible internet service for electronic cash - Bitcoin.": "**2009-2012**: Появление первого глобально доступного интернет-сервиса для электронных денег - Bitcoin.",
  "**Early 2012**: The first fork war occurs, with projects emerging to replicate similar services. Some multi-billion projects create their forks. Simultaneously, projects like Namecoin propose interesting ideas.": "**Начало 2012 года**: Происходит первая война форков, с появлением проектов для репликации аналогичных сервисов. Некоторые многомиллиардные проекты создают свои форки. Одновременно проекты, такие как Namecoin, предлагают интересные идеи.",
  "**2014**: The concept of a world computer emerges, requiring a deep understanding of computer science theory and immersion in Bitcoin's development.": "**2014**: Появляется концепция мирового компьютера, требующая глубокого понимания теории компьютерных наук и погружения в развитие Bitcoin.",
  "**2015-2020**: The concept moves from theory to practice. Modifications and variations of Ethereum arise, introducing different ideas with varying degrees of quality. The term \"World Computer\" became established.": "**2015-2020**: Концепция переходит от теории к практике. Появляются модификации и вариации Ethereum, вводя различные идеи с разными уровнями качества. Термин \"Мировой компьютер\" становится устоявшимся.",
  "**2024**: We reach the World Computer, a term now well-established, marking the transition from a simple calculator on your phone to a globally accessible institution. The idea of the World Computer encompasses future money, programming money, storage for identification records, and important documents.": "**2024**: Мы достигаем Мирового компьютера, теперь уже хорошо установленного термина, отмечая переход от простого калькулятора на вашем телефоне к глобально доступному учреждению. Идея Мирового компьютера охватывает будущие деньги, программирование денег, хранение идентификационных записей и важных документов.",
  "In conclusion, from a simple calculator to a globally accessible institution, the idea of the World Computer has evolved. It's seen as a place for the future of money and the storage of vital records. The concept of a World Computer has progressed from theoretical discussions to practical engineering implementations. In the next lecture, the discussion will delve into what a World Computer actually represents. It is fundamentally a state transition function, a concept to be explored further in the upcoming lecture, emphasizing its importance and the need to safeguard it.": "В заключение, от простого калькулятора к глобально доступному учреждению идея Мирового компьют��ра эволюционировала. Его видят как место для будущего денег и хранения важных записей. Концепция Мирового компьютера продвинулась от теоретических обсуждений к практическим инженерным реализациям. В следующей лекции обсуждение углубится в то, что на самом деле представляет собой Мировой компьютер. Это фундаментальная функция перехода состояний, концепция, которую предстоит дальше исследовать в предстоящей лекции, подчеркивая ее важность и необходимость обеспечения ее безопасности.",
  "Part 2: The Heart of the World Computer": "Часть 2: Сердце мирового компьютера",
  "What lies at the core of projects like Ethereum or Polkadot, or any other web3 project claiming the title of the world computer, and why does the comparison with the heart in the human body fit so well into the abstract architecture of the world computer?": "Что лежит в основе проектов, таких как Ethereum или Polkadot, или любого другого проекта web3, претендующего на звание мирового компьютера, и почему сравнение с сердцем в человеческом теле так хорошо вписывается в абстрактную архитектуру мирового компьютера?",
  "Let's try to understand these questions in this part of the lecture, and to begin with, we'll have to break the chains of Bitcoin maximalists a bit. Most likely, you've already read one or several popular science articles dedicated to Bitcoin in your life, and the main thing that is practically noted everywhere is the three main advantages of Bitcoin as electronic cash:": "Давайте попробуем понять эти вопросы в этой части лекции, и для начала нам придется немного освободиться от цепей максималистов Биткоина. Скорее всего, вы уже читали одну или несколько популярно-научных статей, посвященных Биткоину в своей жизни, и главное, что практически отмечается повсюду, это три основных преимущества Биткоина как электронных денег:",
  "Censorship resistance": "Сопротивление цензуре",
  "Immutability of data stored in the Bitcoin blockchain": "Неизменяемость данных, хранящихся в блокчейне Биткоина",
  "Transparency of transactions": "Прозрачность транзакций",
  "Let's quickly go through each of these properties, and most importantly, at the end, we'll need to step back a bit from them, as the world computer inherits them as some kind of successor to Bitcoin.": "Давайте быстро пройдемся по каждому из этих свойств, и, что самое важное, в конце нам нужно будет немного отойти от них, так как мировой компьютер наследует их как своего рода наследника Биткоина.",
  "**Firstly**, immutability of data. Of course, this property, from the perspective of electronic cash, has significant advantages and importance. After you send a transaction or receive bitcoins, after one or two blocks, you gradually begin to feel the immutability of data in the blockchain. In the first 15 minutes, you can observe, using a blockchain explorer, how the transaction should settle. You already see it in the network, but it is not finalized, meaning these bitcoins are not yet in your account. However, after several blocks, there is confidence that these funds will not disappear from your account. As time passes, the probability of values being somehow overwritten from your account becomes almost negligible, practically reducing to zero. This is our property of data immutability. How cool it is when you can share information with the recipient, send them a link to the blockchain explorer, and you don't need to obtain any paper or document from the bank stating that you sent a payment on a certain date and time - this is the second advantage of Bitcoin that is very helpful in practice and is probably the most pleasant perk when comparing a bank transfer and a Bitcoin transfer.": "**Во-первых**, неизменяемость данных. Конечно, это свойство с точки зрения электронных денег имеет значительные преимущества и важность. После того, как вы отправите транзакцию или получите биткоины, через один или два блока вы постепенно начнете ощущать неизменяемость данных в блокчейне. В первые 15 минут вы можете наблюдать, используя исследователь блокчейна, как должна разрешиться транзакция. Вы уже видите ее в сети, но она не завершена, что означает, что эти биткоины еще не находятся на вашем счету. Однако, после нескольких блоков, есть уверенность, что эти средства не исчезнут с вашего счета. Со временем вероятность того, что значения каким-то образом будут перезаписаны с вашего счета, становится практически ничтожной, практически сведя к нулю. Это наше свойство неизменяемости данных. Как здорово, когда вы можете поделиться информацией с получателем, отправить им ссылку на исследователь блокчейна, и вам не нужно получать никакой бумаги или документ от банка, утверждающего, что вы отправили платеж в определенную дату и время - это второе преимущество Биткоина, которое очень полезно на практике и, вероятно, самое приятное преимущество при сравнении банковского перевода и перевода Биткоина.",
  "**Secondly**, transparency of transactions. There is practically no fear when using Bitcoin that you will find yourself in a region of the world or connected to an internet provider through which you cannot perform operations with the Bitcoin network. There are practically no options other than locking you in a dark room without internet access so that you cannot use the Bitcoin network.": "**Во-вторых**, прозра��ность транзакций. Практически нет страха при использовании Биткоина, что вы окажетесь в регионе мира или подключитесь к интернет-провайдеру, через который вы не сможете выполнять операции с сетью Биткоина. Практически нет других вариантов, кроме как запереть вас в темной комнате без доступа к интернету, чтобы вы не могли использовать сеть Биткоина.",
  "These three properties are, of course, very important. Now, in order to understand the question \"What is at the heart of the world computer,\" we will need to step back from them, abstract ourselves, and make a small leap of faith, a jump, approximately, 100 years back to the 1930s.": "Эти три свойства, конечно, очень важны. Теперь, чтобы понять вопрос \"Что находится в сердце мирового компьютера,\" нам нужно отойти от них, абстрагироваться и сделать небольшой скачок веры, прыжок, примерно, на 100 лет назад, в 1930-е годы.",
  "In 1936, Alan Turing made a proposal to the scientific community to solve the formalization problem and, in fact, a more qualitative description of such a concept as an algorithm. Interestingly, from Alan Turing's proposal, the architecture and development of all computer science in the future emerged, but he in no way pursued the idea of creating a personal computer, and he knew nothing about data centers or clouds. His task was to provide a way to define an algorithm in the context of the tasks faced by mathematicians. It's a fascinating picture over the span of a century that the achievement of computer science turns out to be a by-product of a rather mundane problem among mathematicians.": "В 1936 году Алан Тьюринг сделал предложение научному сообществу решить проблему формализации и, фактически, более качественное описание такого понятия, как алгоритм. Интересно, что из предложения Алана Тьюринга выросла архитектура и развитие всей компьютерной науки в будущем, но он никоим образом не стремился к созданию персонального компьютера, и он ничего не знал о центрах обработки данных или облаках. Его задачей было предоставить способ определения а��горитма в контексте задач, стоящих перед математиками. Это увлекательная картина на протяжении столетия, что достижение компьютерной науки оказывается побочным продуктом довольно мирной проблемы среди математиков.",
  "Let's delve into what Alan Turing proposed, without delving too deeply into algorithm theory and the purpose for which he suggested it. Alan Turing proposed the Turing machine, which represents an infinite tape (we can call it memory cells to make it easier), traversed by a reading and writing head. This head, positioned over a certain cell, can read data, apply some simple operations to them, and write new values.": "Давайте погрузимся в то, что предложил Алан Тьюринг, не углубляясь слишком глубоко в теорию алгоритмов и цель, ради которой он ее предложил. Алан Тьюринг предложил машину Тьюринга, которая представляет собой бесконечную ленту (мы можем назвать ее ячейками памяти, чтобы сделать это проще), по которой движется головка для чтения и записи. Эта головка, находясь над определенной ячейкой, может читать данные, применять к ним некоторые простые операции и записывать новые значения.",
  "Today, when you hear phrases like this, it might seem to you: \"Well, yes, it's a hard drive, a computer, or something like that.\" That's absolutely correct. This description gave rise to the first computer architecture. However, the main task of the Turing machine was to provide a means of representing a system or entity capable of performing any formalized computations. One can imagine a box or room, even filled with lamps, into which you insert your punch card, card, or transmit a Bluetooth signal, and the machine starts working, performing simple operations that ultimately solve your problem. Thus, the Turing machine is a universal computational mechanism that primarily solves the universal and essential task of providing a mechanism through which any simple computation or, more accurately, any formalized computation can be performed—computations that can be decomposed into the language of mathematics": "Сегодня, когда вы слышите фразы вроде этой, ва�� может показаться: \"Ну да, это жесткий диск, компьютер или что-то в этом роде.\" Это абсолютно верно. Это описание породило первую архитектуру компьютера. Однако основная задача машины Тьюринга заключалась в предоставлении средства представления системы или сущности, способной выполнять любые формализованные вычисления. Можно представить себе коробку или комнату, даже заполненную лампами, в которую вы вставляете свою перфокарту, карту или передаете сигнал Bluetooth, и машина начинает работать, выполняя простые операции, которые в конечном итоге решают вашу проблему. Таким образом, машина Тьюринга является универсальным вычислительным механизмом, который в первую очередь решает универсальную и важную задачу предоставления механизма, с ��омощью которого можно выполнять любые простые вычисления или, точнее, любые формализованные вычисления—вычисления, которые могут быть разложены на язык математики",
  "In essence, the task of the last 100 years, after finding some solution in the field of mathematics, was precisely to give it a physical form, to find the set of transistors that could be placed on a board, learn how to solder them all, reduce the processes of the computing processor, and so on. No wonder that the theory from 1936 finds application in 2014 for the ideas of the world computer. These 100 years were occupied, in general, in another area—the field of physically implementing this computer.": "В сущности, задача последних 100 лет, после того как было найдено какое-то решение в области математики, заключалась именно в том, чтобы дать ей физическую форму, найти набор транзисторов, которые можно разместить на плате, научиться их все паять, уменьшить процессы вычислительного процессора и так далее. Неудивительно, что теория 1936 года находит применение в 2014 году для идей мирового компьютера. Эти 100 лет были заняты, в общем, в другой области - области физической реализации этого компьютера.",
  "When the planet became saturated, and we had personal computers, computational machines even inside smart devices, and when data centers started growing on the planet, the question shifted from the hardware solution to how the computational machine might look not at the physical or mathematically abstract level but at some non-physical, perhaps metaphysical, level relative to the entire planet. However, the foundation remains the same: the state transition function and nothing else.": "Когда планета стала насыщенной, и у нас появились персональные компьютеры, вычислительные машины даже внутри умных устройств, и когда на планете начали расти центры обработки данных, вопрос сместился от аппаратного решения к тому, как может выглядеть вычислительная машина не на физическом или математически абстрактном уровне, а на каком-то нематериальном, возможно, метафизическом уровне относительно всей планеты. Однако основа остается той же: функция перехода состояния и ничего более.",
  "As an addition to what has been said, so that we don't only dwell on the theory of 1936 and don't just break the shackles of Bitcoin maximalists, open the Ethereum white paper. There you will find the crucial phrase \"Turing complete machine\"—this is the main definition of Ethereum. A Turing complete machine means that Ethereum can handle any simple operations described in a formal language, operations that are possible. This is not some set of operations that Ethereum can provide as a calculator or a sophisticated calculator for scientists. Instead, it is an abstraction inside which it is possible to load any possible variations, manipulations with variables, constants, additions, calculations with any states, and so on. You won't find anything different from what Turing proposed in the 1930s in the Ethereum concept. You will find an engineering implementation of how to do it. If we move on and open the Polkadot wiki, it's a bit more challenging to find. For this, you should use the search, enter \"State transition,\" and in the search results, find several mentions that Polkadot guarantees nothing else but the state transition. Neither the storage of data in the Polkadot blockchain nor any additional services—only the purest change of state caused by incoming transactions and processed by Polkadot validators. Now, let's try to delve more into this.": "В дополнение к сказанному, чтобы мы не ограничивались только теорией 1936 года и не разрушали оковы биткойн-максималистов, откройте белую книгу Ethereum. Там вы найдете ключевую фразу \"Машина, полностью совместимая с Тьюрингом\" - это основное определение Ethereum. Машина, полностью совместимая с Тьюрингом, означает, что Ethereum может обрабатывать любые простые операции, описанные в формальном языке, операции, которые возможны. Это не набор операций, которые Ethereum может предоставить как калькулятор или сложный калькулятор для ученых. Вместо этого это абстракция, внутри которой можно загрузить любые возможные вариации, манипуляции с переменными, константами, добавления, вычисления с любыми состояниями и так далее. Вы не найдете ничего отличного от того, что предложил Тьюринг в 1930-х годах в концепции Ethereum. Вы найдете инженерную реализацию того, как это сделать. Если мы продолжим и откроем вики Polkadot, будет немного сложнее найти. Для этого вам следует использовать поиск, ввести \"Функция перехода состояния\" и в результатах поиска найти несколько упоминаний о том, что Polkadot гарантирует ничего, кроме фун��ции перехода состояния. Ни хранение данных в блокчейне Polkadot, ни какие-либо дополнительные услуги - только чистейшее изменение состояния, вызванное входящими транзакциями и обрабатываемое валидаторами Polkadot. Теперь давайте попробуем поглубже вникнуть в это.",
  "Now, let's add a bit to this linear diagram to move from the theory of the 1930s to today's realities, where we describe the abstract picture of the world computer. To do this, let's consider an example with Alice and Bob. Alice, being in the office, wants to start Bob's home vacuum robot for cleaning. If we look at today's concepts of how the link between Alice's mobile application and the robot vacuum at home is implemented, you will see roughly the following picture: Alice's mobile application generates a transaction in some cloud where calculations take place, and the output of these calculations is the output values that effectively turn into a command to start the vacuum robot. It would be useful for us, from the field of robotics and Robonomics as concepts in the world of web3, to understand that in the cloud, there is a digital twin of this robot, and its state is changed. We can, in general, not go that far and stop at the fact that Alice sends a transaction to the cloud, and the cloud, having performed all the necessary calculations and manipulations, generates a command to start Bob's vacuum robot.": "Теперь давайте добавим немного к этой линейной диаграмме, чтобы перейти от теории 1930-х годов к современной реальности, где мы описываем абстрактное изображение мирового компьютера. Для этого давайте рассмотрим пример с Алисой и Бобом. Алиса, находясь в офисе, хочет запустить пылесос робота Боба для уборки дома. Если мы посмотрим на современные концепции того, как реализована связь между мобильным приложением Алисы и роботом-пылесосом дома, вы увидите примерно следующую картину: мобильное приложение Алисы генерирует транзакцию в каком-то облаке, где происходят вычисления, и результатом этих вычислений являются выходные значения, которые эффективно превращаются в команду для запуска р��бота-пылесоса. Было бы полезно для нас, из области робототехники и Робономики как концепций в мире web3, понять, что в облаке есть цифровой двойник этого робота, и его состояние меняется. Мы можем, в общем, не идти так далеко и остановиться на том, что Алиса отправляет транзакцию в облако, и облако, выполнив все необходимые вычисления и манипуляции, генерирует команду для запуска пылесоса Боба.",
  "In this scheme today, there are several main questions: if you were interacting with a physical computer in front of you or were in a room with the vacuum robot, you would approach, press a physical button, and set it in motion. What changes when instead of arrows, there is not a manual drive but a communication layer, the internet? A multitude of questions arises about how we can safely connect Alice and this cloud, how we can be sure that Alice has access to this cloud. The question of the communication network arises—how we can protect Alice from someone else addressing her vacuum robot, requesting, for example, to make a video of her entire apartment instead of cleaning, and a similar aspect arises: why would the vacuum robot listen to this cloud with such honor and integrity? Why would the robot fully trust this cloud?": "В этой схеме сегодня есть несколько основных вопросов: если бы вы взаимодействовали с физическим компьютером перед вами или находились в комнате с роботом-пылесосом, вы бы подошли, нажали на физическую кнопку и поставили его в движение. Что меняется, когда вместо стрелок нет ручного привода, а есть коммуникационный уровень, интернет? Возникает множес��во вопросов о том, как мы можем безопасно соединить Алису и это облако, как мы можем быть уверены, что у Алисы есть доступ к этому облаку. Возникает вопрос о сети связи - как мы можем защитить Алису от того, что кто-то другой обратится к ее роботу-пылесосу, запросив, например, сделать видео всей ее квартиры вместо уборки, и возникает аналогичный аспект: почему робот-пылесос должен слушать это облако с таким почтением и целостностью? Почему робот должен полностью доверять этому облаку?",
  "Today's approach with the architecture of cloud solutions that connect your mobile phone, or rather, the application on your mobile phone, and some technology on the other side, smart devices, is based on the significant achievements in building physical computers. Computers in data centers today are something extraordinary—the level of technical processes is simply amazing. However, from the perspective of communication technologies, when you already have some experience working with internet applications, it seems that somewhere there, at the level of a technical school or college, or maybe not right next to how developers, architects of Intel processors are solving their tasks now. Almost all questions about connecting Alice to Bob boil down solely to outputting a specific access certificate on a specific IP address from both sides, linking them together, and the cloud will own and do anything. The most important thing in this scheme is to do anything, meaning to perform state transitions or operations that occur without any guarantees that for Alice, for Bob, these will be executed according to the same logic. No one can say anything about how the cloud is arranged. It is a black box where computations are not formalized, and neither Alice nor Bob knows how the computation is performed.": "Сегодняшний подход с архитектурой облачных решений, которые соединяют ваш мобильный телефон, или скорее, приложение на вашем мобильном телефоне, и какую-то технологию с другой стороны, умные устройства, основан на значительных достижениях в построении физических компьютеров. Компьютеры в центрах обработки данных сегодня - это нечто удивительное - уровень технических процессов просто удивителен. Однако с точки зрения коммуникационных технологий, когда у вас уже есть опыт работы с интернет-приложениями, кажется, что где-то там, на уровне технической школы или колледжа, или может быть не совсем рядом с тем, как разработчики, архитекторы процессоров Intel решают свои задачи сейчас. Почти все вопросы о том, как соединить Алису с Бобом, сводятся исключительно к выводу конкретного сертификата доступа на конкретный IP-адрес с обеих сторон, связывая их вместе, и облако будет владеть и делать все. Самое важное в этой схеме - делать что угодно, то есть выполнять переходы состояний или операции, которые проис��одят без каких-либо гарантий, что для Алисы, для Боба, они будут выполнены по той же логике. Никто не может сказать ничего о том, как устроено облако. Это черный ящик, где вычисления не формализованы, и ни Алиса, ни Боб не знают, как выполняются вычисления.",
  "The place where you must fully trust—relying on the reputation of the company that owns these data centers, and you must completely trust the network access providers who issue a certificate and verify the security of your connection. In fact, if we talk about the boom of internet applications, this is a huge problem. The problem is that there are actually some citadels located in specific jurisdictions that operate on a relatively simple technology stack to connect you as easily as possible to the cloud, which represents a black box. Dissatisfaction with this approach actually arouses interest in the world computer because it will arrange things a bit differently. And how? Let's try to supplement the scheme we drew with blue color right now.": "Место, где вы должны полностью доверять - полагаясь на репутацию компании, которая владеет этими центрами обработки данных, и вы должны полностью доверять поставщикам сетевого доступа, которые выдают сертификат и проверяют безопасность вашего соединения. Фактически, если говорить о буме интернет-приложений, это огромная проблема. Проблема заключается в том, что на самом деле есть некоторые цитадели, расположенные в определенных юрисдикциях, которые работают на относительно простом технологическом стеке, чтобы соединить вас с облаком как можно проще, представляющим собой черный ящик. Недовольство этим подходом на самом деле вызывает интерес к мировому компьютеру, потому что он устроит вещи немного по-другому. И как? Давайте попробуем дополнить схему, которую мы нарисовали синим цветом прямо сейчас.",
  "So, to supplement our linear graph, our linear diagram from both sides, let's take a look at the discoveries that have significance in computer science and that are directly or indirectly related to achievements from the world of web3.": "Итак, чтобы дополнить нашу линейную диаграмму, нашу линейную диаграмму с обеих сторон, давайте взглянем на открытия, которые имеют значение в компьютерных науках и которые прямо или косвенно связаны с достижениями из мира web3.",
  "Let's start with Leslie Lamport in 1976. Those who attended my presentations, lectures from 2015-2020, probably remember how often I liked to mention that before the invention of Bitcoin, problems related to creating a decentralized network were well described by Leslie Lamport in 1976 in the Byzantine Generals problem. The solution to the Byzantine Generals problem is at the core of Tendermint PBFT algorithms and all synchronous algorithms used from Telegram Open Network to Tendermint, to Cosmos, and other blockchain projects that, accordingly, followed the path of Byzantine Generals.": "Давайте начнем с Лесли Лэмпорта в 1976 году. Те, кто посещал мои презентации, лекции с 2015 по 2020 год, наверняка помнят, как часто я любил упоминать, что до изобретения Биткоина проблемы, связанные с созд��нием децентрализованной сети, были хорошо описаны Лесли Лэмпортом в 1976 году в проблеме Византийских генералов. Решение проблемы Византийских генералов лежит в основе алгоритмов Tendermint PBFT и всех синхронных алгоритмов, используемых от Telegram Open Network до Tendermint, до Cosmos и других блокчейн-проектов, которые, соответственно, следовали пути Византийских генералов.",
  "The second interesting achievement in internet technologies is torrent trackers. We don't have any specific, already erased, cloud or a black box that stores files. Still, users worldwide, by exchanging torrent files, can download exactly the file they were looking for, and this works without data substitution. No one uploads any viruses to you by replacing the file. There might sometimes be a virus embedded in the file, but the idea of receiving a link to download and actually downloading something other than what you were offered to download using torrent technology is impossible. Similar processes exist in the IPFS network, a hash-oriented storage - a way of connecting various participants with trust in the information you convey without using a black box, precisely.": "Вторым интересным достижением в области интернет-технологий являются торрент-трекеры. У нас нет никакого конкретного, уже стертого, облака или черного ящика, который хранил бы файлы. Тем не менее, пользователи по всему миру, обмениваясь торрент-файлами, могут загрузить именно тот файл, который они искали, и это работает без подмены данных. Никто не загружает вам вирусы, заменяя файл. Иногда в файл может быть встроен вирус, но идея получения ссылки для загрузки и фактической загрузки чего-то, отличного от того, что вам предлагали загрузить с использованием технологии торрентов, невозможна. Подобные процессы существуют в сети IPFS, хэш-ориентированное хранилище - способ соединения различных участников с доверием к информации, которую вы передаете, без использования черного ящика, точно.",
  "And of course, Bitcoin. Bitcoin, as a more collective example, I'm sure Satoshi Nakamoto was well aware of Leslie Lamport's solution to the Byzantine Generals problem and, of course, observed how the idea of torrent trackers was developing. If we don't emphasize the properties that the Bitcoin blockchain obtained, such as immutability, transparency of transactions, and, to some extent, censorship resistance, then Bitcoin is an internet service that performs state transition, some changes in state based on transactions without a central node. It is an example of a collective construction of a global network in which there is a constantly functioning state transition function that we can trust, and to ensure trust, neither jurisdictions nor specific IP addresses nor the most primitive technologies used and still used today in building cloud services are used. The collective image of Bitcoin allowed overlaying the general concept from the 1930s of a Turing-complete machine on the existence of a universal abstract function for everything.": "И, конечно, Биткойн. Биткойн, как более коллективный пример, я уверен, что Сатоши Накамото хорошо знал решение Лесли Лэмпорта для проблемы византийских генералов и, конечно, наблюдал, как развивалась идея торрент-трекеров. Если мы не подчеркнем свойства, которые получил блокчейн Биткойна, такие как неизменяемость, прозрачность транзакций и, в определенной степени, устойчивость к цензуре, то Биткойн - это интернет-сервис, который выполняет переход состояния, некоторые изменения состояния на основе транзакций без центрального узла. Это пример коллективного построения глобальной сети, в которой есть постоянно функционирующая функция переход�� состояния, которой мы можем доверять, и чтобы обеспечить доверие, не используются ни юрисдикции, ни конкретные IP-адреса, ни самые примитивные технологии, используемые и до сих пор используемые сегодня в построении облачных сервисов. Коллективный образ Биткойна позволил наложить общую концепцию из 1930-х годов о машине с полным набором команд на существование универсальной абстрактной функции для всего.",
  "So, what do we need to add to this scheme to envision a global computer? From the bottom, we provide consensus validators or, in general, validators. It can be said that the \"Data availability layer\" is probably a phrase many have heard around Ethereum this year, and it has become an advantage of Bitcoin as well. However, in the organization scheme of the global computer, this is one piece of the puzzle and, as I mentioned, it complements the main function that lies at the heart of the global computer—the function of universal state transition. Going back to the very beginning, the analogy of the heart in the human body is interesting here. It's not a thinking thing, indeed. Yes, it doesn't generate, you could say, the brain is much more important. Still, life is impossible without the heart. It simply pumps blood. Similarly, at the core of the global computer, all transactions are pumped through the state transition function, resulting in outputs. But to organize this in a distributed internet network without the need to trust some citadel, we need to supplement the picture with two components.": "Итак, что нам нужно добавить к этой схеме, чтобы представить себе глобальный компьютер? Снизу мы предоставляем валидаторов согласия или, в общем, валидаторов. Можно сказать, что \"Слой доступности данных\" - это, вероятно, фраза, которую многие слышали в этом году в Ethereum, и это также стало преимуществом Биткойна. Однако в организационной ��хеме глобального компьютера это один кусочек пазла и, как я упомянул, дополняет основную функцию, которая лежит в основе глобального компьютера - функцию универсального перехода состояния. Вернемся к самому началу, аналогия с сердцем в человеческом организме здесь интересна. Это не мыслящая вещь, действительно. Да, оно не генерирует, можно сказать, что гораздо важнее мозг. Тем не менее, жизнь невозможна без сердца. Оно просто качает кровь. Аналогично, в центре глобального компьютера все транзакции проходят через функцию перехода состояния, что приводит к результатам. Но чтобы организовать это в распределенной интернет-сети без необходимости доверять какой-то крепости, нам нужно дополнить картину двумя компонентами.",
  "The first component is a set of computers or nodes that are ready to execute the state transition. When you send transactions, they don't just go here; they go to the validators. Validators perform computations, recalling what I've already mentioned in this ongoing conversation. They take your transaction, retrieve information from the blockchain about how to process that transaction, apply that processing, and then coordinate with other validators the fact that they correctly executed the state transition. The core of the global computer, in terms of protection against situations where Bob, the vacuum cleaner robot, receives a correct command from Alice in the office, is not based on trust but on cross-verification by a multitude of network participants based on available information from the blockchain. Not only from the blockchain, by the way. It's complex, and we won't delve into it right now, but essentially, a multitude of validators take turns watching and have incentives, some internal incentives within the protocol, to prevent the universal and capable-of-calculating-anything machine from executing this operation incorrectly. A validator effectively processes transactions that come into the global computer, and other validators help prevent situations where one of the validators performed an incorrect calculation. The better the consensus algorithms of the validators, the better protection we have for the state transition function or, in other words, the heart of our global computer.": "Первый компонент - это набор компьютеров или узлов, готовых выполнить переход состояния. Когда вы отправляете транзакции, они не просто идут сюда; они идут к валидаторам. Валидаторы выполняют вычисления, вспоминая то, что я уже упоминал в этом текущем разговоре. Они берут вашу транзакцию, извлекают информацию из блокчейна о том, как обработать эту транзакцию, применяют эту обработку, а затем согласовывают с другими валидаторами факт того, что они правильно выполнили переход состояния. Основа глобального компьютера, с точки зрения защиты от ситуаций, когда Боб, робот-пылесос, получает правильную команду от Элис в офисе, не основана на доверии, а на кросс-проверке множеством участников сети ��а основе доступной информации из блокчейна. Не только из блокчейна, кстати. Это сложно, и мы не будем углубляться в это прямо сейчас, но в основном множество валидаторов по очереди следят и имеют стимулы, некоторые внутренние стимулы в рамках протокола, чтобы предотвратить выполнение этой операции неправильно универсальной и способной к вычислению машины. Валидатор эффективно обрабатывает транзакции, поступающие в глобальный компьютер, а другие валидаторы помогают предотвратить ситуации, когда один из валидаторов выполнил неправильное вычисление. Чем лучше алгоритмы консенсуса валидаторов, тем лучше защита у нас есть для функции перехода состояния или, другими словами, сердца нашего глобального компьютера.",
  "The second part of this scheme is the data availability service—what we've always called the database in Bitcoin or Ethereum. In fact, we'll have to abandon that concept because there's a fundamental change in the architecture of all projects, and for those specifically targeting the global computer, this change is most crucial. For a simple present-day example: there are various implementations of Layer 2 networks on top of Ethereum—such as Arbitrum, Optimism, and others. If you start looking into their main differences and how they operate, you'll find that, in some cases, an L2 network in Ethereum sends a larger amount of data, solely from the first-layer blockchain, i.e., from the Ethereum blockchain. All the necessary puzzle pieces to confirm that the computation on the L2 layer was correct can be found in the first-layer Ethereum blockchain. On the other hand, other approaches suggest that beyond the first layer of Ethereum, something else is stored that needs to be found to prove the correctness of transactions. So, right now, before our eyes, there is again a question of improvement, but specifically of such an architecture where transactions go on the left, in the middle, we have the heart in the form of the state transition function, validators, and their consensus allows for the correct execution of this state transition. But there is also a question of data availability, which is necessary to ensure both cross-verification and, essentially, the existence of the service itself. Some approaches and patterns for creating L2 on top of Ethereum today ask the question: \"What if a certain L2 layer loses the data it doesn't store within the main Ethereum blockchain?\"": "Вторая часть этой схемы - это служба доступности данных, которую мы всегда называли базой данных в Bitcoin или Ethereum. Фактически, нам придется отказаться от этого концепта, потому что произошло фундаментальное изменение в архитектуре всех проектов, и для тех, кто специально нацелен на глобальный компьютер, это изменение является наиболее критическим. Для простого современного примера: существуют различные реализации сетей уровня 2 поверх Ethereum - такие как Arbitrum, Optimism и другие. Если вы начнете изучать их основные различия и принципы работы, вы увидите, что в некоторых случаях сеть L2 в Ethereum отправляет большее количество данных исключительно из блокчейна первого уровня, то есть из блокчейна Ethereum. Все необходимые элементы головоломки для подтверждения правильности вычислений на уровне L2 можно найти в блокчейне Ethereum первого уровня. С другой стороны, другие подходы предполагают, что за пределами первого уровня Ethereum хранится что-то еще, что нужно найти для подтверждения правильности транзакций. Таким образом, прямо сейчас, перед нашими глазами, снова возникает вопрос об улучшении, но конкретно такой архитектуры, где транзакции проходят слева, в середине у нас есть сердце в виде функции перехода состояния, валидаторы и их консенсус позволяет правильно выполнить этот переход состояния. Но также возникает вопрос доступности данных, который необходим для обеспечения как перекрестной проверки, так и, в сущности, самого существования се��виса. Некоторые подходы и шаблоны для создания L2 поверх Ethereum сегодня задают вопрос: \"Что, если определенный уровень L2 потеряет данные, которые не хранит в основном блокчейне Ethereum?\"",
  "Let's complement this picture with how Polkadot is structured. Polkadot has two consensus mechanisms: the \"babe\" consensus, responsible for the parachain-level consensus and is fast, and the \"grandpa\" consensus, which is slower and verifies everything afterward. So, if you delve into the wiki article titled \"The Path of a Block in the Polkadot Network,\" you will encounter interesting abbreviations. After achieving the \"babe\" consensus at the parachain level, the \"grandpa\" consensus introduces the concept of \"proof of validity and data availability.\" Going deeper, you'll find the term \"chunk\" of redundant pieces of information, inspired by CD RW technologies from the 90s and 2000s. This addresses the question of how to preserve information when absolute trust in a specific entity in the network is not feasible. The concept of \"chunk\" of redundant information is one of these patterns.": "Давайте дополним эту картину тем, как устроен Polkadot. У Polkadot есть два механизма консенсуса: консенсус \"babe\", ответственный за консенсус на уровне парачейн и быстрый, и консенсус \"grandpa\", который медленный и проверяет все после. Так что, если вы погрузитесь в статью вики с названием \"Путь блока в сети Polkadot\", вы столкнетесь с интересными сокращениями. После достижения консенсуса \"babe\" на уровне парачейн, консенсус \"grandpa\" вводит концепцию \"доказательства правильности и доступности данных\". Поглубже, вы найдете термин \"кусок\" из избыточных кусков информации, вдохновленный технологиями CD RW из 90-х и 2000-х годов. Это решает вопрос о том, как сохранить информацию, когда абсолютное доверие к определенной сущности в сети невозможно. Концепция \"куска\" избыточной информации - один из этих шаблонов.",
  "Summing up, at the core lies an abstract function that enables any computation and was described by Alan Turing in the 1930s. The personal computer, essentially a side effect of a mathematical problem, emerged from Turing's work. The technologies first applied in Bitcoin, such as consensus that allows the network to exist without a specific data center or entity responsible for data correctness, form a functioning mechanism. It goes beyond providing a specific service for electronic cash transfers; it allows us to audit and control any computation in the network. Additionally, we face the challenge of ensuring data availability, as it's not the primary concern of the world computer. The world computer's task lies at its core, executing computation, managing state transitions, and performing calculations, while the data in this scheme serves as a puzzle piece that is more necessary to support the lower part. Thus, this overall scheme can be seen as an abstract and generalized illustration of the world computer's structure, where the state transition function is at its core.": "Подводя итог, в основе лежит абстрактная функция, которая позволяет выполнять любые вычисления и была описана Аланом Тьюрингом в 1930-х годах. Персональный компьютер, по сути, является побочным эффектом математической проблемы, возникшей из работ Тьюринга. Технологии, впервые примененные в Bitcoin, такие как консенсус, который позволяет существовать сети без определенного центра данных или сущности, ответственной за правильность данных, формируют функционирующий механизм. Он выходит за рамки пред��ставления конкретной услуги для электронных денежных переводов; он позволяет нам аудитировать и контролировать любые вычисления в сети. Кроме того, мы сталкиваемся с проблемой обеспечения доступности данных, поскольку это не является первостепенной задачей мирового компьютера. Задача мирового компьютера заключается в его основе в выполнении вычислений, управлении переходами состояний и выполнении вычислений, в то время как данные в этой схеме служат пазлом, который более необходим для поддержки нижней части. Таким образом, эту общую схему можно рассматривать как абстрактное и обобщенное изображение структуры мирового компьютера, где функция перехода состояния находится в его основе.",
  "Part 4: The Path of a New Block of Information in the World Computer": "Часть 4: Путь нового блока информации в мировом компьютере",
  "The fourth and final part of our lecture is \"The World Computer in Your Home.\" After this, I will begin recording screencasts for the practical part of the sessions.": "Четвертая и последняя часть нашей лекции - \"Мировой компьютер у вас дома\". После этого я начну запись скринкастов для практической части занятий.",
  "Now we will try to summarize almost all the theory we have covered so far in terms of one process. The process that describes the path of an information block in the world computer. Let's start again by returning to the theme of web3 and the concept of blockchain. The phrase \"block\" or \"information block\" can be considered identical when stepping away from the last 10 years and taking a more general theory, as explored in the previous parts of the lectures. The concept of a \"block of information\" aligns with web3, but not necessarily with blockchain. Even without any crypto projects, we need to understand that when forming the theory of the world computer without referencing the formation of information blocks, it's currently challenging to envision other models. So, we will consider the path of an information block throughout the entire world computer, not because it is blockchain, but because, for now, there are no other ways to conceptualize the existence of the world computer other than by processing information in specific portions.": "Теперь мы попытаемся подвести итог почти всей теории, которую мы рассмотрели до сих пор, в терминах одного процесса. Процесс, описывающий путь информационного блока в мировом компьютере. Давайте начнем снова, вернувшись к теме web3 и концепции блокчейна. Фразу \"блок\" или \"информационный блок\" можно рассматривать как идентичные, отойдя от последних 10 лет и приняв более общую теорию, как это было исследовано в предыдущих частях лекций. Концепция \"блока информации\" соответств��ет web3, но не обязательно блокчейну. Даже без каких-либо криптопроектов, нам нужно понимать, что при формировании теории мирового компьютера без ссылки на формирование информационных блоков в настоящее время сложно представить другие модели. Поэтому мы рассмотрим путь информационного блока по всему мировому компьютеру не потому, что это блокчейн, а потому что на данный момент нет других способов концептуализировать существование мирового компьютера, кроме как обработка информации в определенных порциях.",
  "Block of information = block in web3, but without blockchain and without any crypto project influence. We must currently consider the formation of information blocks when discussing the theory of the world computer. Now, let's move on to the first point. I tried to find close analogies from everyday life to help illustrate the path of an information block in the world computer. The analogy I've chosen is the movement of a bus on a route. Our first meeting point is the bus station.": "Блок информации = блок в web3, но без блокчейна и без влияния каких-либо криптопроектов. Мы должны в настоящее время учитывать формирование информационных блоков, когда обсуждаем теорию мирового компьютера. Теперь перейдем к первой точке. Я пытался найти близкие аналогии из повседневной жизни, чтобы помочь проиллюстрировать путь информационного блока в мировом компьютере. Аналогией, которую я выбрал, является движение автобуса по маршруту. Наша первая встречная точка - автобусная остановка.",
  "I marked transactions in pink as small dots. Let's imagine a typical bus stop where people gather, waiting for a bus that operates on a schedule. If we don't consider the hustle and bustle of large cities, where buses are always late, everyone in the world generally knows that the train from village A to village B always arrives around 7:15 am. Transactions that users want to send to the world computer gather at a certain bus stop and wait for the bus to arrive.": "Я отметил транзакции розовым цветом как маленькие точки. Давайте представим типичную автобусную остановку, где люди собираются, ожидая автобус, который ходит по расписанию. Если не учитывать суету больших городов, где автобусы всегда опаздывают, все в мире обычно знают, что поезд из деревни А в деревню В всегда прибывает около 7:15 утра. Транзакции, которые пользователи хотят отправить в мировой компьютер, собираются на определенной автобусной остановке и ждут прибытия автобу��а.",
  "This is how our block is formed. Imagine: the bus arrives, and each person starts boarding one by one, taking their seats. The bus then follows its route. In our case, the block of information overcomes the first frontier. Our transactions, in some form, have settled into the bus and overcome the initial barrier. I will be using terminology primarily from Polkadot, and the third part should have better explained the concept of the world computer in the comparison between Ethereum and Polkadot. My personal opinion, and probably the majority of engineers today would agree, is that the representation of a heterogeneous multicentric world computer is better implemented in Polkadot. However, we will still go through the terms inherited from Ethereum, but towards the end of this part of the lecture.": "Это то, как формируется наш блок. Представьте: автобус приезжает, и каждый человек начинает по очереди садиться на свои места. Затем автобус следует своему маршруту. В нашем случае блок информации преодолевает первую границу. Наши транзакции, в какой-то форме, утвердились в автобусе и преодолели первое препятствие. Я буду использовать терминологию в основном из Polkadot, и третья часть должна была лучше объяснить концепцию мирового компьютера в сравнении между Ethereum и Polkadot. Мое личное мнение, и, вероятно, большинство инженеров сегодня согласились бы, что представление гетерогенного мультицентрического мирового компьютера лучше реализовано в Polkadot. Однако мы все равно пройдем через термины, у��аследованные от Ethereum, но к концу этой части лекции.",
  "What is the line that separates the bus stop from the bus's further movement? This line represents the collators of the network – participants in the network nodes who collect transactions. You can think of a collator not as a bus driver but as a controller who stays at the bus stop. In other words, this controller checks whether you have a ticket when you enter the bus. It doesn't recheck in the database how valid the ticket is but looks at the basic parameters of the ticket and checks if everything seems fine. In reality, collators perform almost all the calculations required, verifying the ticket number and other data, but they are not required to guarantee that the check is done correctly. Therefore, collators are controllers who remain at the bus stop, primarily ensuring passenger boarding, seating, and sending the bus further along the route.": "Какая линия отделяет автобусную остановку от дальнейшего движения автобуса? Эта линия представляет собой коллаторов сети - участников узлов сети, собирающих транзакции. Вы можете думать о коллаторе не как о водителе автобуса, а как о контроллере, который остается на автобусной остановке. Другими словами, этот контроллер проверяет, есть ли у вас билет при входе в автобус. Он не перепроверяет в базе данных, насколько действителен билет, а смотрит на основные параметры билета и проверяет, все ли в порядке. На самом деле коллаторы выполняют практически все необходимые вычисления, проверяя номер билета и другие данные, но им не требуется гарантировать, что проверка выполнена правильно. Поэтому коллаторы - это контроллеры, которые остаются на автобусной остановке, в первую очередь обеспечивая посадку пассажиров, занятие мест и отправку автобуса дальше по маршруту.",
  "Beyond the drawn border, we enter the first validation area where paravalidators are located. These are validators of the entire ecosystem, the entire network, specifically assigned for a certain time to check each transaction and thus perform actual computations in the world computer. Our not-yet-fully-formed block of information is marked with a dashed line. It is still a candidate block of information since it has not undergone any actual verification. The collator, who collected the block of information and checked the transactions at the entrance, does not participate in any way in securing the cybersecurity of the computations conducted. Its task is only to seat all transactions and form the first block. At this stage, the transformation from a candidate to a real block of information begins.": "За нарисованной границей мы входим в первую зону валидации, где находятся паравалидаторы. Это валидаторы всей экосистемы, всей сети, специально назначенные на определенное время для проверки каждой транзакции и тем самым выполнения фактических вычислений в мировом компьютере. Наш еще не полностью сформированный блок информации отмечен пунктирной линией. Это все еще кандидат на блок информации, поскольку он не прошел никакой фактической проверки. Коллатор, который собрал блок информации и проверил транзакции на входе, никоим образом не участвует в обеспечен��и кибербезопасности проводимых вычислений. Его задача - только посадить все транзакции и сформировать первый блок. На этом этапе начинается преобразование из кандидата в реальный блок информации.",
  "I have divided it into three parts, but forgot one more. Let's consider four parts of this candidate block. The top part, known to users of various web3 applications as the header or block header, is the quintessence, the most popular piece of information circulating and reflected from the block explorer to the console clients of all nodes mining, staking, and so on. The header is a key element of the block, but it is practically formed at the last stage at this point.": "Я разделил это на три части, но забыл еще одну. Давайте рассмотрим четыре части этого кандидата на блок. Верхняя часть, известная пользователям различных веб-приложений web3 как заголовок или блочный заголовок, является квинтэссенцией, самым популярным куском информации, циркулирующим и отраженным от блок-эксплорера к консольным клиентам всех узлов, майнящих, стейкингующих и так далее. Заголовок - ключевой элемент блока, но он практически формируется на последнем этапе на данном этапе.",
  "Firstly, we have our actual requests for state transitions or computations. There is a list of changes that need to be made: convert A to A', B to B', C to C', applying a set of algorithms to them. For this, we will now build another boundary immediately and go beyond it to perform this part of the work, and then only proceed beyond it. Already at the block preparation stage, we have to cross the second boundary within the world computer to go for the algorithms that need to be applied to prepare the block. As I mentioned before, theoretically, the controller at the bus stop here does the same, but I wouldn't pay much attention to that. The block preparation stage, especially when we talk about examples simultaneously from Polkadot and Ethereum as a world computer, they differ slightly and show us the insignificance of checks at this stage because it is precisely on the second step, after passing the first boundary and receiving the block of information from collators, that the attention-worthy calculations of this world computer begin.": "Во-первых, у нас есть наши фактические запросы на перех��ды состояний или вычисления. Есть список изменений, которые необходимо внести: преобразовать A в A', B в B', C в C', применяя к ним набор алгоритмов. Для этого мы сейчас построим еще одну границу немедленно и перейдем за нее, чтобы выполнить эту часть работы, а затем только продолжим за нее. Уже на этапе подготовки блока нам придется пересечь вторую границу внутри мирового компьютера, чтобы перейти к алгоритмам, которые необходимо применить для подготовки блока. Как я уже упоминал ранее, теоретически контроллер на автобусной остановке здесь делает то же самое, но я бы не уделял этому много внимания. Этап подготовки блока, особенно когда мы говорим о примерах одновременно из Polkadot и Ethereum как мирового компьютера, они немного отличаются и показывают нам незначительность проверок на этом этапе, потому что именно на втором шаге, после прохождения первой границы и получения блока информации от коллаторов, начинаются достойные внимания вычисления этого мирового компьютера.",
  "To perform these calculations, the validator, at this stage, can only do so by turning to the relay chain, the central database, and taking from there the algorithms from the runtime. In the case of Ethereum, it was the same virtual machines in the previous architectural concept, which could be applied, so there was no need to go anywhere. Almost every node had a complete copy of the algorithms that could be applied. But in terms of a heterogeneous network, where each segment or each individual chain may have its own set of algorithms, a validator, before actually executing all the transitions, calculations obtained in the form of a block candidate from the collator, must consult. It must consult the relay chain, consult the main blockchain in the network and take from there the necessary algorithms, apply them, and perform state transitions.": "Для выполнения этих вычислений валидатор на данном этапе может сделать это только обратившись к ретрансляционной цепи, центральной базе данных и взяв оттуда алгоритмы из времени выполнения. В случае Ethereum это были те же виртуальные машины в предыдущей архитектурной концепции, которые могли быть применены, поэтому никуда ходить не приходилось. Почти каждый узел имел полную копию алгоритмов, которые могли быть применены. Но в случае гетерогенной сети, где каждый сегмент или каждая отдельная цепь могут иметь свой набор алгоритмов, валидатору, прежде чем фактически выполнить все переходы, вычисления, полученные в виде кандидата в блоке от коллатора, необходимо проконсультироваться. Он дол��ен проконсультироваться с ретрансляционной цепью, проконсультироваться с основным блокчейном в сети и взять оттуда необходимые алгоритмы, применить их и выполнить переходы состояний.",
  "During the execution of calculations, a Merkle tree is simultaneously formed, and we won't dwell on it because Merkle trees are not that complicated from the perspective of computer science. Still, I notice that to understand how to apply them in engineering and in the architecture of a project, how they are applied, not just by reading on Wikipedia, you need to break your head a bit, imagine examples. In this example, we won't delve too much into it, but I think for those who are already familiar with some basic definitions, have read about Merkle trees, it will become a bit clearer about how and at what moments another Merkle tree is assembled. The Merkle tree is formed when we actually perform calculations and output values appear. These output values are packed into a binary tree format, then the addition is performed between them in computer science language, and the top node reaches the header. Let's denote it with a big letter \"H.\" It's a small and pleasant aspect of considering such schemes.": "Во время выполнения вычислений одновременно формируется дерево Меркля, и мы не будем останавливаться на этом, потому что деревья Меркля не настолько сложны с точки зрения компьютерных наук. Тем не менее, я замечаю, что для понимания того, как их применять в инженерии и в архитектуре проекта, как они применяются, не просто читая на Википедии, нужно немного постараться, представить примеры. В этом примере мы не будем слишком углубляться, но я думаю, что для тех, кто уже знаком с некоторыми основными определениями, прочитал о деревьях Меркля, станет немного яснее, как и в какие моменты собирается другое дерево Меркля. Дерево Меркля формируется, когда мы фактически выполняем вычисления и появляются выходные значения. Эти выходные значения упаковываются в двоичный формат дерева, затем выполняется сложение между ними на языке компьютерных наук, и верхний узел достигает заголовка. Давайте обозначим его большой буквой \"H.\" Это маленький и приятный аспект рассмотрения таких схем.",
  "In this scheme, we can note how the block header is actually related to the computations performed inside. Let's look again - our block candidate came from the collator. There is a set of transactions that need to be executed, perform calculations. The validator went through another internal boundary, one more, behind the algorithms, applied them, and recorded all the results at the lowest level of the Merkle tree. The other nodes are essentially systemic. They do not come from any data; they don't come from anywhere. At the second level, the node does not come from any information. It is obtained by summing values in these two leaves, and when we go up with you, we get only the root of this tree, which is enough to protect all output values. We won't get the same header if we change any of these calculations. And this is one of the magical and simple features, like hash-oriented storage, of how we can protect a whole block of information by talking only about one header. Therefore, headers are so important and play a cornerstone role even in architectures when we transition from one chain or one virtual machine to many combined in the network. It is enough for us to ensure the security of storing headers to be sure that all transactions that were executed at the block preparation stage were executed correctly, and they cannot be replaced.": "В этой схеме мы можем отметить, как заголовок блока фактически связан с выполненными внутри вычислениями. Давайте посмотрим еще раз - наш кандидат в блок пришел от коллатора. Есть набор транзакций, которые нужно выполнить, выполнить вычисления. Валидатор прошел через еще одну внутреннюю границу, еще одну, за алгоритмами, применил их и записал все результаты на самом низком уровне дерева Меркля. Другие узлы в основном системные. Они не происходят от каких-либо данных, они не приходят откуда-либо. На втором уровне узел не происходит от какой-либо информации. Он получается путем суммирования значений в этих двух листьях, и когда мы поднимаемся вместе с вами, мы получаем только корень этого дерева, что достаточно для защиты всех выходных значений. Мы не получим тот же заголовок, если изменим хотя бы одно из этих вычислений. И это одна из волшебных и простых особенностей, как хэш-ориентированное хранение, как мы можем защитить целый блок информации, говоря только о одном заголовке. Поэтому заголовки настолько важны и играют ключевую роль даже в архитектурах, когда мы переходим от одной цепи или одной виртуальной машины к множеству объединенных в сети. Для нас достаточно обеспечить безопасность хранения заголовков, чтобы быть уверенными, что все транзакции, которые были выполнены на этапе подготовки блока, были выполнены правильно и их нельзя заменить.",
  "And one field is still left unfilled. In the process of preparing the block of information, it is the author's field, that is, the validator who actually performed all the changes, prepared the Merkle tree, and recorded the header. Since we are considering an example with the bus moving along the route from the stop, let's call the validator a \"controller\" who goes right inside the bus, passes each seat, approaches each person, checks for real what is written on their tickets, makes some mark, validates it, and, accordingly, puts their signature. The controller, for example, number 134, meaning, naturally, each validator has some unique identifier, their address, and we also somehow uniquely renamed it here.": "И одно поле все еще остается незаполненным. В процессе подготовки блока информации это поле автора, то есть валидатора, который фактически выполнил все изменения, подготовил дерево Меркля и записал заголовок. Поскольку мы рассматриваем пример с автобусом, движущимся по маршруту от остановки, давайте назовем валидатора \"контролером\", который заходит прямо в автобус, проходит мимо каждого места, подходит к каждому человеку, проверяет на деле то, что написано на их билетах, ставит отметку, валидирует это и, соответственно, ставит свою подпись. Контролер, например, номер 134, что означает, естественно, что у каждого валидатора есть уникальный идентификатор, их адрес, и мы также как-то уникально переименовали это здесь.",
  "And it seems that at this point, we could have shaded and made our block boundaries bolder, but no, and this is one of the interesting changes that have occurred in the last 5 years in terms of decentralized ecosystems, namely the shift from proof of work. When validators of the network, at that time miners, never had to coordinate anything with each other. You produced a block and sent it to the network and moved on. In fact, it was not a consensus of agreed consent. It was a consensus of obvious agreement with the fact that had occurred. What is interesting changes when the architecture becomes more complex, and we have come closer from a simple calculator like Bitcoin with a ledger towards an actual virtual computer, is that at each stage, the connectivity of participants who ensure security and block production has increased. Because, in fact, no one who risks their stake, the one who ensures this security and wants to earn by processing your transactions, has something to lose, unlike proof of work. In proof of work, you bought the equipment, yes, you put money into it, you spend electricity, but there is actually no protection against the fact that you can attack the network with your power, the same 51% attack, where someone with a lot of miners can try to rewrite the chain.": "И кажется, что на этом этапе мы могли бы затенить и сделать наши границы блока жирнее, но нет, и это одно из интересных изменений, которые произошли за последние 5 лет в терминах децентрализованных экосистем, а именно сдвиг от доказательства работы. Когда валидаторы сети, тогда майнеры, никогда не должны были координировать что-либо друг с другом. Вы создавали блок и отправляли его в сеть и двигались дальше. Фактически это не было согласием о согласии. Это было согласием на очевидное согласие с тем, что произошло. Что интересно при изменениях, когда архитектура становится более сложной, и мы приближаемся от простого калькулятора, как Bitcoin с реестром, к фактическому виртуальному компьютеру, это то, что на каждом этапе связь участников, обеспечивающих безопасность и производство блоков, увеличивается. Потому что, фактически, никто, кто рискует своей долей, тот, кто обеспечивает эту безопасность и хочет заработать, обрабатывая ваши транзакции, не имеет чего терять, в отличие от доказательства работы. В доказательстве работы вы покупали оборудование, да, вы вкладывали в него деньги, тратили электроэнергию, но на самом деле нет защиты от того, что вы можете атаковать сеть своей мощностью, та же атака 51%, где кто-то с большим количеством майнеров может попытаться переписать цепочку.",
  "Now we are talking about proof of stake, where a deposit is already made, and if you do something wrong, a part will be withdrawn from it, as a penalty. All nodes, absolutely, in all architectures that I currently observe, mechanisms for messaging between validators began to appear quickly at the block preparation stage. In Polkadot, it is no different. Any validator of a separate parachain that collects a block knows the addresses or already has established contact with another 15-63 validators who are with you on this epoch, on some temporary period, as validators, and each of them randomly becomes a block producer at some point. But being appointed as a producer does not negate a very important component of this process. You do not stop interacting with the other participants. There is always a pool of validators assigned to a specific epoch, to a certain time slot, for validating a particular parachain or segment of the world computer. Regardless of whether you are a validator-controller specifically assigned to produce the next block in the world computer of this segment, you still stay in touch with the other validators, and you have constant contact with them.": "Сейчас мы говорим о доказательстве доли, где депозит уже сделан, и если вы сделаете что-то неправильно, часть будет изъята из него в качестве штрафа. Все узлы, абсолютно, во всех архитектурах, которые я в настоящее время наблюдаю, механизмы обмена сообщениями между валидаторами начали появляться быстро на этапе подготовки блока. В Polkadot это не исключение. Любой валидатор отдельной парачейны, собирающий блок, знает адреса или уже установил контакт с другими 15-63 валидаторами, которые находятся с вами на этой эпохе, на какой-то временный период, как валидаторы, и каждый из них случайным образом становится производителем блока в определенный момент. Но назначение на производство не отменяет оче��ь важного компонента этого процесса. Вы не прекращаете взаимодействие с другими участниками. Всегда есть пул валидаторов, назначенных на определенную эпоху, на определенный временной слот, для проверки определенной парачейны или сегмента мирового компьютера. Независимо от того, являетесь ли вы валидатором-контроллером, специально назначенным для производства следующего блока в мировом компьютере этого сегмента, вы все равно остаетесь на связи с другими валидаторами и постоянно находитесь в контакте с ними.",
  "Why is this constant contact necessary? It turns out to be quite simple. We do not want, when we move into the inner part, to be afraid or worry that we performed any of the operations incorrectly. As surprising as it may seem, it is beneficial for any validator, before moving on, to first turn to their colleagues assigned to validation and ask them to double-check the calculations. This check is informal, so even if we do not use any logging into an immutable database of requests for verification and the results of this verification, the appointed controller, after talking to the pool of validators, still collects additional responses from all validators assigned to this parachain or network segment. Together with additional confirmations, the controller moves on to the next stage. But even here, it's not quite as simple. At this stage, another process has to be performed. It is important to note that at this stage, our block of information is still a candidate block, and settlement of information is already taking place in the storage. Neither at the very end, nor after we have created and sealed the block and attached it with an archiver in the final part, namely here, in this middle part where all the calculations are actually performed, does the information get saved in the storage. Therefore, our controller, in addition to talking to their colleagues, also ensures the storage of data in some storage, which is also quite metaphysical because the moment you communicate with other validators, this storage gets filled. How is this checked? We will need to move on to the next stage.": "Зачем нужен этот постоянный контакт? Оказывается, все довольно просто. Мы не хотим, чтобы, переходя во внутреннюю часть, бояться или беспокоиться о том, что мы выполнили какие-либо операции неправильно. Как ни удивительно, это полезно для любого валидатора, прежде чем перейти к следующему этапу, обратиться к своим коллегам, ответственным за валидацию, и попросить их дважды проверить вычисления. Эта проверка неофициальная, поэтому даже если мы не используем какие-либо журналы в неизменяемой базе данных запросов на проверку и результатов этой проверки, назначенный контроллер, после разговора с пулом валидаторов, все равно собирает дополнительные ответы от всех валидаторов, назначенных на ��ту парачейну или сегмент сети. Вместе с дополнительными подтверждениями контроллер переходит к следующему этапу. Но даже здесь все не так просто. На этом этапе должен быть выполнен еще один процесс. Важно отметить, что на этом этапе наш блок информации все еще является кандидатским блоком, и урегулирование информации уже происходит в хранилище. Ни в самом конце, ни после того, как мы создали и запечатали блок и присоединили его с архиватором в конечной части, а именно здесь, в этой средней части, где все вычисления фактически выполняются, информация не сохраняется в хранилище. Поэтому наш контроллер, помимо общения со своими коллегами, также обеспечивает хранение данных в каком-то хранилище, что также довольно метафизично, потому что в момент общения с другими валидаторами это хранилище заполняется. Как это проверяется? Нам нужно перейти к следующему этапу.",
  "In summary, to complete the middle part, let's look again. We still have only a candidate block at the very beginning. Yes, all transactions are roughly calculated somewhere at the bus stop, everyone has taken their seats according to their tickets. We have passed the first boundary, which is essentially direct established contact between validators and block collators. In Ethereum and Polkadot, these are slightly different schemes now. But everything that happens on the left side at the very beginning does not provide cybersecurity for data and calculations. It's just preparation. Once we have passed and entered the environment of the validators' attention, work with the block of information in the world computer begins. A randomly selected validator, in our case, with a bus route - a controller, actually goes through each of the seats, checks the ticket, checks and performs all the calculations that were made, gathers all the information into a tree. The resulting root node of this tree becomes the header of the proposed block. The validator who actually performs all the calculations with this block of information communicates with the other participants who perform a similar function for the same route in an undefined time slot. And while communicating with them and asking them to verify all the calculations, we are actually filling a certain storage of data in the network. It is not a specific physical storage; there is no specific IP address, no specific hard drive onto which they all load through some VPN or login and password scheme, of course not. In the process of communicating with other validators, data remains on their local machines, and this data will further participate in the transformation of this candidate into a new block of information. In essence, the sealed block that will be settled in the relay chain is collected. We have assembled a block. All the metadata around the calculations is already filled, which means we can try to move on to the next frontier.": "В общем, чтобы завершить среднюю часть, давайте посмотрим еще раз. У нас все еще есть только кандидатский блок в самом начале. Да, все транзакции грубо рассчитаны где-то на автобусной остановке, каждый занял свое место в соответствии с билетами. Мы прошли первую границу, которая по сути представляет собой прямой установленный контакт между валидаторами и сборщиками блоков. В Ethereum и Polkadot эти схемы немного отличаются сейчас. Но все, что происходит слева в самом начале, не обеспечивает кибербезопасность для данных и вычислений. Это просто подготовка. Как только мы прошли и вошли в среду внимания валидаторов, начинается работа с блоком информации в мировом компьютере. Случайно выбранный валид��тор, в нашем случае, с маршрутом автобуса - контроллер, фактически проходит через каждое место, проверяет билет, проверяет и выполняет все вычисления, которые были сделаны, собирает всю информацию в дерево. Полученный корневой узел этого дерева становится заголовком предложенного блока. Валидатор, который фактически выполняет все вычисления с этим блоком информации, общается с другими участниками, которые выполняют аналогичную функцию для того же маршрута в неопределенный временной интервал. И, общаясь с ними и просив их проверить все вычисления, мы фактически заполняем определенное хранилище данных в сети. Это не конкретное физическое хранилище; нет конкретного IP-адреса, нет конкретного жесткого диска, на который все загружают через какую-то VPN или схему входа и пароля, конечно. В процессе общения с другими валидаторами данные остаются на их локальных машинах, и эти данные далее будут участвовать в преобразовании этого кандидата в новый блок информации. По сути, собирается запечатанный блок, который будет урегулирован в ретрансляционной цепи. Мы собрали блок. Вся метаданные вокруг вычислений уже заполнены, что означает, что мы можем попытаться перейти к следующей границе.",
  "At this moment, let's delve into the passage of the next boundary. The most crucial aspect at the final stage becomes the block header. We are less concerned with the execution of computations; we can simplify our perspective here, as computations may vary based on the architecture, whether it's Ethereum or Polkadot. The key point is that, on the intermediate stage, from what I observe in the theory and practice of implementing the world computer concept, most computations happen at an intermediate level. The last level remains only to execute essential checks. Almost all these checks in a multi-chain architecture are related to the concatenation or merging of block headers into one block.": "На данный момент давайте погрузимся в прохождение следующей границы. Самым важным аспектом на последнем этапе становится заголовок блока. Мы меньше беспокоимся о выполнении вычислений; мы можем упростить наш взгляд здесь, так как вычисления могут различаться в зависимости от архитектуры, будь то Ethereum или Polkadot. Ключевой момент заключается в том, что на промежуточном этапе, из того, что я наблюдаю в теории и практике реализации концепции мирового компьютера, большинство вычислений происходят на промежуточном уровне. Последний уровень остается только для выполнения основных проверок. Почти все эти проверки в мультицепочной архитектуре связаны с конкатенацией или объединением заголовк��в блоков.",
  "In the final part of our journey, the most important element in the world computer's information block becomes the cornerstone – the header. The second component is more about meta-information. If the header is the actual result of all computations, the additional meta-information being transmitted consists of receipts and signatures of the validators who participated in the intermediate stage of this process. At the final stage, we can visualize the whole picture solely as the assembly of the same tree, not as a list of transactions. In the relay chain's final part, the crucial aspect is the assembly of headers from many similar processes, but linked to different segments of the world computer, different parachains.": "На последнем этапе нашего путешествия самым важным элементом в информационном блоке мирового компьютера становится краеугольный камень - заголовок. Второй компонент больше о мета-информации. Если заголовок является фактическим результатом всех вычислений, то дополнительная мета-информация, передаваемая, состоит из квитанций и подписей валидаторов, участвовавших на промежуточном этапе этого процесса. На последнем этапе мы можем визуализировать всю картину исключительно как сборку одного и того же дерева, а не как список транзакций. В последней части ретрансляционной цепи ключевым аспектом является сборка заголовков из множества аналогичных процессов, но связанных с различными сегментами мирового компьютера, различны��и парачейнами.",
  "Each parachain, each set of validators – we've discussed one example, but in reality, such block preparations for parachains happen 30-40 times. The number of parachain slots or the number of L2 networks in Ethereum will result in a similar number of processes with a similar architecture. However, in the final stage, we will see an approximately identical picture everywhere – how the block header will be formed from a multitude of headers from other blocks. In this process, we need to introduce one more entity and jump back across the boundary to the second stage.": "Каждый парачейн, каждый набор валидаторов - мы обсудили один пример, но на самом деле подобные подготовки блоков для парачейнов происходят 30-40 раз. Количество слотов парачейнов или количество L2-сетей в Ethereum приведет к подобному количеству процессов с аналогичной архитектурой. Однако на последнем этапе мы увидим примерно одинаковую картину везде - как будет формироваться заголовок блока из множества заголовков из других блоков. В этом процессе нам нужно ввести еще одну сущность и перескочить через границу на второй этап.",
  "Finalizers. In fact, they are also validators, but relay chain validators. In the Polkadot architecture, we have a thousand validators divided into two groups. The first, a very small group, is responsible only for forming the block header and a new block consisting of the headers of the State of the States blocks. The second group – parachain validators – is further divided into many subgroups, but this group is called parachain validators. In L2 networks above Ethereum, this story will eventually gain more understanding, more denominators. For now, let's focus on the Polkadot architecture. Finalizers, besides checking an additional set of meta-information and rechecking a validator with a specific ID, randomly chosen to generate this block of all blocks, also help recheck meta-information, check, and assemble all headers into one. It's a bit complex, yes, if we look at it from the perspective of tree assembly.": "Финализаторы. Фактически, они также являются валидаторами, но валидаторами ретрансляционной цепи. В архитектуре Polkadot у нас тысяча валидаторов, разделенных на две группы. Первая, очень маленькая группа, отвечает только за формирование заголовка блока и нового блока, состоящего из заголовков блоков Состояния Состояний. Вторая группа - валидаторы парачейнов - дополнительно разделена на множество подгрупп, но эта группа называется валидаторами парачейнов. В L2-сетях над Ethereum эта история в конечном итоге приобретет больше понимания, больше знаменателей. Пока что давайте сосредоточимся на архитектуре Polkadot. Финализаторы, помимо проверки дополнительного набора мета-информации и повторной проверки валидатора с определенным идентификатором, случайно выбранным для генерации этого блока из всех блоков, также помогают повторно проверить мета-информацию, проверить и собрать все заголовки в один. Это немного сложно, да, если мы посмотрим на эт�� с точки зрения сборки дерева.",
  "In addition to this, in the Polkadot architecture and in Ethereum with the latest changes, a data availability check takes place. For this, finalizers visit parachain validators and try to request actual information about each block stored in the network. If they receive data from at least 1/3 of the validators, using technology that allows redundant storage of information, and subsequently, if someone loses it, one or two or three validators can still restore it, there is a critical threshold at 1/3. If 1/3 of the nodes respond and say that we have data about the block being produced, finalizers tell the block that it is already a fully formed information block, that all computations have been done correctly, that we have already taken the header of this block and combined it with someone else's headers from other segments of the network. We have already formed the main header of the entire network. After that, finalizers place many checkmarks on the final block, which combines all performed computations.": "Кроме того, в архитектуре Polkadot и в Ethereum с последними изменениями происходит проверка доступности данных. Для этого финализаторы посещают валидаторов парачейн и пытаются запросить фактическую информацию о каждом блоке, хранящемся в сети. Если они получают данные от по крайней мере 1/3 валидаторов, используя технологию, позволяющую избыточное хранение информации, и впоследствии, если кто-то ее потеряет, один или два или три валидатора все равно могут восстановить ее, существует критический порог на уровне 1/3. Если 1/3 узлов отвечают и говорят, что у нас есть данные о производимом блоке, финализаторы сообщают блоку, что это уже полностью сформированный информационный блок, что все вычисления ��ыли выполнены правильно, что мы уже взяли заголовок этого блока и объединили его с заголовками других сегментов сети. Мы уже сформировали основной заголовок всей сети. После этого финализаторы ставят много галочек на финальном блоке, который объединяет все выполненные вычисления.",
  "Currently, this is the situation from the perspective of the most engineering-implemented multi-chain heterogeneous ecosystem, which is Polkadot. It is the most engineering-implemented multi-chain heterogeneous ecosystem, not too far from Ethereum. I would like to focus on the comparison, and if someone is interested in understanding how information blocks flow in Ethereum with L2 networks, you can try to do that now. I will return to this question when some elements of Ethereum, in terms of heterogeneity and multi-chain aspects, are completed. It might take 1-2 years, and then we can build such a picture. Nevertheless, we can generally accept a scheme with three main stages:": "В настоящее время это ситуация с точки зрения наиболее инженерно реализованной мультицепочечной гетерогенной экосистемы, которая является Polkadot. Это наиболее инженерно реализованная мультицепочечная гетерогенная экосистема, не слишком далекая от Ethereum. Я бы хотел сосредоточиться на сравнении, и если кто-то заинтересован в понимании того, как информационные блоки передаются в Ethereum с сетями L2, вы можете попробовать сделать это сейчас. Я вернусь к этому вопросу, когда некоторые элементы Ethereum, с точки зрения гетерогенности и мультицепочечных аспектов, будут завершены. Это может занять 1-2 года, и тогда мы сможем построить такую картину. Тем не менее, мы можем в общем принять схему с тремя основными этапами:",
  "**1. Formation of a candidate for the information block:**": "**1. Формирование кандидата для информационного блока:**",
  "In this stage, the initial candidate for the information block is formed.": "На этом этапе формируется начальный кандидат для информационного блока.",
  "**2. Execution of all computations, data storage, data availability, rechecking with other nodes, ensuring that all state transitions are performed correctly according to specific algorithms, and storing these algorithms in the main citadel:**": "**2. Выполнение всех вычислений, хранение данных, доступность данных, повторная проверка с другими узлами, обеспечение того, что все переходы состояний выполняются правильно в соответствии с конкретными алгоритмами и хранение этих алгоритмов в основном цитаделе:**",
  "This stage involves the actual execution of computations, saving data to certain layers, ensuring data availability, rechecking with other nodes to confirm that all state transitions are in accordance with algorithms stored somewhere in the main citadel.": "Этот этап включает в себя фактическое выполнение вычислений, сохранение данных на определенных уровнях, обеспечение доступности данных, повторную проверку с другими узлами для подтверждения того, что все переходы состояний соответствуют алгоритмам, хранящимся где-то в основном цитаделе.",
  "**3. Finalization, which will not recheck the computations but will verify the meta-information, how this meta-information is stored. It will then assemble the final block, which is the state of the states, and release it as a common information block for the entire segmented multi-chain network:**": "**3. Финализация, которая не будет повторно проверять вычисления, но будет проверять мета-информацию, как эта мета-информация хранится. Затем она соберет окончательный блок, который является состоянием состояний, и выпустит его как общий информационный блок для всей сегментированной мультицепочной сети:**",
  "The final stage involves checking the meta-information, verifying how this meta-information is stored, assembling the final block (state of the states), and releasing it as a common information block for the entire segmented multi-chain network.": "Финальный этап включает проверку мета-информации, проверку того, как эта мета-информация хранится, сбор окончательного блока (состояние состояний) и выпуск его как общего информационного блока для всей сегментированной мультицепочной сети.",
  "At this point, we can say that our information is saved. It has passed through the heart, the heart has executed its data transfer correctly, and we can already use the output values. Some will use them to open a smart-contract-purchased apartment with a smart lock, while others might show off their NFT, just received for 10 ethers.": "На этом этапе мы можем сказать, что наша информация сохранена. Она прошла через сердце, сердце правильно передало свои данные, и мы уже можем использовать выходные значения. Некоторые будут исполь��овать их, чтобы открыть квартиру, купленную смарт-контрактом с смарт-замком, в то время как другие могут похвастаться своим NFT, только что полученным за 10 эфиров.",
  "In general, this is approximately how it works. This concludes the theoretical part. I think it took about 2 hours, and ahead of us are practical sessions that I will be recording over the next few months. They will help us understand the observed data from the console window, decentralized applications, block explorers, where we will gradually understand how all these theoretical numbers and letters actually look in implementation using Polkadot as an example. I will also start getting hands-on with implementations at the L2 level using one of the well-known frameworks for building L2. Thank you to everyone who has been watching.": "В общем, примерно так это работает. Этим завершается теоретическая часть. Я думаю, что это заняло около 2 часов, и перед нами практические занятия, которые я буду записывать в течение следующих нескольких месяцев. Они помогут нам понять наблюдаемые данные из окна консоли, децентрализованные приложения, блок-эксплореры, где мы постепенно поймем, как все эти теоретические цифры и буквы на самом деле выглядят в реализации, используя Polkadot в качестве примера. Я также начну практическую работу с реализациями на уровне L2 с использованием одного из известных фреймворков для построения L2. Спасибо всем, кто смотрел."
}